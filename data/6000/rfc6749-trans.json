{
  "title": {
    "text": "RFC 6749 - The OAuth 2.0 Authorization Framework",
    "ja": "RFC 6749 - OAuth 2.0認可フレームワーク"
  },
  "number": 6749,
  "created_at": "2020-08-15 20:00:58.776235+09:00",
  "updated_by": "自動翻訳＆手動修正",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                     D. Hardt, Ed.\nRequest for Comments: 6749                                     Microsoft\nObsoletes: 5849                                             October 2012\nCategory: Standards Track\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 17,
      "text": "The OAuth 2.0 Authorization Framework",
      "ja": "OAuth 2.0認可フレームワーク"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.",
      "ja": "OAuth 2.0認可フレームワークを使用すると、リソース所有者に代わって、リソース所有者とHTTPサービス間の認可インタラクションを調整するか、サードパーティアプリケーションに次のことを許可することにより、サードパーティアプリケーションがHTTPサービスへの制限付きアクセスを取得できます。自分のためにアクセス権を取得します。この仕様は、RFC 5849で説明されているOAuth 1.0プロトコルを置き換え、廃止します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置づけ"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。インターネット標準の詳細については、RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6749.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、http://www.rfc-editor.org/info/rfc6749 で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2012 IETF Trustおよびドキュメントの作成者として特定された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n   1.1. Roles ......................................................6\n   1.2. Protocol Flow ..............................................7\n   1.3. Authorization Grant ........................................8\n        1.3.1. Authorization Code ..................................8\n        1.3.2. Implicit ............................................8\n        1.3.3. Resource Owner Password Credentials .................9\n        1.3.4. Client Credentials ..................................9\n   1.4. Access Token ..............................................10\n   1.5. Refresh Token .............................................10\n   1.6. TLS Version ...............................................12\n   1.7. HTTP Redirections .........................................12\n   1.8. Interoperability ..........................................12\n   1.9. Notational Conventions ....................................13\n2. Client Registration ............................................13\n   2.1. Client Types ..............................................14\n   2.2. Client Identifier .........................................15\n   2.3. Client Authentication .....................................16\n        2.3.1. Client Password ....................................16\n        2.3.2. Other Authentication Methods .......................17\n   2.4. Unregistered Clients ......................................17\n3. Protocol Endpoints .............................................18\n   3.1. Authorization Endpoint ....................................18\n        3.1.1. Response Type ......................................19\n        3.1.2. Redirection Endpoint ...............................19\n   3.2. Token Endpoint ............................................21\n        3.2.1. Client Authentication ..............................22\n   3.3. Access Token Scope ........................................23\n4. Obtaining Authorization ........................................23\n   4.1. Authorization Code Grant ..................................24\n        4.1.1. Authorization Request ..............................25\n        4.1.2. Authorization Response .............................26\n        4.1.3. Access Token Request ...............................29\n        4.1.4. Access Token Response ..............................30\n   4.2. Implicit Grant ............................................31\n        4.2.1. Authorization Request ..............................33\n        4.2.2. Access Token Response ..............................35\n   4.3. Resource Owner Password Credentials Grant .................37\n        4.3.1. Authorization Request and Response .................39\n        4.3.2. Access Token Request ...............................39\n        4.3.3. Access Token Response ..............................40\n   4.4. Client Credentials Grant ..................................40\n        4.4.1. Authorization Request and Response .................41\n        4.4.2. Access Token Request ...............................41\n        4.4.3. Access Token Response ..............................42\n   4.5. Extension Grants ..........................................42",
      "toc": true,
      "raw": true
    },
    {
      "indent": 3,
      "text": "5. Issuing an Access Token ........................................43\n   5.1. Successful Response .......................................43\n   5.2. Error Response ............................................45\n6. Refreshing an Access Token .....................................47\n7. Accessing Protected Resources ..................................48\n   7.1. Access Token Types ........................................49\n   7.2. Error Response ............................................49\n8. Extensibility ..................................................50\n   8.1. Defining Access Token Types ...............................50\n   8.2. Defining New Endpoint Parameters ..........................50\n   8.3. Defining New Authorization Grant Types ....................51\n   8.4. Defining New Authorization Endpoint Response Types ........51\n   8.5. Defining Additional Error Codes ...........................51\n9. Native Applications ............................................52\n10. Security Considerations .......................................53\n   10.1. Client Authentication ....................................53\n   10.2. Client Impersonation .....................................54\n   10.3. Access Tokens ............................................55\n   10.4. Refresh Tokens ...........................................55\n   10.5. Authorization Codes ......................................56\n   10.6. Authorization Code Redirection URI Manipulation ..........56\n   10.7. Resource Owner Password Credentials ......................57\n   10.8. Request Confidentiality ..................................58\n   10.9. Ensuring Endpoint Authenticity ...........................58\n   10.10. Credentials-Guessing Attacks ............................58\n   10.11. Phishing Attacks ........................................58\n   10.12. Cross-Site Request Forgery ..............................59\n   10.13. Clickjacking ............................................60\n   10.14. Code Injection and Input Validation .....................60\n   10.15. Open Redirectors ........................................60\n   10.16. Misuse of Access Token to Impersonate Resource\n          Owner in Implicit Flow ..................................61\n11. IANA Considerations ...........................................62\n   11.1. OAuth Access Token Types Registry ........................62\n        11.1.1. Registration Template .............................62\n   11.2. OAuth Parameters Registry ................................63\n        11.2.1. Registration Template .............................63\n        11.2.2. Initial Registry Contents .........................64\n   11.3. OAuth Authorization Endpoint Response Types Registry .....66\n        11.3.1. Registration Template .............................66\n        11.3.2. Initial Registry Contents .........................67\n   11.4. OAuth Extensions Error Registry ..........................67\n        11.4.1. Registration Template .............................68\n12. References ....................................................68\n   12.1. Normative References .....................................68\n   12.2. Informative References ...................................70",
      "toc": true,
      "raw": true
    },
    {
      "indent": 3,
      "text": "Appendix A. Augmented Backus-Naur Form (ABNF) Syntax ..............71\n  A.1.  \"client_id\" Syntax ........................................71\n  A.2.  \"client_secret\" Syntax ....................................71\n  A.3.  \"response_type\" Syntax ....................................71\n  A.4.  \"scope\" Syntax ............................................72\n  A.5.  \"state\" Syntax ............................................72\n  A.6.  \"redirect_uri\" Syntax .....................................72\n  A.7.  \"error\" Syntax ............................................72\n  A.8.  \"error_description\" Syntax ................................72\n  A.9.  \"error_uri\" Syntax ........................................72\n  A.10. \"grant_type\" Syntax .......................................73\n  A.11. \"code\" Syntax .............................................73\n  A.12. \"access_token\" Syntax .....................................73\n  A.13. \"token_type\" Syntax .......................................73\n  A.14. \"expires_in\" Syntax .......................................73\n  A.15. \"username\" Syntax .........................................73\n  A.16. \"password\" Syntax .........................................73\n  A.17. \"refresh_token\" Syntax ....................................74\n  A.18. Endpoint Parameter Syntax .................................74\nAppendix B. Use of application/x-www-form-urlencoded Media Type ...74\nAppendix C. Acknowledgements ......................................75",
      "toc": true,
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "In the traditional client-server authentication model, the client requests an access-restricted resource (protected resource) on the server by authenticating with the server using the resource owner's credentials. In order to provide third-party applications access to restricted resources, the resource owner shares its credentials with the third party. This creates several problems and limitations:",
      "ja": "従来のクライアントサーバー認証モデルでは、クライアントはリソース所有者の資格情報を使用してサーバーで認証することにより、サーバー上のアクセス制限されたリソース（保護されたリソース）を要求します。サードパーティアプリケーションが制限されたリソースにアクセスできるようにするために、リソース所有者はその資格情報をサードパーティと共有します。これにより、いくつかの問題と制限が生じます。"
    },
    {
      "indent": 3,
      "text": "o Third-party applications are required to store the resource owner's credentials for future use, typically a password in clear-text.",
      "ja": "o 将来の使用のためにリソース所有者の資格情報（通常はクリアテキストのパスワード）を格納するために、サードパーティアプリケーションが必要です。"
    },
    {
      "indent": 3,
      "text": "o Servers are required to support password authentication, despite the security weaknesses inherent in passwords.",
      "ja": "o パスワードに固有のセキュリティ上の弱点があるにもかかわらず、サーバーはパスワード認証をサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "o Third-party applications gain overly broad access to the resource owner's protected resources, leaving resource owners without any ability to restrict duration or access to a limited subset of resources.",
      "ja": "o サードパーティのアプリケーションは、リソース所有者の保護されたリソースへの過度に広いアクセスを取得します。そのため、リソース所有者は、期間を制限したり、リソースの限られたサブセットへのアクセスを制限したりできません。"
    },
    {
      "indent": 3,
      "text": "o Resource owners cannot revoke access to an individual third party without revoking access to all third parties, and must do so by changing the third party's password.",
      "ja": "o リソース所有者は、すべてのサードパーティへのアクセスを取り消さない限り、個々のサードパーティへのアクセスを取り消すことはできません。取り消すには、サードパーティのパスワードを変更する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Compromise of any third-party application results in compromise of the end-user's password and all of the data protected by that password.",
      "ja": "o サードパーティのアプリケーションが侵害されると、エンドユーザーのパスワードとそのパスワードによって保護されているすべてのデータが侵害されます。"
    },
    {
      "indent": 3,
      "text": "OAuth addresses these issues by introducing an authorization layer and separating the role of the client from that of the resource owner. In OAuth, the client requests access to resources controlled by the resource owner and hosted by the resource server, and is issued a different set of credentials than those of the resource owner.",
      "ja": "OAuthは、認証レイヤーを導入し、クライアントの役割をリソース所有者の役割から分離することにより、これらの問題に対処します。 OAuthでは、クライアントは、リソース所有者によって制御され、リソースサーバーによってホストされるリソースへのアクセスを要求し、リソース所有者とは異なる一連の資格情報を発行します。"
    },
    {
      "indent": 3,
      "text": "Instead of using the resource owner's credentials to access protected resources, the client obtains an access token -- a string denoting a specific scope, lifetime, and other access attributes. Access tokens are issued to third-party clients by an authorization server with the approval of the resource owner. The client uses the access token to access the protected resources hosted by the resource server.",
      "ja": "リソース所有者の資格情報を使用して保護されたリソースにアクセスする代わりに、クライアントはアクセストークン（特定のスコープ、ライフタイム、その他のアクセス属性を示す文字列）を取得します。アクセストークンは、リソース所有者の認可を得て、認可サーバーによってサードパーティのクライアントに発行されます。クライアントは、アクセストークンを使用して、リソースサーバーによってホストされている保護されたリソースにアクセスします。"
    },
    {
      "indent": 3,
      "text": "For example, an end-user (resource owner) can grant a printing service (client) access to her protected photos stored at a photo-sharing service (resource server), without sharing her username and password with the printing service. Instead, she authenticates directly with a server trusted by the photo-sharing service (authorization server), which issues the printing service delegation-specific credentials (access token).",
      "ja": "たとえば、エンドユーザー（リソースの所有者）は、ユーザー名とパスワードを印刷サービスと共有せずに、写真共有サービス（リソースサーバー）に保存されている保護された写真へのアクセスを印刷サービス（クライアント）に許可できます。代わりに、写真共有サービスによって信頼されたサーバー（認可サーバー）で直接認証します。このサーバーは、印刷サービスの委任固有の資格情報（アクセストークン）を発行します。"
    },
    {
      "indent": 3,
      "text": "This specification is designed for use with HTTP ([RFC2616]). The use of OAuth over any protocol other than HTTP is out of scope.",
      "ja": "この仕様は、HTTP（[RFC2616]）で使用するように設計されています。 HTTP以外のプロトコルでのOAuthの使用は範囲外です。"
    },
    {
      "indent": 3,
      "text": "The OAuth 1.0 protocol ([RFC5849]), published as an informational document, was the result of a small ad hoc community effort. This Standards Track specification builds on the OAuth 1.0 deployment experience, as well as additional use cases and extensibility requirements gathered from the wider IETF community. The OAuth 2.0 protocol is not backward compatible with OAuth 1.0. The two versions may co-exist on the network, and implementations may choose to support both. However, it is the intention of this specification that new implementations support OAuth 2.0 as specified in this document and that OAuth 1.0 is used only to support existing deployments. The OAuth 2.0 protocol shares very few implementation details with the OAuth 1.0 protocol. Implementers familiar with OAuth 1.0 should approach this document without any assumptions as to its structure and details.",
      "ja": "情報ドキュメントとして公開されたOAuth 1.0プロトコル（[RFC5849]）は、小さなアドホックコミュニティの努力の結果です。このStandards Track仕様は、OAuth 1.0の導入経験に基づいて構築されているだけでなく、幅広いIETFコミュニティから収集された追加のユースケースや拡張性の要件にも基づいています。 OAuth 2.0プロトコルは、OAuth 1.0との下位互換性がありません。 2つのバージョンはネットワーク上で共存でき、実装は両方をサポートすることを選択できます。ただし、この仕様では、新しい実装がこのドキュメントで指定されているOAuth 2.0をサポートし、OAuth 1.0が既存のデプロイメントをサポートするためにのみ使用されることが意図されています。 OAuth 2.0プロトコルは、OAuth 1.0プロトコルと実装の詳細をほとんど共有していません。 OAuth 1.0に精通している実装者は、その構造や詳細について何も想定せずに、このドキュメントに取り組む必要があります。"
    },
    {
      "indent": 0,
      "text": "1.1. Roles",
      "section_title": true,
      "ja": "1.1. 役割"
    },
    {
      "indent": 3,
      "text": "OAuth defines four roles:",
      "ja": "OAuthは4つの役割を定義します。"
    },
    {
      "indent": 3,
      "text": "resource owner An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.",
      "ja": "リソース所有者：保護されたリソースへのアクセスを許可できるエンティティ。リソース所有者が個人である場合、それはエンドユーザーと呼ばれます。"
    },
    {
      "indent": 3,
      "text": "resource server The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.",
      "ja": "リソースサーバー：保護されたリソースをホストし、アクセストークンを使用して保護されたリソース要求を受け入れ、応答できるサーバー。"
    },
    {
      "indent": 3,
      "text": "client An application making protected resource requests on behalf of the resource owner and with its authorization. The term \"client\" does not imply any particular implementation characteristics (e.g., whether the application executes on a server, a desktop, or other devices).",
      "ja": "クライアントリソース：所有者に代わって、その許可を得て、保護されたリソース要求を行うアプリケーション。 「クライアント」という用語は、特定の実装特性（アプリケーションがサーバー、デスクトップ、またはその他のデバイスで実行されるかどうかなど）を意味するものではありません。"
    },
    {
      "indent": 3,
      "text": "authorization server The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.",
      "ja": "許可サーバー：リソース所有者を正常に認証して許可を取得した後、クライアントにアクセストークンを発行するサーバー。"
    },
    {
      "indent": 3,
      "text": "The interaction between the authorization server and resource server is beyond the scope of this specification. The authorization server may be the same server as the resource server or a separate entity. A single authorization server may issue access tokens accepted by multiple resource servers.",
      "ja": "認可サーバーとリソースサーバー間の相互作用は、この仕様の範囲外です。認可サーバーは、リソースサーバーと同じサーバーでも、別のエンティティでもかまいません。単一の認可サーバーが、複数のリソースサーバーによって受け入れられたアクセストークンを発行する場合があります。"
    },
    {
      "indent": 0,
      "text": "1.2. Protocol Flow",
      "section_title": true,
      "ja": "1.2. プロトコルフロー"
    },
    {
      "indent": 5,
      "text": "+--------+                               +---------------+\n|        |--(A)- Authorization Request ->|   Resource    |\n|        |                               |     Owner     |\n|        |<-(B)-- Authorization Grant ---|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(C)-- Authorization Grant -->| Authorization |\n| Client |                               |     Server    |\n|        |<-(D)----- Access Token -------|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(E)----- Access Token ------>|    Resource   |\n|        |                               |     Server    |\n|        |<-(F)--- Protected Resource ---|               |\n+--------+                               +---------------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: Abstract Protocol Flow",
      "ja": "図1：プロトコルフローの抽象図"
    },
    {
      "indent": 3,
      "text": "The abstract OAuth 2.0 flow illustrated in Figure 1 describes the interaction between the four roles and includes the following steps:",
      "ja": "図1に示されている抽象的なOAuth 2.0フローは、4つの役割間の相互作用を説明しており、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The client requests authorization from the resource owner. The authorization request can be made directly to the resource owner (as shown), or preferably indirectly via the authorization server as an intermediary.",
      "ja": "（A）クライアントはリソース所有者に認可を要求します。許可要求は、リソース所有者に直接（図に示すように）行うことができますが、仲介サーバーとして許可サーバーを介して間接的に行うこともできます。"
    },
    {
      "indent": 3,
      "text": "(B) The client receives an authorization grant, which is a credential representing the resource owner's authorization, expressed using one of four grant types defined in this specification or using an extension grant type. The authorization grant type depends on the method used by the client to request authorization and the types supported by the authorization server.",
      "ja": "（B）クライアントは、この仕様で定義されている4つの許可タイプの1つを使用して、または拡張許可タイプを使用して表される、リソース所有者の許可を表す資格情報である許可許可を受け取ります。許可付与タイプは、クライアントが許可を要求するために使用する方法と、許可サーバーがサポートするタイプによって異なります。"
    },
    {
      "indent": 3,
      "text": "(C) The client requests an access token by authenticating with the authorization server and presenting the authorization grant.",
      "ja": "（C）クライアントは、許可サーバーで認証し、許可付与を提示することにより、アクセストークンを要求します。"
    },
    {
      "indent": 3,
      "text": "(D) The authorization server authenticates the client and validates the authorization grant, and if valid, issues an access token.",
      "ja": "（D）認可サーバーはクライアントを認証し、認可付与を検証し、有効な場合はアクセストークンを発行します。"
    },
    {
      "indent": 3,
      "text": "(E) The client requests the protected resource from the resource server and authenticates by presenting the access token.",
      "ja": "（E）クライアントは保護されたリソースをリソースサーバーに要求し、アクセストークンを提示して認証します。"
    },
    {
      "indent": 3,
      "text": "(F) The resource server validates the access token, and if valid, serves the request.",
      "ja": "（F）リソースサーバーはアクセストークンを検証し、有効な場合はリクエストを処理します。"
    },
    {
      "indent": 3,
      "text": "The preferred method for the client to obtain an authorization grant from the resource owner (depicted in steps (A) and (B)) is to use the authorization server as an intermediary, which is illustrated in Figure 3 in Section 4.1.",
      "ja": "クライアントがリソース所有者から許可付与を取得するための推奨される方法（ステップ（A）および（B）に示されています）は、許可サーバーを仲介として使用することです。これは、セクション4.1の図3に示されています。"
    },
    {
      "indent": 0,
      "text": "1.3. Authorization Grant",
      "section_title": true,
      "ja": "1.3. 認可付与"
    },
    {
      "indent": 3,
      "text": "An authorization grant is a credential representing the resource owner's authorization (to access its protected resources) used by the client to obtain an access token. This specification defines four grant types -- authorization code, implicit, resource owner password credentials, and client credentials -- as well as an extensibility mechanism for defining additional types.",
      "ja": "許可付与は、クライアントがアクセストークンを取得するために使用する（保護されたリソースにアクセスするための）リソース所有者の許可を表す資格情報です。この仕様では、認可コード、暗黙的なリソース所有者のパスワード資格情報、クライアント資格情報の4つの付与タイプと、追加のタイプを定義するための拡張メカニズムを定義しています。"
    },
    {
      "indent": 0,
      "text": "1.3.1. Authorization Code",
      "section_title": true,
      "ja": "1.3.1. 認証コード"
    },
    {
      "indent": 3,
      "text": "The authorization code is obtained by using an authorization server as an intermediary between the client and resource owner. Instead of requesting authorization directly from the resource owner, the client directs the resource owner to an authorization server (via its user-agent as defined in [RFC2616]), which in turn directs the resource owner back to the client with the authorization code.",
      "ja": "認可コードは、クライアントとリソース所有者の間の仲介として認可サーバーを使用することによって取得されます。リソース所有者に直接認可を要求する代わりに、クライアントはリソース所有者を（[RFC2616]で定義されているユーザーエージェントを介して）認可サーバーに誘導し、次にリソースコードを使用してクライアントにリソース所有者を戻します。"
    },
    {
      "indent": 3,
      "text": "Before directing the resource owner back to the client with the authorization code, the authorization server authenticates the resource owner and obtains authorization. Because the resource owner only authenticates with the authorization server, the resource owner's credentials are never shared with the client.",
      "ja": "リソース所有者を認証コードでクライアントに戻す前に、認証サーバーはリソース所有者を認証し、認証を取得します。リソース所有者は認証サーバーでのみ認証するため、リソース所有者の資格情報がクライアントと共有されることはありません。"
    },
    {
      "indent": 3,
      "text": "The authorization code provides a few important security benefits, such as the ability to authenticate the client, as well as the transmission of the access token directly to the client without passing it through the resource owner's user-agent and potentially exposing it to others, including the resource owner.",
      "ja": "認証コードは、クライアントを認証する機能や、リソース所有者のユーザーエージェントを介してアクセストークンを渡さずに他のユーザーに公開することなくクライアントに直接アクセストークンを送信するなど、いくつかの重要なセキュリティ上の利点を提供します。リソース所有者。"
    },
    {
      "indent": 0,
      "text": "1.3.2. Implicit",
      "section_title": true,
      "ja": "1.3.2. 暗黙"
    },
    {
      "indent": 0,
      "text": " The implicit grant is a simplified authorization code flow optimized for clients implemented in a browser using a scripting language such as JavaScript. In the implicit flow, instead of issuing the client an authorization code, the client is issued an access token directly (as the result of the resource owner authorization). The grant type is implicit, as no intermediate credentials (such as an authorization code) are issued (and later used to obtain an access token).",
      "ja": "暗黙的な付与は、JavaScriptなどのスクリプト言語を使用してブラウザに実装されたクライアント用に最適化された、単純化された認証コードフローです。暗黙的なフローでは、クライアントに認証コードを発行する代わりに、クライアントに（リソース所有者の認証の結果として）アクセストークンが直接発行されます。中間の資格情報（認証コードなど）が発行されない（後でアクセストークンを取得するために使用される）ため、付与タイプは暗黙的です。"
    },
    {
      "indent": 3,
      "text": "When issuing an access token during the implicit grant flow, the authorization server does not authenticate the client. In some cases, the client identity can be verified via the redirection URI used to deliver the access token to the client. The access token may be exposed to the resource owner or other applications with access to the resource owner's user-agent.",
      "ja": "暗黙的な許可フロー中にアクセストークンを発行する場合、認可サーバーはクライアントを認証しません。場合によっては、クライアントIDは、アクセストークンをクライアントに配信するために使用されるリダイレクトURIを介して確認できます。アクセストークンは、リソース所有者またはリソース所有者のユーザーエージェントにアクセスできる他のアプリケーションに公開される可能性があります。"
    },
    {
      "indent": 3,
      "text": "Implicit grants improve the responsiveness and efficiency of some clients (such as a client implemented as an in-browser application), since it reduces the number of round trips required to obtain an access token. However, this convenience should be weighed against the security implications of using implicit grants, such as those described in Sections 10.3 and 10.16, especially when the authorization code grant type is available.",
      "ja": "暗黙的な付与により、一部のクライアント（ブラウザー内アプリケーションとして実装されたクライアントなど）の応答性と効率が向上します。これにより、アクセストークンを取得するために必要なラウンドトリップの数が減ります。ただし、この便利さは、セクション10.3および10.16で説明されているような暗黙の付与を使用することによるセキュリティへの影響と比較して考慮すべきです。"
    },
    {
      "indent": 0,
      "text": "1.3.3. Resource Owner Password Credentials",
      "section_title": true,
      "ja": "1.3.3. リソース所有者のパスワード資格情報"
    },
    {
      "indent": 3,
      "text": "The resource owner password credentials (i.e., username and password) can be used directly as an authorization grant to obtain an access token. The credentials should only be used when there is a high degree of trust between the resource owner and the client (e.g., the client is part of the device operating system or a highly privileged application), and when other authorization grant types are not available (such as an authorization code).",
      "ja": "リソース所有者のパスワード資格情報（つまり、ユーザー名とパスワード）を、認証トークンとして直接使用して、アクセストークンを取得できます。資格情報は、リソースの所有者とクライアントの間に高度な信頼がある場合（たとえば、クライアントがデバイスのオペレーティングシステムまたは高度な特権のあるアプリケーションの一部である場合）、および他の認可付与タイプが使用できない場合にのみ使用する必要があります（認証コードなど）。"
    },
    {
      "indent": 3,
      "text": "Even though this grant type requires direct client access to the resource owner credentials, the resource owner credentials are used for a single request and are exchanged for an access token. This grant type can eliminate the need for the client to store the resource owner credentials for future use, by exchanging the credentials with a long-lived access token or refresh token.",
      "ja": "この付与タイプでは、リソース所有者の資格情報への直接クライアントアクセスが必要ですが、リソース所有者の資格情報は単一の要求に使用され、アクセストークンと交換されます。この付与タイプでは、認証情報を長期間有効なアクセストークンまたは更新トークンと交換することにより、クライアントが将来の使用のためにリソース所有者の認証情報を保存する必要をなくすことができます。"
    },
    {
      "indent": 0,
      "text": "1.3.4. Client Credentials",
      "section_title": true,
      "ja": "1.3.4. クライアント資格情報"
    },
    {
      "indent": 3,
      "text": "The client credentials (or other forms of client authentication) can be used as an authorization grant when the authorization scope is limited to the protected resources under the control of the client, or to protected resources previously arranged with the authorization server. Client credentials are used as an authorization grant typically when the client is acting on its own behalf (the client is also the resource owner) or is requesting access to protected resources based on an authorization previously arranged with the authorization server.",
      "ja": "クライアントの資格情報（または他の形式のクライアント認証）は、認可スコープがクライアントの制御下の保護されたリソース、または以前に認可サーバーで調整された保護されたリソースに制限されている場合、認可付与として使用できます。クライアント資格情報は、通常、クライアントが自分自身に代わって動作している（クライアントがリソース所有者でもある）場合、または以前に認可サーバーで調整した認可に基づいて保護されたリソースへのアクセスを要求している場合に、認可付与として使用されます。"
    },
    {
      "indent": 0,
      "text": "1.4. Access Token",
      "section_title": true,
      "ja": "1.4. アクセストークン"
    },
    {
      "indent": 3,
      "text": "Access tokens are credentials used to access protected resources. An access token is a string representing an authorization issued to the client. The string is usually opaque to the client. Tokens represent specific scopes and durations of access, granted by the resource owner, and enforced by the resource server and authorization server.",
      "ja": "アクセストークンは、保護されたリソースへのアクセスに使用される資格情報です。アクセストークンは、クライアントに発行される認証を表す文字列です。文字列は通常、クライアントに対して不透明です。トークンは、リソース所有者によって付与され、リソースサーバーと認可サーバーによって適用される、特定のアクセス範囲とアクセス期間を表します。"
    },
    {
      "indent": 3,
      "text": "The token may denote an identifier used to retrieve the authorization information or may self-contain the authorization information in a verifiable manner (i.e., a token string consisting of some data and a signature). Additional authentication credentials, which are beyond the scope of this specification, may be required in order for the client to use a token.",
      "ja": "トークンは、認証情報を取得するために使用される識別子を示す場合と、検証可能な方法で認証情報を自己格納する場合があります（つまり、一部のデータと署名で構成されるトークン文字列）。この仕様の範囲を超える追加の認証資格情報は、クライアントがトークンを使用するために必要になる場合があります。"
    },
    {
      "indent": 3,
      "text": "The access token provides an abstraction layer, replacing different authorization constructs (e.g., username and password) with a single token understood by the resource server. This abstraction enables issuing access tokens more restrictive than the authorization grant used to obtain them, as well as removing the resource server's need to understand a wide range of authentication methods.",
      "ja": "アクセストークンは、抽象化レイヤーを提供し、さまざまな認証構成（ユーザー名とパスワードなど）を、リソースサーバーが理解できる単一のトークンに置き換えます。この抽象化により、アクセストークンの取得に使用される許可付与よりも制限の厳しいアクセストークンの発行が可能になるだけでなく、リソースサーバーが幅広い認証方法を理解する必要がなくなります。"
    },
    {
      "indent": 3,
      "text": "Access tokens can have different formats, structures, and methods of utilization (e.g., cryptographic properties) based on the resource server security requirements. Access token attributes and the methods used to access protected resources are beyond the scope of this specification and are defined by companion specifications such as [RFC6750].",
      "ja": "アクセストークンは、リソースサーバーのセキュリティ要件に基づいて、さまざまな形式、構造、および利用方法（暗号化プロパティなど）を持つことができます。保護されたリソースへのアクセスに使用されるアクセストークン属性とメソッドは、この仕様の範囲を超えており、[RFC6750]などの関連仕様によって定義されています。"
    },
    {
      "indent": 0,
      "text": "1.5. Refresh Token",
      "section_title": true,
      "ja": "1.5. トークン更新"
    },
    {
      "indent": 3,
      "text": "Refresh tokens are credentials used to obtain access tokens. Refresh tokens are issued to the client by the authorization server and are used to obtain a new access token when the current access token becomes invalid or expires, or to obtain additional access tokens with identical or narrower scope (access tokens may have a shorter lifetime and fewer permissions than authorized by the resource owner). Issuing a refresh token is optional at the discretion of the authorization server. If the authorization server issues a refresh token, it is included when issuing an access token (i.e., step (D) in Figure 1).",
      "ja": "更新トークンは、アクセストークンを取得するために使用される資格情報です。リフレッシュトークンは、認証サーバーによってクライアントに発行され、現在のアクセストークンが無効または期限切れになったときに新しいアクセストークンを取得するため、または同じまたはより狭いスコープを持つ追加のアクセストークンを取得するために使用されます（アクセストークンの有効期間は短く、リソース所有者によって認可されたものよりも少ない許可）。認可サーバーの裁量により、更新トークンの発行はオプションです。認可サーバーが更新トークンを発行する場合、それはアクセストークンを発行するときに含まれます（つまり、図1のステップ（D））。"
    },
    {
      "indent": 0,
      "text": " A refresh token is a string representing the authorization granted to the client by the resource owner. The string is usually opaque to the client. The token denotes an identifier used to retrieve the authorization information. Unlike access tokens, refresh tokens are intended for use only with authorization servers and are never sent to resource servers.",
      "ja": "更新トークンは、リソース所有者によってクライアントに付与された認可を表す文字列です。文字列は通常、クライアントに対して不透明です。トークンは、認証情報を取得するために使用される識別子を示します。アクセストークンとは異なり、更新トークンは認可サーバーでの使用のみを目的としており、リソースサーバーに送信されることはありません。"
    },
    {
      "indent": 2,
      "text": "+--------+                                           +---------------+\n|        |--(A)------- Authorization Grant --------->|               |\n|        |                                           |               |\n|        |<-(B)----------- Access Token -------------|               |\n|        |               & Refresh Token             |               |\n|        |                                           |               |\n|        |                            +----------+   |               |\n|        |--(C)---- Access Token ---->|          |   |               |\n|        |                            |          |   |               |\n|        |<-(D)- Protected Resource --| Resource |   | Authorization |\n| Client |                            |  Server  |   |     Server    |\n|        |--(E)---- Access Token ---->|          |   |               |\n|        |                            |          |   |               |\n|        |<-(F)- Invalid Token Error -|          |   |               |\n|        |                            +----------+   |               |\n|        |                                           |               |\n|        |--(G)----------- Refresh Token ----------->|               |\n|        |                                           |               |\n|        |<-(H)----------- Access Token -------------|               |\n+--------+           & Optional Refresh Token        +---------------+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 2: Refreshing an Expired Access Token",
      "ja": "図2：期限切れのアクセストークンの更新"
    },
    {
      "indent": 3,
      "text": "The flow illustrated in Figure 2 includes the following steps:",
      "ja": "図2に示されているフローには、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The client requests an access token by authenticating with the authorization server and presenting an authorization grant.",
      "ja": "（A）クライアントは、許可サーバーで認証し、許可付与を提示することにより、アクセストークンを要求します。"
    },
    {
      "indent": 3,
      "text": "(B) The authorization server authenticates the client and validates the authorization grant, and if valid, issues an access token and a refresh token.",
      "ja": "（B）認可サーバーはクライアントを認証し、認可付与を検証し、有効な場合は、アクセストークンと更新トークンを発行します。"
    },
    {
      "indent": 3,
      "text": "(C) The client makes a protected resource request to the resource server by presenting the access token.",
      "ja": "（C）クライアントは、アクセストークンを提示することにより、リソースサーバーに対して保護されたリソース要求を行います。"
    },
    {
      "indent": 3,
      "text": "(D) The resource server validates the access token, and if valid, serves the request.",
      "ja": "（D）リソースサーバーはアクセストークンを検証し、有効な場合はリクエストを処理します。"
    },
    {
      "indent": 3,
      "text": "(E) Steps (C) and (D) repeat until the access token expires. If the client knows the access token expired, it skips to step (G); otherwise, it makes another protected resource request.",
      "ja": "（E）ステップ（C）および（D）は、アクセストークンの有効期限が切れるまで繰り返されます。クライアントは、アクセストークンが期限切れであることを知っている場合、ステップ（G）にスキップします。それ以外の場合は、別の保護されたリソース要求を行います。"
    },
    {
      "indent": 3,
      "text": "(F) Since the access token is invalid, the resource server returns an invalid token error.",
      "ja": "（F）アクセストークンが無効であるため、リソースサーバーは無効なトークンエラーを返します。"
    },
    {
      "indent": 3,
      "text": "(G) The client requests a new access token by authenticating with the authorization server and presenting the refresh token. The client authentication requirements are based on the client type and on the authorization server policies.",
      "ja": "（G）クライアントは、認可サーバーで認証し、更新トークンを提示することにより、新しいアクセストークンを要求します。クライアント認証の要件は、クライアントのタイプと許可サーバーのポリシーに基づいています。"
    },
    {
      "indent": 3,
      "text": "(H) The authorization server authenticates the client and validates the refresh token, and if valid, issues a new access token (and, optionally, a new refresh token).",
      "ja": "（H）認可サーバーはクライアントを認証し、更新トークンを検証し、有効な場合は、新しいアクセストークン（およびオプションで新しい更新トークン）を発行します。"
    },
    {
      "indent": 3,
      "text": "Steps (C), (D), (E), and (F) are outside the scope of this specification, as described in Section 7.",
      "ja": "ステップ（C）、（D）、（E）、および（F）は、セクション7で説明されているように、この仕様の範囲外です。"
    },
    {
      "indent": 0,
      "text": "1.6. TLS Version",
      "section_title": true,
      "ja": "1.6. TLSバージョン"
    },
    {
      "indent": 3,
      "text": "Whenever Transport Layer Security (TLS) is used by this specification, the appropriate version (or versions) of TLS will vary over time, based on the widespread deployment and known security vulnerabilities. At the time of this writing, TLS version 1.2 [RFC5246] is the most recent version, but has a very limited deployment base and might not be readily available for implementation. TLS version 1.0 [RFC2246] is the most widely deployed version and will provide the broadest interoperability.",
      "ja": "この仕様でトランスポート層セキュリティ（TLS）が使用されている場合、TLSの適切なバージョン（複数の場合もある）は、広範囲にわたる展開と既知のセキュリティの脆弱性に基づいて、時間とともに変化します。これを書いている時点では、TLSバージョン1.2 [RFC5246]が最新バージョンですが、デプロイメントベースが非常に限定されており、実装にすぐに利用できない場合があります。 TLSバージョン1.0 [RFC2246]は、最も広く導入されているバージョンであり、幅広い相互運用性を提供します。"
    },
    {
      "indent": 3,
      "text": "Implementations MAY also support additional transport-layer security mechanisms that meet their security requirements.",
      "ja": "実装は、セキュリティ要件を満たす追加のトランスポート層セキュリティメカニズムもサポートする場合があります。"
    },
    {
      "indent": 0,
      "text": "1.7. HTTP Redirections",
      "section_title": true,
      "ja": "1.7. HTTPリダイレクト"
    },
    {
      "indent": 3,
      "text": "This specification makes extensive use of HTTP redirections, in which the client or the authorization server directs the resource owner's user-agent to another destination. While the examples in this specification show the use of the HTTP 302 status code, any other method available via the user-agent to accomplish this redirection is allowed and is considered to be an implementation detail.",
      "ja": "この仕様では、クライアントまたは許可サーバーがリソース所有者のユーザーエージェントを別の宛先に転送するHTTPリダイレクトを広範囲に使用しています。この仕様の例ではHTTP 302ステータスコードの使用を示していますが、このリダイレクトを実行するためにユーザーエージェントを介して利用できる他の方法は許可されており、実装の詳細と見なされます。"
    },
    {
      "indent": 0,
      "text": "1.8. Interoperability",
      "section_title": true,
      "ja": "1.8. 相互運用性"
    },
    {
      "indent": 3,
      "text": "OAuth 2.0 provides a rich authorization framework with well-defined security properties. However, as a rich and highly extensible framework with many optional components, on its own, this specification is likely to produce a wide range of non-interoperable implementations.",
      "ja": "OAuth 2.0は、明確に定義されたセキュリティプロパティを持つ豊富な認可フレームワークを提供します。ただし、この仕様は、多数のオプションコンポーネントを備えた豊富で拡張性の高いフレームワークとして、それ自体で、相互運用できないさまざまな実装を生成する可能性があります。"
    },
    {
      "indent": 0,
      "text": " In addition, this specification leaves a few required components partially or fully undefined (e.g., client registration, authorization server capabilities, endpoint discovery). Without these components, clients must be manually and specifically configured against a specific authorization server and resource server in order to interoperate.",
      "ja": "さらに、この仕様では、一部または完全に未定義の必要なコンポーネントがいくつか残されています（クライアントの登録、認可サーバーの機能、エンドポイントの検出など）。これらのコンポーネントがない場合、相互運用するには、クライアントを特定の認可サーバーとリソースサーバーに対して手動で具体的に構成する必要があります。"
    },
    {
      "indent": 3,
      "text": "This framework was designed with the clear expectation that future work will define prescriptive profiles and extensions necessary to achieve full web-scale interoperability.",
      "ja": "このフレームワークは、将来の作業で完全なWebスケールの相互運用性を実現するために必要な規範的なプロファイルと拡張機能を定義することを明確に期待して設計されました。"
    },
    {
      "indent": 0,
      "text": "1.9. Notational Conventions",
      "section_title": true,
      "ja": "1.9. 表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in [RFC2119].",
      "ja": "この仕様のキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This specification uses the Augmented Backus-Naur Form (ABNF) notation of [RFC5234]. Additionally, the rule URI-reference is included from \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986].",
      "ja": "この仕様では、[RFC5234]の拡張バッカスナウアフォーム（ABNF）表記を使用しています。さらに、ルールURI参照は「Uniform Resource Identifier（URI）：Generic Syntax」[RFC3986]に含まれています。"
    },
    {
      "indent": 3,
      "text": "Certain security-related terms are to be understood in the sense defined in [RFC4949]. These terms include, but are not limited to, \"attack\", \"authentication\", \"authorization\", \"certificate\", \"confidentiality\", \"credential\", \"encryption\", \"identity\", \"sign\", \"signature\", \"trust\", \"validate\", and \"verify\".",
      "ja": "特定のセキュリティ関連の用語は、[RFC4949]で定義されている意味で理解されるべきです。これらの用語には、「攻撃」、「認証」、「認可」、「証明書」、「機密性」、「資格情報」、「暗号化」、「識別」、「署名」、「署名」が含まれますが、これらに限定されません。 「信頼」、「検証」、および「検証」。"
    },
    {
      "indent": 3,
      "text": "Unless otherwise noted, all the protocol parameter names and values are case sensitive.",
      "ja": "特に明記しない限り、すべてのプロトコルパラメータの名前と値は大文字と小文字が区別されます。"
    },
    {
      "indent": 0,
      "text": "2. Client Registration",
      "section_title": true,
      "ja": "2. クライアント登録"
    },
    {
      "indent": 3,
      "text": "Before initiating the protocol, the client registers with the authorization server. The means through which the client registers with the authorization server are beyond the scope of this specification but typically involve end-user interaction with an HTML registration form.",
      "ja": "プロトコルを開始する前に、クライアントは許可サーバーに登録します。クライアントが認可サーバーに登録する方法はこの仕様の範囲を超えていますが、通常、エンドユーザーによるHTML登録フォームとの対話が含まれます。"
    },
    {
      "indent": 3,
      "text": "Client registration does not require a direct interaction between the client and the authorization server. When supported by the authorization server, registration can rely on other means for establishing trust and obtaining the required client properties (e.g., redirection URI, client type). For example, registration can be accomplished using a self-issued or third-party-issued assertion, or by the authorization server performing client discovery using a trusted channel.",
      "ja": "クライアントの登録では、クライアントと許可サーバー間の直接の対話は必要ありません。認可サーバーでサポートされている場合、登録は、信頼を確立し、必要なクライアントプロパティ（リダイレクトURI、クライアントタイプなど）を取得するための他の手段に依存できます。たとえば、登録は、自己発行またはサードパーティが発行したアサーションを使用して、または認可サーバーがトラステッドチャネルを使用してクライアント検出を実行することによって実行できます。"
    },
    {
      "indent": 3,
      "text": "When registering a client, the client developer SHALL:",
      "ja": "クライアントを登録するとき、クライアント開発者は以下を行う必要があります。"
    },
    {
      "indent": 3,
      "text": "o specify the client type as described in Section 2.1,",
      "ja": "o セクション2.1で説明されているようにクライアントタイプを指定します、"
    },
    {
      "indent": 3,
      "text": "o provide its client redirection URIs as described in Section 3.1.2, and",
      "ja": "o セクション3.1.2で説明されているように、クライアントリダイレクトURIを提供します。"
    },
    {
      "indent": 3,
      "text": "o include any other information required by the authorization server (e.g., application name, website, description, logo image, the acceptance of legal terms).",
      "ja": "o 認可サーバーに必要なその他の情報（アプリケーション名、ウェブサイト、説明、ロゴ画像、法的条件の承諾など）を含めます。"
    },
    {
      "indent": 0,
      "text": "2.1. Client Types",
      "section_title": true,
      "ja": "2.1. クライアントの種類"
    },
    {
      "indent": 3,
      "text": "OAuth defines two client types, based on their ability to authenticate securely with the authorization server (i.e., ability to maintain the confidentiality of their client credentials):",
      "ja": "OAuthは、認可サーバーで安全に認証する機能（クライアントの資格情報の機密性を維持する機能）に基づいて、2つのクライアントタイプを定義します。"
    },
    {
      "indent": 3,
      "text": "confidential Clients capable of maintaining the confidentiality of their credentials (e.g., client implemented on a secure server with restricted access to the client credentials), or capable of secure client authentication using other means.",
      "ja": "confidential：資格情報の機密性を維持できるクライアント（クライアントの資格情報へのアクセスが制限された安全なサーバーに実装されたクライアントなど）、または他の手段を使用した安全なクライアント認証。"
    },
    {
      "indent": 3,
      "text": "public Clients incapable of maintaining the confidentiality of their credentials (e.g., clients executing on the device used by the resource owner, such as an installed native application or a web browser-based application), and incapable of secure client authentication via any other means.",
      "ja": "public : 資格情報の機密性を維持できないパブリッククライアント（たとえば、インストールされているネイティブアプリケーションやWebブラウザーベースのアプリケーションなど、リソース所有者が使用するデバイスで実行されるクライアント）と、他の手段による安全なクライアント認証ができないクライアント。"
    },
    {
      "indent": 3,
      "text": "The client type designation is based on the authorization server's definition of secure authentication and its acceptable exposure levels of client credentials. The authorization server SHOULD NOT make assumptions about the client type.",
      "ja": "クライアントタイプの指定は、認証サーバーの安全な認証の定義と、クライアント資格情報の許容される公開レベルに基づいています。認可サーバーは、クライアントのタイプについて仮定すべきではありません。"
    },
    {
      "indent": 3,
      "text": "A client may be implemented as a distributed set of components, each with a different client type and security context (e.g., a distributed client with both a confidential server-based component and a public browser-based component). If the authorization server does not provide support for such clients or does not provide guidance with regard to their registration, the client SHOULD register each component as a separate client.",
      "ja": "クライアントは、それぞれが異なるクライアントタイプとセキュリティコンテキストを持つ分散コンポーネントセットとして実装できます（たとえば、機密のサーバーベースのコンポーネントとパブリックブラウザベースのコンポーネントの両方を持つ分散クライアント）。認可サーバーがそのようなクライアントのサポートを提供しない場合、またはそれらの登録に関するガイダンスを提供しない場合、クライアントは各コンポーネントを個別のクライアントとして登録する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "This specification has been designed around the following client profiles:",
      "ja": "この仕様は、次のクライアントプロファイルを中心に設計されています。"
    },
    {
      "indent": 3,
      "text": "web application A web application is a confidential client running on a web server. Resource owners access the client via an HTML user interface rendered in a user-agent on the device used by the resource owner. The client credentials as well as any access token issued to the client are stored on the web server and are not exposed to or accessible by the resource owner.",
      "ja": "Webアプリケーション：Webアプリケーションは、Webサーバーで実行される機密クライアントです。リソース所有者は、リソース所有者が使用するデバイスのユーザーエージェントにレンダリングされたHTMLユーザーインターフェイスを介してクライアントにアクセスします。クライアントの資格情報とクライアントに発行されたすべてのアクセストークンはWebサーバーに保存され、リソースの所有者には公開されず、アクセスもできません。"
    },
    {
      "indent": 3,
      "text": "user-agent-based application A user-agent-based application is a public client in which the client code is downloaded from a web server and executes within a user-agent (e.g., web browser) on the device used by the resource owner. Protocol data and credentials are easily accessible (and often visible) to the resource owner. Since such applications reside within the user-agent, they can make seamless use of the user-agent capabilities when requesting authorization.",
      "ja": "ユーザーエージェントベースのアプリケーション：ユーザーエージェントベースのアプリケーションは、クライアントコードがWebサーバーからダウンロードされ、リソース所有者が使用するデバイスのユーザーエージェント（Webブラウザーなど）内で実行されるパブリッククライアントです。プロトコルデータと資格情報は、リソースの所有者が簡単にアクセスできます（多くの場合、表示されます）。このようなアプリケーションはユーザーエージェント内に存在するため、認可を要求するときにユーザーエージェント機能をシームレスに使用できます。"
    },
    {
      "indent": 3,
      "text": "native application A native application is a public client installed and executed on the device used by the resource owner. Protocol data and credentials are accessible to the resource owner. It is assumed that any client authentication credentials included in the application can be extracted. On the other hand, dynamically issued credentials such as access tokens or refresh tokens can receive an acceptable level of protection. At a minimum, these credentials are protected from hostile servers with which the application may interact. On some platforms, these credentials might be protected from other applications residing on the same device.",
      "ja": "ネイティブアプリケーション：ネイティブアプリケーションは、リソース所有者が使用するデバイスにインストールおよび実行されるパブリッククライアントです。リソースの所有者はプロトコルデータと資格情報にアクセスできます。アプリケーションに含まれるすべてのクライアント認証資格情報を抽出できることを前提としています。一方、アクセストークンや更新トークンなどの動的に発行される資格情報は、許容レベルの保護を受けることができます。少なくとも、これらの資格情報は、アプリケーションが相互作用する可能性のある悪意のあるサーバーから保護されます。一部のプラットフォームでは、これらの資格情報が同じデバイス上にある他のアプリケーションから保護されている場合があります。"
    },
    {
      "indent": 0,
      "text": "2.2. Client Identifier",
      "section_title": true,
      "ja": "2.2. クライアント識別"
    },
    {
      "indent": 3,
      "text": "The authorization server issues the registered client a client identifier -- a unique string representing the registration information provided by the client. The client identifier is not a secret; it is exposed to the resource owner and MUST NOT be used alone for client authentication. The client identifier is unique to the authorization server.",
      "ja": "認可サーバーは、登録されたクライアントにクライアント識別子（クライアントが提供する登録情報を表す一意の文字列）を発行します。クライアント識別子は秘密ではありません。これはリソース所有者に公開されており、クライアント認証に単独で使用してはなりません。クライアントIDは、許可サーバーに固有です。"
    },
    {
      "indent": 3,
      "text": "The client identifier string size is left undefined by this specification. The client should avoid making assumptions about the identifier size. The authorization server SHOULD document the size of any identifier it issues.",
      "ja": "クライアント識別子の文字列サイズは、この仕様では未定義のままです。クライアントは、識別子のサイズについての想定を避ける必要があります。認可サーバーは、発行する識別子のサイズを文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "2.3. Client Authentication",
      "section_title": true,
      "ja": "2.3. クライアント認証"
    },
    {
      "indent": 3,
      "text": "If the client type is confidential, the client and authorization server establish a client authentication method suitable for the security requirements of the authorization server. The authorization server MAY accept any form of client authentication meeting its security requirements.",
      "ja": "クライアントの種類が機密である場合、クライアントと認可サーバーは、認可サーバーのセキュリティ要件に適したクライアント認証方法を確立します。認可サーバーは、セキュリティ要件を満たすあらゆる形式のクライアント認証を受け入れることができます。"
    },
    {
      "indent": 3,
      "text": "Confidential clients are typically issued (or establish) a set of client credentials used for authenticating with the authorization server (e.g., password, public/private key pair).",
      "ja": "機密クライアントは通常、認可サーバーでの認証に使用されるクライアント資格情報のセット（パスワード、公開/秘密キーのペアなど）を発行（または確立）します。"
    },
    {
      "indent": 3,
      "text": "The authorization server MAY establish a client authentication method with public clients. However, the authorization server MUST NOT rely on public client authentication for the purpose of identifying the client.",
      "ja": "認可サーバーは、公開クライアントとのクライアント認証方法を確立してもよい（MAY）。ただし、認可サーバーは、クライアントを識別する目的でパブリッククライアント認証に依存してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "The client MUST NOT use more than one authentication method in each request.",
      "ja": "クライアントは、各リクエストで複数の認証方法を使用してはなりません（MUST NOT）。"
    },
    {
      "indent": 0,
      "text": "2.3.1. Client Password",
      "section_title": true,
      "ja": "2.3.1. クライアントパスワード"
    },
    {
      "indent": 3,
      "text": "Clients in possession of a client password MAY use the HTTP Basic authentication scheme as defined in [RFC2617] to authenticate with the authorization server. The client identifier is encoded using the \"application/x-www-form-urlencoded\" encoding algorithm per Appendix B, and the encoded value is used as the username; the client password is encoded using the same algorithm and used as the password. The authorization server MUST support the HTTP Basic authentication scheme for authenticating clients that were issued a client password.",
      "ja": "クライアントパスワードを所持しているクライアントは、[RFC2617]で定義されているHTTP基本認証スキームを使用して、認証サーバーで認証することができます。クライアント識別子は、付録Bの「application/x-www-form-urlencoded」エンコーディングアルゴリズムを使用してエンコードされ、エンコードされた値がユーザー名として使用されます。クライアントのパスワードは同じアルゴリズムを使用してエンコードされ、パスワードとして使用されます。認可サーバーは、クライアントパスワードが発行されたクライアントを認証するためのHTTP基本認証スキームをサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "For example (with extra line breaks for display purposes only):",
      "ja": "例（表示目的でのみ追加の改行を使用）："
    },
    {
      "indent": 5,
      "text": "Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Alternatively, the authorization server MAY support including the client credentials in the request-body using the following parameters:",
      "ja": "あるいは、次のパラメーターを使用して、リクエストサーバーにクライアント認証情報を含めることで、認証サーバーがサポートする場合があります。"
    },
    {
      "indent": 3,
      "text": "client_id REQUIRED. The client identifier issued to the client during the registration process described by Section 2.2.",
      "ja": "client_idは必須です。セクション2.2で説明されている登録プロセス中にクライアントに発行されたクライアント識別子。"
    },
    {
      "indent": 3,
      "text": "client_secret REQUIRED. The client secret. The client MAY omit the parameter if the client secret is an empty string.",
      "ja": "client_secretは必須です。クライアントシークレット。クライアントシークレットが空の文字列の場合、クライアントはパラメーターを省略できます。"
    },
    {
      "indent": 3,
      "text": "Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes). The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.",
      "ja": "2つのパラメータを使用してリクエスト本文にクライアント認証情報を含めることは推奨されておらず、HTTP基本認証スキーム（または他のパスワードベースのHTTP認証スキーム）を直接利用できないクライアントに限定する必要があります。パラメータはリクエストボディでのみ送信でき、リクエストURIに含めることはできません。"
    },
    {
      "indent": 3,
      "text": "For example, a request to refresh an access token (Section 6) using the body parameters (with extra line breaks for display purposes only):",
      "ja": "たとえば、ボディパラメータを使用してアクセストークンを更新するリクエスト（セクション6）（表示目的でのみ追加の改行を使用）："
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA\n&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MUST require the use of TLS as described in Section 1.6 when sending requests using password authentication.",
      "ja": "認可サーバーは、パスワード認証を使用してリクエストを送信するときに、セクション1.6で説明されているTLSの使用を要求する必要があります。"
    },
    {
      "indent": 3,
      "text": "Since this client authentication method involves a password, the authorization server MUST protect any endpoint utilizing it against brute force attacks.",
      "ja": "このクライアント認証方法にはパスワードが含まれるため、認可サーバーは、それを利用するすべてのエンドポイントをブルートフォース攻撃から保護する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.3.2. Other Authentication Methods",
      "section_title": true,
      "ja": "2.3.2. その他の認証方法"
    },
    {
      "indent": 3,
      "text": "The authorization server MAY support any suitable HTTP authentication scheme matching its security requirements. When using other authentication methods, the authorization server MUST define a mapping between the client identifier (registration record) and authentication scheme.",
      "ja": "認可サーバーは、セキュリティ要件に一致する適切なHTTP認証スキームをサポートする場合があります。他の認証方法を使用する場合、認可サーバーは、クライアント識別子（登録レコード）と認証スキームの間のマッピングを定義する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.4. Unregistered Clients",
      "section_title": true,
      "ja": "2.4. 未登録のクライアント"
    },
    {
      "indent": 3,
      "text": "This specification does not exclude the use of unregistered clients. However, the use of such clients is beyond the scope of this specification and requires additional security analysis and review of its interoperability impact.",
      "ja": "この仕様は、未登録のクライアントの使用を除外しません。ただし、そのようなクライアントの使用はこの仕様の範囲を超えており、追加のセキュリティ分析と相互運用性への影響のレビューが必要です。"
    },
    {
      "indent": 0,
      "text": "3. Protocol Endpoints",
      "section_title": true,
      "ja": "3. プロトコルエンドポイント"
    },
    {
      "indent": 3,
      "text": "The authorization process utilizes two authorization server endpoints (HTTP resources):",
      "ja": "認可プロセスは、2つの認可サーバーエンドポイント（HTTPリソース）を利用します。"
    },
    {
      "indent": 3,
      "text": "o Authorization endpoint - used by the client to obtain authorization from the resource owner via user-agent redirection.",
      "ja": "o 認可エンドポイント-クライアントがユーザーエージェントリダイレクトを介してリソース所有者から認可を取得するために使用します。"
    },
    {
      "indent": 3,
      "text": "o Token endpoint - used by the client to exchange an authorization grant for an access token, typically with client authentication.",
      "ja": "o トークンエンドポイント-通常、クライアント認証を使用して、アクセストークンの認可付与を交換するためにクライアントによって使用されます。"
    },
    {
      "indent": 3,
      "text": "As well as one client endpoint:",
      "ja": "また、1つのクライアントエンドポイント："
    },
    {
      "indent": 3,
      "text": "o Redirection endpoint - used by the authorization server to return responses containing authorization credentials to the client via the resource owner user-agent.",
      "ja": "o リダイレクトエンドポイント-リソース所有者のユーザーエージェントを介して、認証情報を含む応答をクライアントに返すために認証サーバーによって使用されます。"
    },
    {
      "indent": 3,
      "text": "Not every authorization grant type utilizes both endpoints. Extension grant types MAY define additional endpoints as needed.",
      "ja": "すべての許可付与タイプが両方のエンドポイントを利用するわけではありません。拡張付与タイプは、必要に応じて追加のエンドポイントを定義してもよい（MAY）。"
    },
    {
      "indent": 0,
      "text": "3.1. Authorization Endpoint",
      "section_title": true,
      "ja": "3.1. 認可エンドポイント"
    },
    {
      "indent": 3,
      "text": "The authorization endpoint is used to interact with the resource owner and obtain an authorization grant. The authorization server MUST first verify the identity of the resource owner. The way in which the authorization server authenticates the resource owner (e.g., username and password login, session cookies) is beyond the scope of this specification.",
      "ja": "許可エンドポイントは、リソース所有者と対話し、許可付与を取得するために使用されます。認可サーバーは、最初にリソース所有者の身元を確認する必要があります。認可サーバーがリソースの所有者を認証する方法（ユーザー名とパスワードのログイン、セッションCookieなど）は、この仕様の範囲を超えています。"
    },
    {
      "indent": 3,
      "text": "The means through which the client obtains the location of the authorization endpoint are beyond the scope of this specification, but the location is typically provided in the service documentation.",
      "ja": "クライアントが認可エンドポイントの場所を取得する方法はこの仕様の範囲外ですが、通常、場所はサービスのドキュメントに記載されています。"
    },
    {
      "indent": 3,
      "text": "The endpoint URI MAY include an \"application/x-www-form-urlencoded\" formatted (per Appendix B) query component ([RFC3986] Section 3.4), which MUST be retained when adding additional query parameters. The endpoint URI MUST NOT include a fragment component.",
      "ja": "エンドポイントURIには、「application/x-www-form-urlencoded」形式の（付録Bに従って）クエリコンポーネント（[RFC3986]セクション3.4）を含めることができます（MAY）。これは、クエリパラメータを追加するときに保持する必要があります。エンドポイントURIにフラグメントコンポーネントを含めることはできません。"
    },
    {
      "indent": 3,
      "text": "Since requests to the authorization endpoint result in user authentication and the transmission of clear-text credentials (in the HTTP response), the authorization server MUST require the use of TLS as described in Section 1.6 when sending requests to the authorization endpoint.",
      "ja": "認可エンドポイントへのリクエストはユーザー認証とクリアテキストのクレデンシャルの送信（HTTP応答で）をもたらすため、認可サーバーは、リクエストを認可エンドポイントに送信するときに、セクション1.6で説明されているようにTLSの使用を要求する必要があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST support the use of the HTTP \"GET\" method [RFC2616] for the authorization endpoint and MAY support the use of the \"POST\" method as well.",
      "ja": "認可サーバーは、認可エンドポイントのHTTP \"GET\"メソッド[RFC2616]の使用をサポートする必要があり、 \"POST\"メソッドの使用もサポートする場合があります（MAY）。"
    },
    {
      "indent": 3,
      "text": "Parameters sent without a value MUST be treated as if they were omitted from the request. The authorization server MUST ignore unrecognized request parameters. Request and response parameters MUST NOT be included more than once.",
      "ja": "値なしで送信されたパラメーターは、リクエストから省略されたかのように扱わなければなりません（MUST）。認可サーバーは、認識されない要求パラメーターを無視する必要があります。リクエストとレスポンスのパラメーターは複数回含めることはできません。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Response Type",
      "section_title": true,
      "ja": "3.1.1. 応答タイプ"
    },
    {
      "indent": 3,
      "text": "The authorization endpoint is used by the authorization code grant type and implicit grant type flows. The client informs the authorization server of the desired grant type using the following parameter:",
      "ja": "許可エンドポイントは、許可コード付与タイプおよび暗黙的な付与タイプのフローによって使用されます。クライアントは、以下のパラメーターを使用して、許可サーバーに必要な付与タイプを通知します。"
    },
    {
      "indent": 3,
      "text": "response_type REQUIRED. The value MUST be one of \"code\" for requesting an authorization code as described by Section 4.1.1, \"token\" for requesting an access token (implicit grant) as described by Section 4.2.1, or a registered extension value as described by Section 8.4.",
      "ja": "response_typeは必須です。値は、セクション4.1.1で説明されている認証コードを要求するための「コード」、セクション4.2.1で説明されているアクセストークン（暗黙の許可）を要求するための「トークン」、またはセクション8.4。"
    },
    {
      "indent": 3,
      "text": "Extension response types MAY contain a space-delimited (%x20) list of values, where the order of values does not matter (e.g., response type \"a b\" is the same as \"b a\"). The meaning of such composite response types is defined by their respective specifications.",
      "ja": "拡張応答タイプには、スペースで区切られた（%x20）値のリストを含めることができます（値の順序は重要ではありません（たとえば、応答タイプ \"a b\"は \"b a\"と同じです）。このような複合応答タイプの意味は、それぞれの仕様によって定義されます。"
    },
    {
      "indent": 3,
      "text": "If an authorization request is missing the \"response_type\" parameter, or if the response type is not understood, the authorization server MUST return an error response as described in Section 4.1.2.1.",
      "ja": "認可リクエストに「response_type」パラメータが欠落している場合、または応答タイプが理解されていない場合、セクション4.1.2.1で説明されているように、認可サーバーはエラー応答を返さなければなりません（MUST）。"
    },
    {
      "indent": 0,
      "text": "3.1.2. Redirection Endpoint",
      "section_title": true,
      "ja": "3.1.2. リダイレクトエンドポイント"
    },
    {
      "indent": 3,
      "text": "After completing its interaction with the resource owner, the authorization server directs the resource owner's user-agent back to the client. The authorization server redirects the user-agent to the client's redirection endpoint previously established with the authorization server during the client registration process or when making the authorization request.",
      "ja": "リソース所有者との対話が完了すると、認可サーバーはリソース所有者のユーザーエージェントをクライアントに送り返します。認可サーバーは、クライアントの登録プロセス中または認可要求を行うときに、認可サーバーで以前に確立されたクライアントのリダイレクトエンドポイントにユーザーエージェントをリダイレクトします。"
    },
    {
      "indent": 3,
      "text": "The redirection endpoint URI MUST be an absolute URI as defined by [RFC3986] Section 4.3. The endpoint URI MAY include an \"application/x-www-form-urlencoded\" formatted (per Appendix B) query component ([RFC3986] Section 3.4), which MUST be retained when adding additional query parameters. The endpoint URI MUST NOT include a fragment component.",
      "ja": "リダイレクトエンドポイントURIは、[RFC3986]セクション4.3で定義されている絶対URIである必要があります。エンドポイントURIには、「application/x-www-form-urlencoded」形式の（付録Bに従って）クエリコンポーネント（[RFC3986]セクション3.4）を含めることができます（MAY）。これは、クエリパラメータを追加するときに保持する必要があります。エンドポイントURIにフラグメントコンポーネントを含めることはできません。"
    },
    {
      "indent": 0,
      "text": "3.1.2.1. Endpoint Request Confidentiality",
      "section_title": true,
      "ja": "3.1.2.1. エンドポイントリクエストの機密性"
    },
    {
      "indent": 3,
      "text": "The redirection endpoint SHOULD require the use of TLS as described in Section 1.6 when the requested response type is \"code\" or \"token\", or when the redirection request will result in the transmission of sensitive credentials over an open network. This specification does not mandate the use of TLS because at the time of this writing, requiring clients to deploy TLS is a significant hurdle for many client developers. If TLS is not available, the authorization server SHOULD warn the resource owner about the insecure endpoint prior to redirection (e.g., display a message during the authorization request).",
      "ja": "リダイレクトエンドポイントは、リクエストされた応答タイプが「コード」または「トークン」である場合、またはリダイレクトリクエストがオープンネットワーク経由で機密の資格情報を送信する場合に、セクション1.6で説明されているTLSの使用を必要とします（SHOULD）。このドキュメントの執筆時点では、クライアントにTLSの展開を要求することは多くのクライアント開発者にとって大きなハードルであるため、この仕様はTLSの使用を義務付けていません。 TLSが利用できない場合、認可サーバーはリダイレクトの前に安全でないエンドポイントについてリソース所有者に警告する必要があります（たとえば、認可リクエスト中にメッセージを表示します）。"
    },
    {
      "indent": 3,
      "text": "Lack of transport-layer security can have a severe impact on the security of the client and the protected resources it is authorized to access. The use of transport-layer security is particularly critical when the authorization process is used as a form of delegated end-user authentication by the client (e.g., third-party sign-in service).",
      "ja": "トランスポート層のセキュリティの欠如は、クライアントのセキュリティと、アクセスが許可されている保護されたリソースに深刻な影響を与える可能性があります。トランスポート層セキュリティの使用は、認可プロセスがクライアントによる委任されたエンドユーザー認証の形式として使用される場合に特に重要です（たとえば、サードパーティのサインインサービス）。"
    },
    {
      "indent": 0,
      "text": "3.1.2.2. Registration Requirements",
      "section_title": true,
      "ja": "3.1.2.2. 登録要件"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST require the following clients to register their redirection endpoint:",
      "ja": "認可サーバーは、リダイレクトエンドポイントを登録するために次のクライアントを要求する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Public clients.",
      "ja": "o 公共のクライアント。"
    },
    {
      "indent": 3,
      "text": "o Confidential clients utilizing the implicit grant type.",
      "ja": "o 暗黙の付与タイプを使用する機密クライアント。"
    },
    {
      "indent": 3,
      "text": "The authorization server SHOULD require all clients to register their redirection endpoint prior to utilizing the authorization endpoint.",
      "ja": "認可サーバーは、認可エンドポイントを利用する前に、すべてのクライアントがリダイレクトエンドポイントを登録することを要求する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "The authorization server SHOULD require the client to provide the complete redirection URI (the client MAY use the \"state\" request parameter to achieve per-request customization). If requiring the registration of the complete redirection URI is not possible, the authorization server SHOULD require the registration of the URI scheme, authority, and path (allowing the client to dynamically vary only the query component of the redirection URI when requesting authorization).",
      "ja": "認可サーバーは、クライアントに完全なリダイレクトURIを提供するように要求する必要があります（クライアントは「状態」要求パラメーターを使用して要求ごとのカスタマイズを実現できます）完全なリダイレクトURIの登録が必要でない場合、認可サーバーはURIスキーム、権限、およびパスの登録を要求する必要があります（クライアントが認可をリクエストするときにリダイレクトURIのクエリコンポーネントのみを動的に変更できるようにします）。"
    },
    {
      "indent": 3,
      "text": "The authorization server MAY allow the client to register multiple redirection endpoints.",
      "ja": "認可サーバーは、クライアントが複数のリダイレクトエンドポイントを登録できるようにする場合があります。"
    },
    {
      "indent": 3,
      "text": "Lack of a redirection URI registration requirement can enable an attacker to use the authorization endpoint as an open redirector as described in Section 10.15.",
      "ja": "セクション10.15で説明されているように、リダイレクトURIの登録要件がないと、攻撃者が認証エンドポイントをオープンリダイレクタとして使用できる可能性があります。"
    },
    {
      "indent": 0,
      "text": "3.1.2.3. Dynamic Configuration",
      "section_title": true,
      "ja": "3.1.2.3. 動的構成"
    },
    {
      "indent": 3,
      "text": "If multiple redirection URIs have been registered, if only part of the redirection URI has been registered, or if no redirection URI has been registered, the client MUST include a redirection URI with the authorization request using the \"redirect_uri\" request parameter.",
      "ja": "複数のリダイレクトURIが登録されている場合、リダイレクトURIの一部のみが登録されている場合、またはリダイレクトURIが登録されていない場合、クライアントは \"redirect_uri\"リクエストパラメータを使用して認証リクエストにリダイレクトURIを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "When a redirection URI is included in an authorization request, the authorization server MUST compare and match the value received against at least one of the registered redirection URIs (or URI components) as defined in [RFC3986] Section 6, if any redirection URIs were registered. If the client registration included the full redirection URI, the authorization server MUST compare the two URIs using simple string comparison as defined in [RFC3986] Section 6.2.1.",
      "ja": "リダイレクトURIが認可リクエストに含まれている場合、認可サーバーは、受信した値を、[RFC3986]セクション6で定義されている少なくとも1つの登録済みリダイレクトURI（またはURIコンポーネント）と比較し、一致する必要があります（リダイレクトURIが登録されている場合）。 。クライアント登録に完全なリダイレクトURIが含まれている場合、認可サーバーは、[RFC3986]セクション6.2.1で定義されている単純な文字列比較を使用して、2つのURIを比較する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.1.2.4. Invalid Endpoint",
      "section_title": true,
      "ja": "3.1.2.4. 無効なエンドポイント"
    },
    {
      "indent": 3,
      "text": "If an authorization request fails validation due to a missing, invalid, or mismatching redirection URI, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.",
      "ja": "リダイレクトURIの欠落、無効、または不一致が原因で認可リクエストが検証に失敗した場合、認可サーバーはリソース所有者にエラーを通知する必要があり（SHOULD）、ユーザーエージェントを無効なリダイレクトURIに自動的にリダイレクトしてはなりません。"
    },
    {
      "indent": 0,
      "text": "3.1.2.5. Endpoint Content",
      "section_title": true,
      "ja": "3.1.2.5. エンドポイントコンテンツ"
    },
    {
      "indent": 3,
      "text": "The redirection request to the client's endpoint typically results in an HTML document response, processed by the user-agent. If the HTML response is served directly as the result of the redirection request, any script included in the HTML document will execute with full access to the redirection URI and the credentials it contains.",
      "ja": "クライアントのエンドポイントへのリダイレクト要求は、通常、ユーザーエージェントによって処理されるHTMLドキュメント応答になります。リダイレクト要求の結果としてHTML応答が直接提供される場合、HTMLドキュメントに含まれるスクリプトはすべて、リダイレクトURIとそれに含まれる資格情報へのフルアクセスで実行されます。"
    },
    {
      "indent": 3,
      "text": "The client SHOULD NOT include any third-party scripts (e.g., third-party analytics, social plug-ins, ad networks) in the redirection endpoint response. Instead, it SHOULD extract the credentials from the URI and redirect the user-agent again to another endpoint without exposing the credentials (in the URI or elsewhere). If third-party scripts are included, the client MUST ensure that its own scripts (used to extract and remove the credentials from the URI) will execute first.",
      "ja": "クライアントは、リダイレクトエンドポイントの応答にサードパーティのスクリプト（サードパーティの分析、ソーシャルプラグイン、広告ネットワークなど）を含めないでください。代わりに、URIから資格情報を抽出し、（URIまたは他の場所で）資格情報を公開せずにユーザーエージェントを別のエンドポイントにリダイレクトする必要があります（SHOULD）。サードパーティのスクリプトが含まれている場合、クライアントは独自のスクリプト（URIから資格情報を抽出および削除するために使用される）が最初に実行されることを確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2. Token Endpoint",
      "section_title": true,
      "ja": "3.2. トークンエンドポイント"
    },
    {
      "indent": 3,
      "text": "The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly).",
      "ja": "トークンエンドポイントは、クライアントが使用して、認可付与トークンまたは更新トークンを提示することでアクセストークンを取得します。トークンエンドポイントは、暗黙の付与タイプを除くすべての許可付与で使用されます（アクセストークンが直接発行されるため）。"
    },
    {
      "indent": 3,
      "text": "The means through which the client obtains the location of the token endpoint are beyond the scope of this specification, but the location is typically provided in the service documentation.",
      "ja": "クライアントがトークンエンドポイントの場所を取得する方法は、この仕様の範囲外ですが、通常、場所はサービスドキュメントに記載されています。"
    },
    {
      "indent": 3,
      "text": "The endpoint URI MAY include an \"application/x-www-form-urlencoded\" formatted (per Appendix B) query component ([RFC3986] Section 3.4), which MUST be retained when adding additional query parameters. The endpoint URI MUST NOT include a fragment component.",
      "ja": "エンドポイントURIには、「application/x-www-form-urlencoded」形式の（付録Bに従って）クエリコンポーネント（[RFC3986]セクション3.4）を含めることができます（MAY）。これは、クエリパラメータを追加するときに保持する必要があります。エンドポイントURIにフラグメントコンポーネントを含めることはできません。"
    },
    {
      "indent": 3,
      "text": "Since requests to the token endpoint result in the transmission of clear-text credentials (in the HTTP request and response), the authorization server MUST require the use of TLS as described in Section 1.6 when sending requests to the token endpoint.",
      "ja": "トークンエンドポイントへのリクエストはクリアテキストクレデンシャルの送信（HTTPリクエストとレスポンスで）になるため、認証サーバーは、リクエストをトークンエンドポイントに送信するときにセクション1.6で説明されているようにTLSの使用を要求する必要があります。"
    },
    {
      "indent": 3,
      "text": "The client MUST use the HTTP \"POST\" method when making access token requests.",
      "ja": "クライアントは、アクセストークンリクエストを行うときにHTTPの「POST」メソッドを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Parameters sent without a value MUST be treated as if they were omitted from the request. The authorization server MUST ignore unrecognized request parameters. Request and response parameters MUST NOT be included more than once.",
      "ja": "値なしで送信されたパラメーターは、リクエストから省略されたかのように扱わなければなりません（MUST）。認可サーバーは、認識されない要求パラメーターを無視する必要があります。リクエストとレスポンスのパラメーターは複数回含めることはできません。"
    },
    {
      "indent": 0,
      "text": "3.2.1. Client Authentication",
      "section_title": true,
      "ja": "3.2.1. クライアント認証"
    },
    {
      "indent": 3,
      "text": "Confidential clients or other clients issued client credentials MUST authenticate with the authorization server as described in Section 2.3 when making requests to the token endpoint. Client authentication is used for:",
      "ja": "機密クライアントまたはクライアント資格情報を発行した他のクライアントは、トークンエンドポイントにリクエストを行うときに、セクション2.3で説明されているように、認証サーバーで認証する必要があります。クライアント認証は次の目的で使用されます。"
    },
    {
      "indent": 3,
      "text": "o Enforcing the binding of refresh tokens and authorization codes to the client they were issued to. Client authentication is critical when an authorization code is transmitted to the redirection endpoint over an insecure channel or when the redirection URI has not been registered in full.",
      "ja": "o リフレッシュトークンと認証コードを、それらが発行されたクライアントに強制的にバインドする。クライアント認証は、認証コードが安全でないチャネルを介してリダイレクトエンドポイントに送信される場合、またはリダイレクトURIが完全に登録されていない場合に重要です。"
    },
    {
      "indent": 3,
      "text": "o Recovering from a compromised client by disabling the client or changing its credentials, thus preventing an attacker from abusing stolen refresh tokens. Changing a single set of client credentials is significantly faster than revoking an entire set of refresh tokens.",
      "ja": "o クライアントの無効化または資格情報の変更により、侵害されたクライアントから回復し、攻撃者が盗まれた更新トークンを悪用するのを防ぎます。単一セットのクライアント資格情報の変更は、リフレッシュトークンのセット全体を取り消すよりも大幅に高速です。"
    },
    {
      "indent": 3,
      "text": "o Implementing authentication management best practices, which require periodic credential rotation. Rotation of an entire set of refresh tokens can be challenging, while rotation of a single set of client credentials is significantly easier.",
      "ja": "o 定期的な認証情報のローテーションを必要とする認証管理のベストプラクティスを実装します。更新トークンのセット全体のローテーションは難しい場合がありますが、クライアント資格情報の単一セットのローテーションは非常に簡単です。"
    },
    {
      "indent": 3,
      "text": "A client MAY use the \"client_id\" request parameter to identify itself when sending requests to the token endpoint. In the \"authorization_code\" \"grant_type\" request to the token endpoint, an unauthenticated client MUST send its \"client_id\" to prevent itself from inadvertently accepting a code intended for a client with a different \"client_id\". This protects the client from substitution of the authentication code. (It provides no additional security for the protected resource.)",
      "ja": "クライアントは、リクエストをトークンエンドポイントに送信するときに、「client_id」リクエストパラメータを使用して自身を識別することができます。トークンエンドポイントへの \"authorization_code\" \"grant_type\"リクエストでは、認証されていないクライアントがその \"client_id\"を送信して、別の \"client_id\"を持つクライアント向けのコードを誤って受け入れないようにする必要があります。これにより、認証コードの置換からクライアントが保護されます。 （保護されたリソースに追加のセキュリティは提供されません。）"
    },
    {
      "indent": 0,
      "text": "3.3. Access Token Scope",
      "section_title": true,
      "ja": "3.3. アクセストークンのスコープ"
    },
    {
      "indent": 3,
      "text": "The authorization and token endpoints allow the client to specify the scope of the access request using the \"scope\" request parameter. In turn, the authorization server uses the \"scope\" response parameter to inform the client of the scope of the access token issued.",
      "ja": "認可エンドポイントとトークンエンドポイントにより、クライアントは「scope」リクエストパラメータを使用してアクセスリクエストのスコープを指定できます。次に、許可サーバーは「スコープ」応答パラメーターを使用して、発行されたアクセストークンのスコープをクライアントに通知します。"
    },
    {
      "indent": 3,
      "text": "The value of the scope parameter is expressed as a list of space-delimited, case-sensitive strings. The strings are defined by the authorization server. If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope.",
      "ja": "スコープパラメータの値は、スペースで区切られ、大文字と小文字が区別される文字列のリストとして表されます。文字列は認可サーバーによって定義されます。値にスペースで区切られた複数の文字列が含まれている場合、それらの順序は重要ではなく、各文字列は要求されたスコープに追加のアクセス範囲を追加します。"
    },
    {
      "indent": 5,
      "text": "scope       = scope-token *( SP scope-token )\nscope-token = 1*( %x21 / %x23-5B / %x5D-7E )",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MAY fully or partially ignore the scope requested by the client, based on the authorization server policy or the resource owner's instructions. If the issued access token scope is different from the one requested by the client, the authorization server MUST include the \"scope\" response parameter to inform the client of the actual scope granted.",
      "ja": "認可サーバーは、認可サーバーのポリシーまたはリソース所有者の指示に基づいて、クライアントによって要求されたスコープを完全にまたは部分的に無視する場合があります。発行されたアクセストークンのスコープがクライアントによって要求されたスコープと異なる場合、認可サーバーは、許可された実際のスコープをクライアントに通知するために「スコープ」応答パラメータを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "If the client omits the scope parameter when requesting authorization, the authorization server MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope. The authorization server SHOULD document its scope requirements and default value (if defined).",
      "ja": "クライアントが認可をリクエストするときにスコープパラメータを省略した場合、認可サーバーは、事前定義されたデフォルト値を使用してリクエストを処理するか、無効なスコープを示すリクエストに失敗する必要があります。認可サーバーは、そのスコープ要件とデフォルト値（定義されている場合）を文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "4. Obtaining Authorization",
      "section_title": true,
      "ja": "4. 認可の取得"
    },
    {
      "indent": 3,
      "text": "To request an access token, the client obtains authorization from the resource owner. The authorization is expressed in the form of an authorization grant, which the client uses to request the access token. OAuth defines four grant types: authorization code, implicit, resource owner password credentials, and client credentials. It also provides an extension mechanism for defining additional grant types.",
      "ja": "アクセストークンを要求するために、クライアントはリソース所有者から認可を取得します。認可は、クライアントがアクセストークンを要求するために使用する認可付与の形式で表されます。 OAuthは、認可コード、暗黙的、リソース所有者のパスワード資格情報、およびクライアント資格情報の4つの付与タイプを定義します。また、追加の付与タイプを定義するための拡張メカニズムも提供します。"
    },
    {
      "indent": 0,
      "text": "4.1. Authorization Code Grant",
      "section_title": true,
      "ja": "4.1. 認可コード付与"
    },
    {
      "indent": 3,
      "text": "The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients. Since this is a redirection-based flow, the client must be capable of interacting with the resource owner's user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.",
      "ja": "認証コード付与タイプは、アクセストークンと更新トークンの両方を取得するために使用され、機密クライアント向けに最適化されています。これはリダイレクトベースのフローであるため、クライアントはリソース所有者のユーザーエージェント（通常はWebブラウザー）とやり取りでき、認可サーバーから（リダイレクトを介して）着信要求を受信できる必要があります。"
    },
    {
      "indent": 5,
      "text": "+----------+\n| Resource |\n|   Owner  |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier      +---------------+\n|         -+----(A)-- & Redirection URI ---->|               |\n|  User-   |                                 | Authorization |\n|  Agent  -+----(B)-- User authenticates --->|     Server    |\n|          |                                 |               |\n|         -+----(C)-- Authorization Code ---<|               |\n+-|----|---+                                 +---------------+\n  |    |                                         ^      v\n (A)  (C)                                        |      |\n  |    |                                         |      |\n  ^    v                                         |      |\n+---------+                                      |      |\n|         |>---(D)-- Authorization Code ---------'      |\n|  Client |          & Redirection URI                  |\n|         |                                             |\n|         |<---(E)----- Access Token -------------------'\n+---------+       (w/ Optional Refresh Token)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Note: The lines illustrating steps (A), (B), and (C) are broken into two parts as they pass through the user-agent.",
      "ja": "注：ステップ（A）、（B）、および（C）を示す線は、ユーザーエージェントを通過するときに2つの部分に分かれています。"
    },
    {
      "indent": 21,
      "text": "Figure 3: Authorization Code Flow",
      "ja": "図3：認可コードのフロー"
    },
    {
      "indent": 3,
      "text": "The flow illustrated in Figure 3 includes the following steps:",
      "ja": "図3に示すフローには、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The client initiates the flow by directing the resource owner's user-agent to the authorization endpoint. The client includes its client identifier, requested scope, local state, and a redirection URI to which the authorization server will send the user-agent back once access is granted (or denied).",
      "ja": "（A）クライアントは、リソース所有者のユーザーエージェントを認証エンドポイントに送信することでフローを開始します。クライアントには、クライアント識別子、要求されたスコープ、ローカル状態、およびアクセスが許可（または拒否）されたときに認可サーバーがユーザーエージェントを送り返すリダイレクトURIが含まれます。"
    },
    {
      "indent": 3,
      "text": "(B) The authorization server authenticates the resource owner (via the user-agent) and establishes whether the resource owner grants or denies the client's access request.",
      "ja": "（B）認可サーバーは、リソースオーナーを（ユーザーエージェント経由で）認証し、リソースオーナーがクライアントのアクセス要求を許可するか拒否するかを確立します。"
    },
    {
      "indent": 3,
      "text": "(C) Assuming the resource owner grants access, the authorization server redirects the user-agent back to the client using the redirection URI provided earlier (in the request or during client registration). The redirection URI includes an authorization code and any local state provided by the client earlier.",
      "ja": "（C）リソースの所有者がアクセスを許可すると、認証サーバーは以前に（リクエスト内またはクライアントの登録時に）提供されたリダイレクトURIを使用してユーザーエージェントをクライアントにリダイレクトします。リダイレクトURIには、認証コードと、以前にクライアントによって提供されたローカル状態が含まれています。"
    },
    {
      "indent": 3,
      "text": "(D) The client requests an access token from the authorization server's token endpoint by including the authorization code received in the previous step. When making the request, the client authenticates with the authorization server. The client includes the redirection URI used to obtain the authorization code for verification.",
      "ja": "（D）クライアントは、前のステップで受信した認証コードを含めることにより、認証サーバーのトークンエンドポイントにアクセストークンを要求します。要求を行うとき、クライアントは許可サーバーで認証します。クライアントには、検証用の認証コードを取得するために使用されるリダイレクトURIが含まれています。"
    },
    {
      "indent": 3,
      "text": "(E) The authorization server authenticates the client, validates the authorization code, and ensures that the redirection URI received matches the URI used to redirect the client in step (C). If valid, the authorization server responds back with an access token and, optionally, a refresh token.",
      "ja": "（E）認可サーバーはクライアントを認証し、認可コードを検証し、受信したリダイレクトURIがステップ（C）でクライアントをリダイレクトするために使用されたURIと一致することを確認します。有効な場合、認証サーバーはアクセストークンと、オプションで更新トークンで応答します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Authorization Request",
      "section_title": true,
      "ja": "4.1.1. 認可リクエスト"
    },
    {
      "indent": 3,
      "text": "The client constructs the request URI by adding the following parameters to the query component of the authorization endpoint URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "クライアントは、付録Bに従って、「application/x-www-form-urlencoded」形式を使用して、認可エンドポイントURIのクエリコンポーネントに次のパラメーターを追加することにより、リクエストURIを構築します。"
    },
    {
      "indent": 3,
      "text": "response_type REQUIRED. Value MUST be set to \"code\".",
      "ja": "response_typeは必須です。値は「コード」に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "client_id REQUIRED. The client identifier as described in Section 2.2.",
      "ja": "client_idが必要です。セクション2.2で説明されているクライアント識別子。"
    },
    {
      "indent": 3,
      "text": "redirect_uri OPTIONAL. As described in Section 3.1.2.",
      "ja": "redirect_uriはオプションです。セクション3.1.2で説明されています。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL. The scope of the access request as described by Section 3.3.",
      "ja": "scopeはオプションです。セクション3.3で説明されているアクセス要求の範囲。"
    },
    {
      "indent": 3,
      "text": "state RECOMMENDED. An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery as described in Section 10.12.",
      "ja": "状態が推奨されます。リクエストとコールバックの間の状態を維持するためにクライアントが使用する不透明な値。認可サーバーは、ユーザーエージェントをクライアントにリダイレクトするときにこの値を含めます。セクション10.12で説明されているように、クロスサイトリクエストフォージェリを防止するためにパラメータを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "The client directs the resource owner to the constructed URI using an HTTP redirection response, or by other means available to it via the user-agent.",
      "ja": "クライアントは、HTTPリダイレクト応答を使用して、またはユーザーエージェントを介してリソース所有者が利用できる他の方法で、リソース所有者を構築されたURIに誘導します。"
    },
    {
      "indent": 3,
      "text": "For example, the client directs the user-agent to make the following HTTP request using TLS (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはTLSを使用して次のHTTPリクエストを行うようにユーザーエージェントに指示します（表示目的でのみ改行を追加します）。"
    },
    {
      "indent": 4,
      "text": "GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz\n    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1\nHost: server.example.com",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server validates the request to ensure that all required parameters are present and valid. If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means).",
      "ja": "許可サーバーは要求を検証して、必要なすべてのパラメーターが存在し、有効であることを確認します。要求が有効である場合、許可サーバーはリソース所有者を認証し、（リソース所有者に尋ねるか、または他の手段で認可を確立することによって）許可決定を取得します。"
    },
    {
      "indent": 3,
      "text": "When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent.",
      "ja": "決定が確立されると、認可サーバーは、HTTPリダイレクト応答を使用して、またはユーザーエージェントを介して利用可能な他の方法で、提供されたクライアントリダイレクトURIにユーザーエージェントを転送します。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Authorization Response",
      "section_title": true,
      "ja": "4.1.2. 認可応答"
    },
    {
      "indent": 3,
      "text": "If the resource owner grants the access request, the authorization server issues an authorization code and delivers it to the client by adding the following parameters to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "リソースの所有者がアクセス要求を許可すると、認可サーバーは認可コードを発行し、「application/x-www-form-urlencoded」形式を使用してリダイレクトURIのクエリコンポーネントに次のパラメーターを追加することで、クライアントに配信します。付録Bごと："
    },
    {
      "indent": 0,
      "text": " code REQUIRED. The authorization code generated by the authorization server. The authorization code MUST expire shortly after it is issued to mitigate the risk of leaks. A maximum authorization code lifetime of 10 minutes is RECOMMENDED. The client MUST NOT use the authorization code more than once. If an authorization code is used more than once, the authorization server MUST deny the request and SHOULD revoke (when possible) all tokens previously issued based on that authorization code. The authorization code is bound to the client identifier and redirection URI.",
      "ja": "コードが必要です。許可サーバーによって生成された許可コード。認証コードは、リークのリスクを軽減するために発行された直後に期限切れになる必要があります。認可コードの最長有効期間は10分です。クライアントは認証コードを複数回使用してはなりません。認証コードが2回以上使用される場合、認証サーバーは要求を拒否しなければならず、その認証コードに基づいて以前に発行されたすべてのトークンを（可能な場合）取り消す必要があります（SHOULD）。認証コードは、クライアント識別子とリダイレクトURIにバインドされています。"
    },
    {
      "indent": 3,
      "text": "state REQUIRED if the \"state\" parameter was present in the client authorization request. The exact value received from the client.",
      "ja": "\"state\"パラメータがクライアント認証リクエストに存在する場合、必須です。クライアントから受け取った正確な値。"
    },
    {
      "indent": 3,
      "text": "For example, the authorization server redirects the user-agent by sending the following HTTP response:",
      "ja": "たとえば、認可サーバーは次のHTTP応答を送信してユーザーエージェントをリダイレクトします。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 302 Found\nLocation: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n          &state=xyz",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The client MUST ignore unrecognized response parameters. The authorization code string size is left undefined by this specification. The client should avoid making assumptions about code value sizes. The authorization server SHOULD document the size of any value it issues.",
      "ja": "クライアントは、認識されない応答パラメーターを無視する必要があります。認証コード文字列のサイズは、この仕様では未定義のままです。クライアントは、コード値のサイズについての想定を避ける必要があります。認可サーバーは、発行する値のサイズを文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "4.1.2.1. Error Response",
      "section_title": true,
      "ja": "4.1.2.1. エラー応答"
    },
    {
      "indent": 3,
      "text": "If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.",
      "ja": "リダイレクトURIの欠落、無効、または不一致が原因で要求が失敗した場合、またはクライアントIDが欠落しているか無効である場合、認可サーバーはリソース所有者にエラーを通知する必要があり（SHOULD）、ユーザーエージェントを無効なリダイレクトに自動的にリダイレクトしてはなりません（MUST NOT）。 URI。"
    },
    {
      "indent": 3,
      "text": "If the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the following parameters to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "リソース所有者がアクセス要求を拒否した場合、またはリダイレクトURIがないか無効な理由以外の理由で要求が失敗した場合、認可サーバーは、「application/x-www-form-urlencoded」を使用してリダイレクトURIのクエリコンポーネントに次のパラメーターを追加することにより、クライアントに通知します。付録B"
    },
    {
      "indent": 3,
      "text": "error REQUIRED. A single ASCII [USASCII] error code from the following:",
      "ja": "エラーは必須です。次の1つのASCII [USASCII] エラーコード："
    },
    {
      "indent": 9,
      "text": "invalid_request The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.",
      "ja": "invalid_request : リクエストに必須パラメーターが欠落しているか、無効なパラメーター値が含まれているか、パラメーターが2回以上含まれているか、またはその他の形式が誤っています。"
    },
    {
      "indent": 9,
      "text": "unauthorized_client The client is not authorized to request an authorization code using this method.",
      "ja": "authorized_client : クライアントは、このメソッドを使用して認証コードをリクエストすることを許可されていません。"
    },
    {
      "indent": 9,
      "text": "access_denied The resource owner or authorization server denied the request.",
      "ja": "access_denied : リソース所有者または許可サーバーが要求を拒否しました。"
    },
    {
      "indent": 9,
      "text": "unsupported_response_type The authorization server does not support obtaining an authorization code using this method.",
      "ja": "unsupported_response_type : 許可サーバーは、このメソッドを使用した許可コードの取得をサポートしていません。"
    },
    {
      "indent": 9,
      "text": "invalid_scope The requested scope is invalid, unknown, or malformed.",
      "ja": "invalid_scope : リクエストされたスコープは、無効、不明、または不正な形式です。"
    },
    {
      "indent": 9,
      "text": "server_error The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)",
      "ja": "server_error : 許可サーバーが予期しない条件を検出したため、要求を実行できませんでした。 （500内部サーバーエラーHTTPステータスコードはHTTPリダイレクト経由でクライアントに返せないため、このエラーコードが必要です。）"
    },
    {
      "indent": 9,
      "text": "temporarily_unavailable The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)",
      "ja": "temporary_unavailable : サーバーの一時的な過負荷またはメンテナンスのため、現在、認可サーバーはリクエストを処理できません。 （503 Service Unavailable HTTPステータスコードをHTTPリダイレクト経由でクライアントに返すことができないため、このエラーコードが必要です。）"
    },
    {
      "indent": 9,
      "text": "Values for the \"error\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "「error」パラメータの値には、セット %x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_description OPTIONAL. Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred. Values for the \"error_description\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "error_description オプション。追加情報を提供する人間が読めるASCII [USASCII]テキスト。発生したエラーをクライアント開発者が理解するのに役立ちます。 \"error_description\"パラメータの値には、セット %x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_uri OPTIONAL. A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error. Values for the \"error_uri\" parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.",
      "ja": "error_uri オプション。エラーに関する情報を含む人間が読めるWebページを識別するURI。クライアント開発者にエラーに関する追加情報を提供するために使用されます。 \"error_uri\"パラメータの値は、URI参照構文に準拠する必要があるため、セット%x21 / %x23-5B / %x5D-7Eの外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "state REQUIRED if a \"state\" parameter was present in the client authorization request. The exact value received from the client.",
      "ja": "クライアント認証リクエストに「状態」パラメータが存在する場合は必須です。クライアントから受け取った正確な値。"
    },
    {
      "indent": 3,
      "text": "For example, the authorization server redirects the user-agent by sending the following HTTP response:",
      "ja": "たとえば、認可サーバーは次のHTTP応答を送信してユーザーエージェントをリダイレクトします。"
    },
    {
      "indent": 3,
      "text": "HTTP/1.1 302 Found\nLocation: https://client.example.com/cb?error=access_denied&state=xyz",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.1.3. Access Token Request",
      "section_title": true,
      "ja": "4.1.3. アクセストークンリクエスト"
    },
    {
      "indent": 3,
      "text": "The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" format per Appendix B with a character encoding of UTF-8 in the HTTP request entity-body:",
      "ja": "クライアントは、付録Bの「application/x-www-form-urlencoded」形式を使用し、HTTPリクエストのエンティティ本体にUTF-8の文字エンコーディングを使用して次のパラメータを送信することにより、トークンエンドポイントにリクエストを送信します。"
    },
    {
      "indent": 3,
      "text": "grant_type REQUIRED. Value MUST be set to \"authorization_code\".",
      "ja": "grant_typeは必須です。値は \"authorization_code\"に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "code REQUIRED. The authorization code received from the authorization server.",
      "ja": "codeは必須です。許可サーバーから受け取った許可コード。"
    },
    {
      "indent": 3,
      "text": "redirect_uri REQUIRED, if the \"redirect_uri\" parameter was included in the authorization request as described in Section 4.1.1, and their values MUST be identical.",
      "ja": "「redirect_uri」パラメータがセクション4.1.1で説明されているように許可リクエストに含まれていて、それらの値が同一である必要がある場合、redirect_uriが必要です。"
    },
    {
      "indent": 3,
      "text": "client_id REQUIRED, if the client is not authenticating with the authorization server as described in Section 3.2.1.",
      "ja": "client_idは、セクション3.2.1で説明されているように、クライアントが許可サーバーで認証されていない場合に必須です。"
    },
    {
      "indent": 3,
      "text": "If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server as described in Section 3.2.1.",
      "ja": "クライアントの種類が機密である場合、またはクライアントにクライアント資格情報が発行された（または他の認証要件が割り当てられた）場合、クライアントは、セクション3.2.1で説明されているように認可サーバーで認証する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using TLS (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはTLSを使用して次のHTTPリクエストを作成します（表示目的でのみ改行を追加します）。"
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA\n&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MUST:",
      "ja": "認可サーバーは、"
    },
    {
      "indent": 3,
      "text": "o require client authentication for confidential clients or for any client that was issued client credentials (or with other authentication requirements),",
      "ja": "o 機密クライアントまたはクライアント資格情報（またはその他の認証要件）が発行されたクライアントに対してクライアント認証を要求する、"
    },
    {
      "indent": 3,
      "text": "o authenticate the client if client authentication is included,",
      "ja": "o クライアント認証が含まれている場合はクライアントを認証し、"
    },
    {
      "indent": 3,
      "text": "o ensure that the authorization code was issued to the authenticated confidential client, or if the client is public, ensure that the code was issued to \"client_id\" in the request,",
      "ja": "o 認証された機密クライアントに認証コードが発行されたことを確認します。または、クライアントが公開されている場合は、リクエスト内の「client_id」にコードが発行されたことを確認します。"
    },
    {
      "indent": 3,
      "text": "o verify that the authorization code is valid, and",
      "ja": "o 認証コードが有効であることを確認し、"
    },
    {
      "indent": 3,
      "text": "o ensure that the \"redirect_uri\" parameter is present if the \"redirect_uri\" parameter was included in the initial authorization request as described in Section 4.1.1, and if included ensure that their values are identical.",
      "ja": "o 「redirect_uri」パラメーターがセクション4.1.1で説明されているように最初の許可要求に含まれている場合、「redirect_uri」パラメーターが存在することを確認し、含まれている場合、それらの値が同一であることを確認してください。"
    },
    {
      "indent": 0,
      "text": "4.1.4. Access Token Response",
      "section_title": true,
      "ja": "4.1.4. アクセストークンの応答"
    },
    {
      "indent": 3,
      "text": "If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token as described in Section 5.1. If the request client authentication failed or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "アクセストークン要求が有効で認可されている場合、セクション5.1で説明されているように、認可サーバーはアクセストークンとオプションの更新トークンを発行します。リクエストクライアント認証が失敗したか無効な場合、セクション5.2で説明されているように、認可サーバーはエラー応答を返します。"
    },
    {
      "indent": 3,
      "text": "An example successful response:",
      "ja": "成功した応答の例："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n  \"token_type\":\"example\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n  \"example_parameter\":\"example_value\"\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.2. Implicit Grant",
      "section_title": true,
      "ja": "4.2. 暗黙の付与"
    },
    {
      "indent": 3,
      "text": "The implicit grant type is used to obtain access tokens (it does not support the issuance of refresh tokens) and is optimized for public clients known to operate a particular redirection URI. These clients are typically implemented in a browser using a scripting language such as JavaScript.",
      "ja": "暗黙的な付与タイプは、アクセストークンを取得するために使用され（リフレッシュトークンの発行をサポートしていません）、特定のリダイレクトURIを操作することがわかっているパブリッククライアント用に最適化されています。これらのクライアントは通常、JavaScriptなどのスクリプト言語を使用してブラウザーに実装されます。"
    },
    {
      "indent": 3,
      "text": "Since this is a redirection-based flow, the client must be capable of interacting with the resource owner's user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.",
      "ja": "これはリダイレクトベースのフローであるため、クライアントはリソース所有者のユーザーエージェント（通常はWebブラウザー）とやり取りでき、認可サーバーから（リダイレクトを介して）着信要求を受信できる必要があります。"
    },
    {
      "indent": 3,
      "text": "Unlike the authorization code grant type, in which the client makes separate requests for authorization and for an access token, the client receives the access token as the result of the authorization request.",
      "ja": "クライアントが認可とアクセストークンに対して別々の要求を行う認可コード付与タイプとは異なり、クライアントは認可要求の結果としてアクセストークンを受け取ります。"
    },
    {
      "indent": 3,
      "text": "The implicit grant type does not include client authentication, and relies on the presence of the resource owner and the registration of the redirection URI. Because the access token is encoded into the redirection URI, it may be exposed to the resource owner and other applications residing on the same device.",
      "ja": "暗黙的な付与タイプにはクライアント認証は含まれず、リソース所有者の存在とリダイレクトURIの登録に依存します。アクセストークンはリダイレクトURIにエンコードされているため、同じデバイス上にあるリソース所有者や他のアプリケーションに公開される可能性があります。"
    },
    {
      "indent": 5,
      "text": "+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier     +---------------+\n|         -+----(A)-- & Redirection URI --->|               |\n|  User-   |                                | Authorization |\n|  Agent  -|----(B)-- User authenticates -->|     Server    |\n|          |                                |               |\n|          |<---(C)--- Redirection URI ----<|               |\n|          |          with Access Token     +---------------+\n|          |            in Fragment\n|          |                                +---------------+\n|          |----(D)--- Redirection URI ---->|   Web-Hosted  |\n|          |          without Fragment      |     Client    |\n|          |                                |    Resource   |\n|     (F)  |<---(E)------- Script ---------<|               |\n|          |                                +---------------+\n+-|--------+\n  |    |\n (A)  (G) Access Token\n  |    |\n  ^    v\n+---------+\n|         |\n|  Client |\n|         |\n+---------+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Note: The lines illustrating steps (A) and (B) are broken into two parts as they pass through the user-agent.",
      "ja": "注：ステップ（A）と（B）を示す線は、ユーザーエージェントを通過するときに2つの部分に分かれています。"
    },
    {
      "indent": 23,
      "text": "Figure 4: Implicit Grant Flow",
      "ja": "図4：暗黙的な付与フロー"
    },
    {
      "indent": 3,
      "text": "The flow illustrated in Figure 4 includes the following steps:",
      "ja": "図4に示すフローには、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The client initiates the flow by directing the resource owner's user-agent to the authorization endpoint. The client includes its client identifier, requested scope, local state, and a redirection URI to which the authorization server will send the user-agent back once access is granted (or denied).",
      "ja": "（A）クライアントは、リソース所有者のユーザーエージェントを認証エンドポイントに送信することでフローを開始します。クライアントには、クライアント識別子、要求されたスコープ、ローカル状態、およびアクセスが許可（または拒否）されたときに認可サーバーがユーザーエージェントを送り返すリダイレクトURIが含まれます。"
    },
    {
      "indent": 3,
      "text": "(B) The authorization server authenticates the resource owner (via the user-agent) and establishes whether the resource owner grants or denies the client's access request.",
      "ja": "（B）認可サーバーは、リソースオーナーを（ユーザーエージェント経由で）認証し、リソースオーナーがクライアントのアクセス要求を許可するか拒否するかを確立します。"
    },
    {
      "indent": 3,
      "text": "(C) Assuming the resource owner grants access, the authorization server redirects the user-agent back to the client using the redirection URI provided earlier. The redirection URI includes the access token in the URI fragment.",
      "ja": "（C）リソース所有者がアクセスを許可すると、認証サーバーは、前に提供されたリダイレクトURIを使用してユーザーエージェントをクライアントにリダイレクトします。リダイレクトURIは、URIフラグメントにアクセストークンを含めます。"
    },
    {
      "indent": 3,
      "text": "(D) The user-agent follows the redirection instructions by making a request to the web-hosted client resource (which does not include the fragment per [RFC2616]). The user-agent retains the fragment information locally.",
      "ja": "（D）ユーザーエージェントは、Webでホストされるクライアントリソース（[RFC2616]ごとのフラグメントを含まない）にリクエストを送信することにより、リダイレクトの指示に従います。ユーザーエージェントはフラグメント情報をローカルに保持します。"
    },
    {
      "indent": 3,
      "text": "(E) The web-hosted client resource returns a web page (typically an HTML document with an embedded script) capable of accessing the full redirection URI including the fragment retained by the user-agent, and extracting the access token (and other parameters) contained in the fragment.",
      "ja": "（E）Webでホストされるクライアントリソースは、ユーザーエージェントが保持するフラグメントを含む完全なリダイレクトURIにアクセスし、アクセストークン（およびその他のパラメーター）を抽出できるWebページ（通常はスクリプトが埋め込まれたHTMLドキュメント）を返しますフラグメントに含まれています。"
    },
    {
      "indent": 3,
      "text": "(F) The user-agent executes the script provided by the web-hosted client resource locally, which extracts the access token.",
      "ja": "（F）ユーザーエージェントは、Webでホストされるクライアントリソースによって提供されるスクリプトをローカルで実行し、アクセストークンを抽出します。"
    },
    {
      "indent": 3,
      "text": "(G) The user-agent passes the access token to the client.",
      "ja": "（G）ユーザーエージェントは、アクセストークンをクライアントに渡します。"
    },
    {
      "indent": 3,
      "text": "See Sections 1.3.2 and 9 for background on using the implicit grant. See Sections 10.3 and 10.16 for important security considerations when using the implicit grant.",
      "ja": "暗黙的な付与の使用に関する背景については、セクション1.3.2および9を参照してください。暗黙的な付与を使用する際のセキュリティに関する重要な考慮事項については、セクション10.3および10.16を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Authorization Request",
      "section_title": true,
      "ja": "4.2.1. 認可リクエスト"
    },
    {
      "indent": 3,
      "text": "The client constructs the request URI by adding the following parameters to the query component of the authorization endpoint URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "クライアントは、付録Bに従って、「application/x-www-form-urlencoded」形式を使用して、認可エンドポイントURIのクエリコンポーネントに次のパラメーターを追加することにより、リクエストURIを構築します。"
    },
    {
      "indent": 3,
      "text": "response_type REQUIRED. Value MUST be set to \"token\".",
      "ja": "response_typeは必須です。値は「トークン」に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "client_id REQUIRED. The client identifier as described in Section 2.2.",
      "ja": "client_idは必須です。セクション2.2で説明されているクライアント識別子。"
    },
    {
      "indent": 3,
      "text": "redirect_uri OPTIONAL. As described in Section 3.1.2.",
      "ja": "redirect_uriはオプションです。セクション3.1.2で説明されています。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL. The scope of the access request as described by Section 3.3.",
      "ja": "scopeはオプションです。セクション3.3で説明されているアクセス要求の範囲。"
    },
    {
      "indent": 3,
      "text": "state RECOMMENDED. An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery as described in Section 10.12.",
      "ja": "stateは推奨されます。リクエストとコールバックの間の状態を維持するためにクライアントが使用する不透明な値。認可サーバーは、ユーザーエージェントをクライアントにリダイレクトするときにこの値を含めます。セクション10.12で説明されているように、クロスサイトリクエストフォージェリを防止するためにパラメータを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "The client directs the resource owner to the constructed URI using an HTTP redirection response, or by other means available to it via the user-agent.",
      "ja": "クライアントは、HTTPリダイレクト応答を使用して、またはユーザーエージェントを介してリソース所有者が利用できる他の方法で、リソース所有者を構築されたURIに誘導します。"
    },
    {
      "indent": 3,
      "text": "For example, the client directs the user-agent to make the following HTTP request using TLS (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはTLSを使用して次のHTTPリクエストを行うようにユーザーエージェントに指示します（表示目的でのみ改行を追加します）。"
    },
    {
      "indent": 4,
      "text": "GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz\n    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1\nHost: server.example.com",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server validates the request to ensure that all required parameters are present and valid. The authorization server MUST verify that the redirection URI to which it will redirect the access token matches a redirection URI registered by the client as described in Section 3.1.2.",
      "ja": "許可サーバーは要求を検証して、必要なすべてのパラメーターが存在し、有効であることを確認します。認可サーバーは、セクション3.1.2で説明されているように、アクセストークンのリダイレクト先のリダイレクトURIがクライアントによって登録されたリダイレクトURIと一致することを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means).",
      "ja": "要求が有効である場合、許可サーバーはリソース所有者を認証し、（リソース所有者に尋ねるか、または他の手段で認可を確立することによって）許可決定を取得します。"
    },
    {
      "indent": 3,
      "text": "When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent.",
      "ja": "決定が確立されると、認可サーバーは、HTTPリダイレクト応答を使用して、またはユーザーエージェントを介して利用可能な他の方法で、提供されたクライアントリダイレクトURIにユーザーエージェントを転送します。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Access Token Response",
      "section_title": true,
      "ja": "4.2.2. アクセストークンの応答"
    },
    {
      "indent": 3,
      "text": "If the resource owner grants the access request, the authorization server issues an access token and delivers it to the client by adding the following parameters to the fragment component of the redirection URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "リソース所有者がアクセス要求を許可すると、認可サーバーはアクセストークンを発行し、「application/x-www-form-urlencoded」形式を使用してリダイレクトURIのフラグメントコンポーネントに次のパラメーターを追加することで、それをクライアントに配信します。付録Bごと："
    },
    {
      "indent": 3,
      "text": "access_token REQUIRED. The access token issued by the authorization server.",
      "ja": "access_tokenが必要です。認可サーバーによって発行されたアクセストークン。"
    },
    {
      "indent": 3,
      "text": "token_type REQUIRED. The type of the token issued as described in Section 7.1. Value is case insensitive.",
      "ja": "token_typeは必須です。セクション7.1の説明に従って発行されたトークンのタイプ。値は大文字と小文字が区別されません。"
    },
    {
      "indent": 3,
      "text": "expires_in RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.",
      "ja": "expires_in RECOMMENDED。アクセストークンの有効期間（秒単位）。たとえば、値「3600」は、応答が生成されてから1時間でアクセストークンが期限切れになることを示します。省略した場合、認可サーバーは他の手段で有効期限を提供するか、デフォルト値を文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of the access token as described by Section 3.3.",
      "ja": "OPTIONAL（クライアントによって要求されたスコープと同一の場合）。それ以外の場合は必須です。セクション3.3で説明されているアクセストークンのスコープ。"
    },
    {
      "indent": 3,
      "text": "state REQUIRED if the \"state\" parameter was present in the client authorization request. The exact value received from the client.",
      "ja": "\"state\"パラメータがクライアント認証リクエストに存在する場合、必須です。クライアントから受け取った正確な値。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST NOT issue a refresh token.",
      "ja": "認可サーバーは更新トークンを発行してはいけません。"
    },
    {
      "indent": 3,
      "text": "For example, the authorization server redirects the user-agent by sending the following HTTP response (with extra line breaks for display purposes only):",
      "ja": "たとえば、認可サーバーは次のHTTP応答を送信することでユーザーエージェントをリダイレクトします（表示目的でのみ改行を追加します）。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 302 Found\nLocation: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA\n          &state=xyz&token_type=example&expires_in=3600",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Developers should note that some user-agents do not support the inclusion of a fragment component in the HTTP \"Location\" response header field. Such clients will require using other methods for redirecting the client than a 3xx redirection response -- for example, returning an HTML page that includes a 'continue' button with an action linked to the redirection URI.",
      "ja": "開発者は、一部のユーザーエージェントがHTTP \"Location\"応答ヘッダーフィールドにフラグメントコンポーネントを含めることをサポートしていないことに注意する必要があります。このようなクライアントは、3xxリダイレクト応答以外の方法でクライアントをリダイレクトする必要があります。たとえば、リダイレクトURIにリンクされたアクションを含む「続行」ボタンを含むHTMLページを返します。"
    },
    {
      "indent": 3,
      "text": "The client MUST ignore unrecognized response parameters. The access token string size is left undefined by this specification. The client should avoid making assumptions about value sizes. The authorization server SHOULD document the size of any value it issues.",
      "ja": "クライアントは、認識されない応答パラメーターを無視する必要があります。アクセストークンの文字列サイズは、この仕様では未定義のままです。クライアントは、値のサイズに関する仮定を行わないようにする必要があります。認可サーバーは、発行する値のサイズを文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "4.2.2.1. Error Response",
      "section_title": true,
      "ja": "4.2.2.1. エラー応答"
    },
    {
      "indent": 3,
      "text": "If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.",
      "ja": "リダイレクトURIの欠落、無効、または不一致が原因で要求が失敗した場合、またはクライアントIDが欠落しているか無効である場合、認可サーバーはリソース所有者にエラーを通知する必要があり（SHOULD）、ユーザーエージェントを無効なリダイレクトに自動的にリダイレクトしてはなりません（MUST NOT）。 URI。"
    },
    {
      "indent": 3,
      "text": "If the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the following parameters to the fragment component of the redirection URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:",
      "ja": "リソース所有者がアクセス要求を拒否した場合、またはリダイレクトURIが欠落しているか無効である以外の理由で要求が失敗した場合、認可サーバーは、「application/x-www-form-urlencoded\"」形式を使用します。"
    },
    {
      "indent": 3,
      "text": "error REQUIRED. A single ASCII [USASCII] error code from the following:",
      "ja": "errorは必要です。次の1つのASCII [USASCII] エラーコード："
    },
    {
      "indent": 9,
      "text": "invalid_request The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.",
      "ja": "invalid_request リクエストに必須パラメーターが欠落しているか、無効なパラメーター値が含まれているか、パラメーターが2回以上含まれているか、またはその他の形式が誤っています。"
    },
    {
      "indent": 9,
      "text": "unauthorized_client The client is not authorized to request an access token using this method.",
      "ja": "authorized_client クライアントは、このメソッドを使用してアクセストークンをリクエストすることを許可されていません。"
    },
    {
      "indent": 9,
      "text": "access_denied The resource owner or authorization server denied the request.",
      "ja": "access_denied リソース所有者または許可サーバーが要求を拒否しました。"
    },
    {
      "indent": 9,
      "text": "unsupported_response_type The authorization server does not support obtaining an access token using this method.",
      "ja": "unsupported_response_type 許可サーバーは、このメソッドを使用したアクセストークンの取得をサポートしていません。"
    },
    {
      "indent": 9,
      "text": "invalid_scope The requested scope is invalid, unknown, or malformed.",
      "ja": "invalid_scope リクエストされたスコープは、無効、不明、または不正な形式です。"
    },
    {
      "indent": 9,
      "text": "server_error The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)",
      "ja": "server_error 許可サーバーが予期しない条件を検出したため、要求を実行できませんでした。 （500内部サーバーエラーHTTPステータスコードはHTTPリダイレクト経由でクライアントに返せないため、このエラーコードが必要です。）"
    },
    {
      "indent": 9,
      "text": "temporarily_unavailable The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)",
      "ja": "temporary_unavailable サーバーの一時的な過負荷またはメンテナンスのため、現在、認可サーバーはリクエストを処理できません。 （503 Service Unavailable HTTPステータスコードをHTTPリダイレクト経由でクライアントに返すことができないため、このエラーコードが必要です。）"
    },
    {
      "indent": 9,
      "text": "Values for the \"error\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "「エラー」パラメータの値には、セット%x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_description OPTIONAL. Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred. Values for the \"error_description\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "error_descriptionオプション。追加情報を提供する人間が読めるASCII [USASCII]テキスト。発生したエラーをクライアント開発者が理解するのに役立ちます。 \"error_description\"パラメータの値には、セット%x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_uri OPTIONAL. A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error. Values for the \"error_uri\" parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.",
      "ja": "error_uriオプション。エラーに関する情報を含む人間が読めるWebページを識別するURI。クライアント開発者にエラーに関する追加情報を提供するために使用されます。 \"error_uri\"パラメータの値は、URI参照構文に準拠する必要があるため、セット%x21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "state REQUIRED if a \"state\" parameter was present in the client authorization request. The exact value received from the client.",
      "ja": "クライアント認証リクエストに「状態」パラメータが存在する場合は必須です。クライアントから受け取った正確な値。"
    },
    {
      "indent": 3,
      "text": "For example, the authorization server redirects the user-agent by sending the following HTTP response:",
      "ja": "たとえば、認可サーバーは次のHTTP応答を送信してユーザーエージェントをリダイレクトします。"
    },
    {
      "indent": 3,
      "text": "HTTP/1.1 302 Found\nLocation: https://client.example.com/cb#error=access_denied&state=xyz",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.3. Resource Owner Password Credentials Grant",
      "section_title": true,
      "ja": "4.3. リソース所有者パスワード資格情報付与"
    },
    {
      "indent": 0,
      "text": " The resource owner password credentials grant type is suitable in cases where the resource owner has a trust relationship with the client, such as the device operating system or a highly privileged application. The authorization server should take special care when enabling this grant type and only allow it when other flows are not viable.",
      "ja": "リソース所有者のパスワード資格情報付与タイプは、リソース所有者がクライアントと信頼関係を持っている場合（デバイスのオペレーティングシステムや非常に特権のあるアプリケーションなど）に適しています。許可サーバーは、この付与タイプを有効にする際に特別な注意を払い、他のフローが実行可能でない場合にのみ許可する必要があります。"
    },
    {
      "indent": 3,
      "text": "This grant type is suitable for clients capable of obtaining the resource owner's credentials (username and password, typically using an interactive form). It is also used to migrate existing clients using direct authentication schemes such as HTTP Basic or Digest authentication to OAuth by converting the stored credentials to an access token.",
      "ja": "この付与タイプは、リソース所有者の資格情報（ユーザー名とパスワード、通常はインタラクティブフォームを使用）を取得できるクライアントに適しています。また、格納されている資格情報をアクセストークンに変換することにより、HTTP基本認証やダイジェスト認証などの直接認証スキームを使用して既存のクライアントをOAuthに移行するためにも使用されます。"
    },
    {
      "indent": 5,
      "text": "+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     v\n     |    Resource Owner\n    (A) Password Credentials\n     |\n     v\n+---------+                                  +---------------+\n|         |>--(B)---- Resource Owner ------->|               |\n|         |         Password Credentials     | Authorization |\n| Client  |                                  |     Server    |\n|         |<--(C)---- Access Token ---------<|               |\n|         |    (w/ Optional Refresh Token)   |               |\n+---------+                                  +---------------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 5: Resource Owner Password Credentials Flow",
      "ja": "図5：リソース所有者のパスワード資格情報フロー"
    },
    {
      "indent": 3,
      "text": "The flow illustrated in Figure 5 includes the following steps:",
      "ja": "図5に示されているフローには、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The resource owner provides the client with its username and password.",
      "ja": "（A）リソース所有者は、クライアントにユーザー名とパスワードを提供します。"
    },
    {
      "indent": 3,
      "text": "(B) The client requests an access token from the authorization server's token endpoint by including the credentials received from the resource owner. When making the request, the client authenticates with the authorization server.",
      "ja": "（B）クライアントは、リソース所有者から受け取った資格情報を含めることにより、認証サーバーのトークンエンドポイントにアクセストークンを要求します。要求を行うとき、クライアントは許可サーバーで認証します。"
    },
    {
      "indent": 3,
      "text": "(C) The authorization server authenticates the client and validates the resource owner credentials, and if valid, issues an access token.",
      "ja": "（C）許可サーバーはクライアントを認証し、リソース所有者の資格情報を検証し、有効な場合はアクセストークンを発行します。"
    },
    {
      "indent": 0,
      "text": "4.3.1. Authorization Request and Response",
      "section_title": true,
      "ja": "4.3.1. 認可リクエストとレスポンス"
    },
    {
      "indent": 3,
      "text": "The method through which the client obtains the resource owner credentials is beyond the scope of this specification. The client MUST discard the credentials once an access token has been obtained.",
      "ja": "クライアントがリソース所有者の資格情報を取得する方法は、この仕様の範囲外です。アクセストークンを取得したら、クライアントは資格情報を破棄する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.3.2. Access Token Request",
      "section_title": true,
      "ja": "4.3.2. アクセストークンリクエスト"
    },
    {
      "indent": 3,
      "text": "The client makes a request to the token endpoint by adding the following parameters using the \"application/x-www-form-urlencoded\" format per Appendix B with a character encoding of UTF-8 in the HTTP request entity-body:",
      "ja": "クライアントは、付録Bの「application/x-www-form-urlencoded」形式を使用し、HTTPリクエストのエンティティ本体にUTF-8の文字エンコーディングを使用して次のパラメータを追加することにより、トークンエンドポイントにリクエストを送信します。"
    },
    {
      "indent": 3,
      "text": "grant_type REQUIRED. Value MUST be set to \"password\".",
      "ja": "grant_typeは必須です。値は「パスワード」に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "username REQUIRED. The resource owner username.",
      "ja": "ユーザー名が必要です。リソース所有者のユーザー名。"
    },
    {
      "indent": 3,
      "text": "password REQUIRED. The resource owner password.",
      "ja": "パスワードが必要。リソース所有者のパスワード。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL. The scope of the access request as described by Section 3.3.",
      "ja": "スコープオプション。セクション3.3で説明されているアクセス要求の範囲。"
    },
    {
      "indent": 3,
      "text": "If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server as described in Section 3.2.1.",
      "ja": "クライアントの種類が機密である場合、またはクライアントにクライアント資格情報が発行された（または他の認証要件が割り当てられた）場合、クライアントは、セクション3.2.1で説明されているように認可サーバーで認証する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはトランスポート層セキュリティを使用して次のHTTPリクエストを作成します（表示目的でのみ追加の改行を使用）。"
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&username=johndoe&password=A3ddj3w",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MUST:",
      "ja": "認可サーバーは、"
    },
    {
      "indent": 3,
      "text": "o require client authentication for confidential clients or for any client that was issued client credentials (or with other authentication requirements),",
      "ja": "o 機密クライアントまたはクライアント資格情報（またはその他の認証要件）が発行されたクライアントに対してクライアント認証を要求する、"
    },
    {
      "indent": 3,
      "text": "o authenticate the client if client authentication is included, and",
      "ja": "o クライアント認証が含まれている場合は、クライアントを認証します。"
    },
    {
      "indent": 3,
      "text": "o validate the resource owner password credentials using its existing password validation algorithm.",
      "ja": "o 既存のパスワード検証アルゴリズムを使用して、リソース所有者のパスワード資格情報を検証します。"
    },
    {
      "indent": 3,
      "text": "Since this access token request utilizes the resource owner's password, the authorization server MUST protect the endpoint against brute force attacks (e.g., using rate-limitation or generating alerts).",
      "ja": "このアクセストークン要求はリソース所有者のパスワードを利用するため、認可サーバーは、ブルートフォース攻撃（たとえば、レート制限の使用やアラートの生成）からエンドポイントを保護する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.3.3. Access Token Response",
      "section_title": true,
      "ja": "4.3.3. アクセストークンの応答"
    },
    {
      "indent": 3,
      "text": "If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token as described in Section 5.1. If the request failed client authentication or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "アクセストークン要求が有効で認可されている場合、セクション5.1で説明されているように、認可サーバーはアクセストークンとオプションの更新トークンを発行します。リクエストがクライアント認証に失敗したか無効である場合、セクション5.2で説明されているように、認可サーバーはエラー応答を返します。"
    },
    {
      "indent": 3,
      "text": "An example successful response:",
      "ja": "成功した応答の例："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n  \"token_type\":\"example\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n  \"example_parameter\":\"example_value\"\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.4. Client Credentials Grant",
      "section_title": true,
      "ja": "4.4. クライアント資格情報の付与"
    },
    {
      "indent": 3,
      "text": "The client can request an access token using only its client credentials (or other supported means of authentication) when the client is requesting access to the protected resources under its control, or those of another resource owner that have been previously arranged with the authorization server (the method of which is beyond the scope of this specification).",
      "ja": "クライアントは、クライアントの制御下にある保護されたリソース、または以前に認可サーバーで調整された別のリソース所有者のリソースへのアクセスを要求するときに、クライアント資格情報（またはその他のサポートされている認証方法）のみを使用してアクセストークンを要求できます（メソッドはこの仕様の範囲外です）。"
    },
    {
      "indent": 3,
      "text": "The client credentials grant type MUST only be used by confidential clients.",
      "ja": "クライアント資格情報付与タイプは、機密クライアントのみが使用する必要があります。"
    },
    {
      "indent": 5,
      "text": "+---------+                                  +---------------+\n|         |                                  |               |\n|         |>--(A)- Client Authentication --->| Authorization |\n| Client  |                                  |     Server    |\n|         |<--(B)---- Access Token ---------<|               |\n|         |                                  |               |\n+---------+                                  +---------------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 6: Client Credentials Flow",
      "ja": "図6：クライアント資格情報フロー"
    },
    {
      "indent": 3,
      "text": "The flow illustrated in Figure 6 includes the following steps:",
      "ja": "図6に示すフローには、以下のステップが含まれています。"
    },
    {
      "indent": 3,
      "text": "(A) The client authenticates with the authorization server and requests an access token from the token endpoint.",
      "ja": "（A）クライアントは認可サーバーで認証し、トークンエンドポイントにアクセストークンを要求します。"
    },
    {
      "indent": 3,
      "text": "(B) The authorization server authenticates the client, and if valid, issues an access token.",
      "ja": "（B）許可サーバーはクライアントを認証し、有効な場合はアクセストークンを発行します。"
    },
    {
      "indent": 0,
      "text": "4.4.1. Authorization Request and Response",
      "section_title": true,
      "ja": "4.4.1. 認可リクエストとレスポンス"
    },
    {
      "indent": 3,
      "text": "Since the client authentication is used as the authorization grant, no additional authorization request is needed.",
      "ja": "クライアント認証は許可付与として使用されるため、追加の許可要求は必要ありません。"
    },
    {
      "indent": 0,
      "text": "4.4.2. Access Token Request",
      "section_title": true,
      "ja": "4.4.2. アクセストークンリクエスト"
    },
    {
      "indent": 3,
      "text": "The client makes a request to the token endpoint by adding the following parameters using the \"application/x-www-form-urlencoded\" format per Appendix B with a character encoding of UTF-8 in the HTTP request entity-body:",
      "ja": "クライアントは、付録Bの「application/x-www-form-urlencoded」形式を使用し、HTTPリクエストのエンティティ本体にUTF-8の文字エンコーディングを使用して次のパラメータを追加することにより、トークンエンドポイントにリクエストを送信します。"
    },
    {
      "indent": 3,
      "text": "grant_type REQUIRED. Value MUST be set to \"client_credentials\".",
      "ja": "grant_typeは必須です。値は「client_credentials」に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL. The scope of the access request as described by Section 3.3.",
      "ja": "スコープオプション。セクション3.3で説明されているアクセス要求の範囲。"
    },
    {
      "indent": 3,
      "text": "The client MUST authenticate with the authorization server as described in Section 3.2.1.",
      "ja": "セクション3.2.1で説明されているように、クライアントは認可サーバーで認証しなければなりません。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはトランスポート層セキュリティを使用して次のHTTPリクエストを作成します（表示目的でのみ追加の改行を使用）。"
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MUST authenticate the client.",
      "ja": "認可サーバーはクライアントを認証する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.4.3. Access Token Response",
      "section_title": true,
      "ja": "4.4.3. アクセストークンの応答"
    },
    {
      "indent": 3,
      "text": "If the access token request is valid and authorized, the authorization server issues an access token as described in Section 5.1. A refresh token SHOULD NOT be included. If the request failed client authentication or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "アクセストークン要求が有効で認可されている場合、セクション5.1で説明されているように、認可サーバーがアクセストークンを発行します。更新トークンは含めないでください。リクエストがクライアント認証に失敗したか無効である場合、セクション5.2で説明されているように、認可サーバーはエラー応答を返します。"
    },
    {
      "indent": 3,
      "text": "An example successful response:",
      "ja": "成功した応答の例："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n  \"token_type\":\"example\",\n  \"expires_in\":3600,\n  \"example_parameter\":\"example_value\"\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.5. Extension Grants",
      "section_title": true,
      "ja": "4.5. 拡張助成金"
    },
    {
      "indent": 3,
      "text": "The client uses an extension grant type by specifying the grant type using an absolute URI (defined by the authorization server) as the value of the \"grant_type\" parameter of the token endpoint, and by adding any additional parameters necessary.",
      "ja": "クライアントは拡張許可タイプを使用します。トークンエンドポイントの「grant_type」パラメーターの値として絶対URI（認可サーバーで定義）を使用して許可タイプを指定し、必要な追加パラメーターを追加します。"
    },
    {
      "indent": 3,
      "text": "For example, to request an access token using a Security Assertion Markup Language (SAML) 2.0 assertion grant type as defined by [OAuth-SAML2], the client could make the following HTTP request using TLS (with extra line breaks for display purposes only):",
      "ja": "たとえば、[OAuth-SAML2]で定義されているセキュリティアサーションマークアップ言語（SAML）2.0アサーション付与タイプを使用してアクセストークンをリクエストする場合、クライアントはTLSを使用して次のHTTPリクエストを行うことができます（表示目的でのみ改行を追加） ："
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded",
      "raw": true
    },
    {
      "indent": 5,
      "text": "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-\nbearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU\n[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-",
      "raw": true
    },
    {
      "indent": 3,
      "text": "If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token as described in Section 5.1. If the request failed client authentication or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "アクセストークン要求が有効で認可されている場合、セクション5.1で説明されているように、認可サーバーはアクセストークンとオプションの更新トークンを発行します。リクエストがクライアント認証に失敗したか無効である場合、セクション5.2で説明されているように、認可サーバーはエラー応答を返します。"
    },
    {
      "indent": 0,
      "text": "5. Issuing an Access Token",
      "section_title": true,
      "ja": "5. アクセストークンの発行"
    },
    {
      "indent": 3,
      "text": "If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token as described in Section 5.1. If the request failed client authentication or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "アクセストークン要求が有効で認可されている場合、セクション5.1で説明されているように、認可サーバーはアクセストークンとオプションの更新トークンを発行します。リクエストがクライアント認証に失敗したか無効である場合、セクション5.2で説明されているように、認可サーバーはエラー応答を返します。"
    },
    {
      "indent": 0,
      "text": "5.1. Successful Response",
      "section_title": true,
      "ja": "5.1. 成功した応答"
    },
    {
      "indent": 3,
      "text": "The authorization server issues an access token and optional refresh token, and constructs the response by adding the following parameters to the entity-body of the HTTP response with a 200 (OK) status code:",
      "ja": "認可サーバーはアクセストークンとオプションの更新トークンを発行し、次のパラメーターを200（OK）ステータスコードでHTTP応答のエンティティ本体に追加することにより、応答を構築します。"
    },
    {
      "indent": 3,
      "text": "access_token REQUIRED. The access token issued by the authorization server.",
      "ja": "access_tokenは必須です。認可サーバーによって発行されたアクセストークン。"
    },
    {
      "indent": 3,
      "text": "token_type REQUIRED. The type of the token issued as described in Section 7.1. Value is case insensitive.",
      "ja": "token_typeは必須です。セクション7.1の説明に従って発行されたトークンのタイプ。値は大文字と小文字が区別されません。"
    },
    {
      "indent": 3,
      "text": "expires_in RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.",
      "ja": "expires_inは推奨です。アクセストークンの有効期間（秒単位）。たとえば、値「3600」は、応答が生成されてから1時間でアクセストークンが期限切れになることを示します。省略した場合、認可サーバーは他の手段で有効期限を提供するか、デフォルト値を文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "refresh_token OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same authorization grant as described in Section 6.",
      "ja": "refresh_token オプション。更新トークン。セクション6で説明されているのと同じ認可付与を使用して新しいアクセストークンを取得するために使用できます。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of the access token as described by Section 3.3.",
      "ja": "OPTIONAL（クライアントによって要求されたスコープと同一の場合）。それ以外の場合は必須です。セクション3.3で説明されているアクセストークンのスコープ。"
    },
    {
      "indent": 3,
      "text": "The parameters are included in the entity-body of the HTTP response using the \"application/json\" media type as defined by [RFC4627]. The parameters are serialized into a JavaScript Object Notation (JSON) structure by adding each parameter at the highest structure level. Parameter names and string values are included as JSON strings. Numerical values are included as JSON numbers. The order of parameters does not matter and can vary.",
      "ja": "パラメータは、[RFC4627]で定義されている「application / json」メディアタイプを使用して、HTTP応答のエンティティ本体に含まれます。パラメータは、最上位の構造レベルで各パラメータを追加することにより、JavaScript Object Notation（JSON）構造にシリアル化されます。パラメータ名と文字列値はJSON文字列として含まれます。数値はJSON番号として含まれます。パラメータの順序は重要ではなく、異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST include the HTTP \"Cache-Control\" response header field [RFC2616] with a value of \"no-store\" in any response containing tokens, credentials, or other sensitive information, as well as the \"Pragma\" response header field [RFC2616] with a value of \"no-cache\".",
      "ja": "認可サーバーは、「プラグマ」応答ヘッダーフィールドだけでなく、トークン、資格情報、またはその他の機密情報を含むすべての応答に、「no-store」の値を持つHTTP \"Cache-Control\"応答ヘッダーフィールド[RFC2616]を含める必要があります[RFC2616]の値は「no-cache」です。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n  \"token_type\":\"example\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n  \"example_parameter\":\"example_value\"\n}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The client MUST ignore unrecognized value names in the response. The sizes of tokens and other values received from the authorization server are left undefined. The client should avoid making assumptions about value sizes. The authorization server SHOULD document the size of any value it issues.",
      "ja": "クライアントは、応答で認識されない値の名前を無視する必要があります。認可サーバーから受け取ったトークンのサイズやその他の値は未定義のままです。クライアントは、値のサイズに関する仮定を行わないようにする必要があります。認可サーバーは、発行する値のサイズを文書化する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "5.2. Error Response",
      "section_title": true,
      "ja": "5.2. エラー応答"
    },
    {
      "indent": 3,
      "text": "The authorization server responds with an HTTP 400 (Bad Request) status code (unless specified otherwise) and includes the following parameters with the response:",
      "ja": "認可サーバーは、HTTP 400（Bad Request）ステータスコードで応答し（特に指定がない限り）、次のパラメーターを応答に含めます。"
    },
    {
      "indent": 3,
      "text": "error REQUIRED. A single ASCII [USASCII] error code from the following:",
      "ja": "errorは必須です。次の1つのASCII [USASCII] エラーコード："
    },
    {
      "indent": 9,
      "text": "invalid_request The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.",
      "ja": "invalid_request リクエストに必須パラメーターが欠落している、サポートされていないパラメーター値（付与タイプ以外）が含まれている、パラメーターが繰り返されている、複数の資格情報が含まれている、クライアントを認証するために複数のメカニズムを利用している、またはその他の形で不正である"
    },
    {
      "indent": 9,
      "text": "invalid_client Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.",
      "ja": "invalid_client クライアント認証が失敗しました（不明なクライアント、クライアント認証が含まれていない、サポートされていない認証方法など）。認可サーバーは、サポートされているHTTP認証方式を示すHTTP 401（無許可）ステータスコードを返す場合があります。クライアントが \"Authorization\"リクエストヘッダーフィールドを介して認証を試みた場合、認証サーバーはHTTP 401（Unauthorized）ステータスコードで応答し、クライアントが使用する認証スキームと一致する \"WWW-Authenticate\"レスポンスヘッダーフィールドを含める必要があります。"
    },
    {
      "indent": 9,
      "text": "invalid_grant The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.",
      "ja": "invalid_grant 指定された認可付与（認可コード、リソース所有者の資格情報など）または更新トークンが無効であるか、期限切れであるか、取り消されているか、認可リクエストで使用されているリダイレクトURIと一致しないか、別のクライアントに発行されました。"
    },
    {
      "indent": 9,
      "text": "unauthorized_client The authenticated client is not authorized to use this authorization grant type.",
      "ja": "authorized_client 認証されたクライアントは、この許可付与タイプの使用を許可されていません。"
    },
    {
      "indent": 9,
      "text": "unsupported_grant_type The authorization grant type is not supported by the authorization server.",
      "ja": "unsupported_grant_type 許可付与タイプは、許可サーバーではサポートされていません。"
    },
    {
      "indent": 9,
      "text": "invalid_scope The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.",
      "ja": "invalid_scope リクエストされたスコープが無効、不明、不正、またはリソース所有者から付与されたスコープを超えています。"
    },
    {
      "indent": 9,
      "text": "Values for the \"error\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "「エラー」パラメータの値には、セット%x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_description OPTIONAL. Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred. Values for the \"error_description\" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "error_description オプション。追加情報を提供する人間が読めるASCII [USASCII]テキスト。発生したエラーをクライアント開発者が理解するのに役立ちます。 \"error_description\"パラメータの値には、セット%x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "error_uri OPTIONAL. A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error. Values for the \"error_uri\" parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.",
      "ja": "error_uri オプション。エラーに関する情報を含む人間が読めるWebページを識別するURI。クライアント開発者にエラーに関する追加情報を提供するために使用されます。 \"error_uri\"パラメータの値は、URI参照構文に準拠する必要があるため、セット%x21 / %x23-5B / %x5D-7Eの外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "The parameters are included in the entity-body of the HTTP response using the \"application/json\" media type as defined by [RFC4627]. The parameters are serialized into a JSON structure by adding each parameter at the highest structure level. Parameter names and string values are included as JSON strings. Numerical values are included as JSON numbers. The order of parameters does not matter and can vary.",
      "ja": "パラメータは、[RFC4627]で定義されている「application / json」メディアタイプを使用して、HTTP応答のエンティティ本体に含まれます。パラメータは、最上位の構造レベルで各パラメータを追加することにより、JSON構造にシリアル化されます。パラメータ名と文字列値はJSON文字列として含まれます。数値はJSON番号として含まれます。パラメータの順序は重要ではなく、異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 400 Bad Request\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"error\":\"invalid_request\"\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6. Refreshing an Access Token",
      "section_title": true,
      "ja": "6. アクセストークンの更新"
    },
    {
      "indent": 3,
      "text": "If the authorization server issued a refresh token to the client, the client makes a refresh request to the token endpoint by adding the following parameters using the \"application/x-www-form-urlencoded\" format per Appendix B with a character encoding of UTF-8 in the HTTP request entity-body:",
      "ja": "認可サーバーがクライアントに更新トークンを発行した場合、クライアントは、付録Bの「application/x-www-form-urlencoded」形式とUTFの文字エンコーディングを使用して次のパラメーターを追加することにより、トークンエンドポイントに更新リクエストを送信します。 -8 HTTPリクエストエンティティボディ："
    },
    {
      "indent": 3,
      "text": "grant_type REQUIRED. Value MUST be set to \"refresh_token\".",
      "ja": "grant_typeは必須です。値は「refresh_token」に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "refresh_token REQUIRED. The refresh token issued to the client.",
      "ja": "refresh_tokenは必須です。クライアントに発行された更新トークン。"
    },
    {
      "indent": 3,
      "text": "scope OPTIONAL. The scope of the access request as described by Section 3.3. The requested scope MUST NOT include any scope not originally granted by the resource owner, and if omitted is treated as equal to the scope originally granted by the resource owner.",
      "ja": "scope オプション。セクション3.3で説明されているアクセス要求の範囲。リクエストされたスコープには、リソースオーナーによって本来付与されていないスコープを含めてはならず（MUST NOT）、省略すると、リソースオーナーによって当初付与されたスコープと同じものとして扱われます。"
    },
    {
      "indent": 3,
      "text": "Because refresh tokens are typically long-lasting credentials used to request additional access tokens, the refresh token is bound to the client to which it was issued. If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server as described in Section 3.2.1.",
      "ja": "更新トークンは通常、追加のアクセストークンを要求するために使用される長期的な資格情報であるため、更新トークンは、それが発行されたクライアントにバインドされます。クライアントの種類が機密である場合、またはクライアントにクライアント資格情報が発行された（または他の認証要件が割り当てられた）場合、クライアントは、セクション3.2.1で説明されているように認可サーバーで認証する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security (with extra line breaks for display purposes only):",
      "ja": "たとえば、クライアントはトランスポート層セキュリティを使用して次のHTTPリクエストを作成します（表示目的でのみ追加の改行を使用）。"
    },
    {
      "indent": 5,
      "text": "POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authorization server MUST:",
      "ja": "認可サーバーは、"
    },
    {
      "indent": 3,
      "text": "o require client authentication for confidential clients or for any client that was issued client credentials (or with other authentication requirements),",
      "ja": "o 機密クライアントまたはクライアント資格情報（またはその他の認証要件）が発行されたクライアントに対してクライアント認証を要求する、"
    },
    {
      "indent": 3,
      "text": "o authenticate the client if client authentication is included and ensure that the refresh token was issued to the authenticated client, and",
      "ja": "o クライアント認証が含まれている場合はクライアントを認証し、認証されたクライアントに更新トークンが発行されたことを確認します。"
    },
    {
      "indent": 3,
      "text": "o validate the refresh token.",
      "ja": "o 更新トークンを検証します。"
    },
    {
      "indent": 3,
      "text": "If valid and authorized, the authorization server issues an access token as described in Section 5.1. If the request failed verification or is invalid, the authorization server returns an error response as described in Section 5.2.",
      "ja": "有効で認可されている場合、セクション5.1で説明されているように、認可サーバーはアクセストークンを発行します。リクエストが検証に失敗したか無効な場合、セクション5.2で説明されているように、認証サーバーはエラー応答を返します。"
    },
    {
      "indent": 3,
      "text": "The authorization server MAY issue a new refresh token, in which case the client MUST discard the old refresh token and replace it with the new refresh token. The authorization server MAY revoke the old refresh token after issuing a new refresh token to the client. If a new refresh token is issued, the refresh token scope MUST be identical to that of the refresh token included by the client in the request.",
      "ja": "認可サーバーは新しいリフレッシュトークンを発行する場合があります。その場合、クライアントは古いリフレッシュトークンを破棄し、新しいリフレッシュトークンに置き換える必要があります。認可サーバーは、クライアントに新しいリフレッシュトークンを発行した後、古いリフレッシュトークンを取り消す場合があります。新しいリフレッシュトークンが発行される場合、リフレッシュトークンのスコープは、クライアントがリクエストに含めるリフレッシュトークンのスコープと同じでなければなりません。"
    },
    {
      "indent": 0,
      "text": "7. Accessing Protected Resources",
      "section_title": true,
      "ja": "7. 保護されたリソースへのアクセス"
    },
    {
      "indent": 3,
      "text": "The client accesses protected resources by presenting the access token to the resource server. The resource server MUST validate the access token and ensure that it has not expired and that its scope covers the requested resource. The methods used by the resource server to validate the access token (as well as any error responses) are beyond the scope of this specification but generally involve an interaction or coordination between the resource server and the authorization server.",
      "ja": "クライアントは、リソースサーバーにアクセストークンを提示することにより、保護されたリソースにアクセスします。リソースサーバーはアクセストークンを検証し、有効期限が切れていないこと、およびそのスコープが要求されたリソースをカバーしていることを確認する必要があります。リソースサーバーがアクセストークン（およびエラー応答）を検証するために使用する方法は、この仕様の範囲を超えていますが、通常、リソースサーバーと認可サーバーの間の相互作用または調整が含まれます。"
    },
    {
      "indent": 3,
      "text": "The method in which the client utilizes the access token to authenticate with the resource server depends on the type of access token issued by the authorization server. Typically, it involves using the HTTP \"Authorization\" request header field [RFC2617] with an authentication scheme defined by the specification of the access token type used, such as [RFC6750].",
      "ja": "クライアントがアクセストークンを使用してリソースサーバーで認証する方法は、認可サーバーが発行するアクセストークンの種類によって異なります。通常、[RFC6750]のように、使用するアクセストークンタイプの仕様で定義された認証方式でHTTP \"Authorization\"リクエストヘッダーフィールド[RFC2617]を使用します。"
    },
    {
      "indent": 0,
      "text": "7.1. Access Token Types",
      "section_title": true,
      "ja": "7.1. アクセストークンのタイプ"
    },
    {
      "indent": 3,
      "text": "The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes). The client MUST NOT use an access token if it does not understand the token type.",
      "ja": "アクセストークンタイプは、アクセストークンを正常に利用して保護されたリソース要求を行うために必要な情報をクライアントに提供します（タイプ固有の属性とともに）。クライアントは、トークンタイプを理解しない場合、アクセストークンを使用してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "For example, the \"bearer\" token type defined in [RFC6750] is utilized by simply including the access token string in the request:",
      "ja": "たとえば、[RFC6750]で定義されている「ベアラー」トークンタイプは、リクエストにアクセストークン文字列を含めるだけで利用できます。"
    },
    {
      "indent": 5,
      "text": "GET /resource/1 HTTP/1.1\nHost: example.com\nAuthorization: Bearer mF_9.B5f-4.1JqM",
      "raw": true
    },
    {
      "indent": 3,
      "text": "while the \"mac\" token type defined in [OAuth-HTTP-MAC] is utilized by issuing a Message Authentication Code (MAC) key together with the access token that is used to sign certain components of the HTTP requests:",
      "ja": "一方、[OAuth-HTTP-MAC]で定義された「mac」トークンタイプは、HTTPリクエストの特定のコンポーネントの署名に使用されるアクセストークンとともにメッセージ認証コード（MAC）キーを発行することで利用されます。"
    },
    {
      "indent": 5,
      "text": "GET /resource/1 HTTP/1.1\nHost: example.com\nAuthorization: MAC id=\"h480djs93hd8\",\n                   nonce=\"274312:dj83hs9s\",\n                   mac=\"kDZvddkndxvhGRXZhvuDjEWhGeE=\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The above examples are provided for illustration purposes only. Developers are advised to consult the [RFC6750] and [OAuth-HTTP-MAC] specifications before use.",
      "ja": "上記の例は、説明のみを目的として提供されています。開発者は、使用する前に[RFC6750]および[OAuth-HTTP-MAC]仕様を参照することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "Each access token type definition specifies the additional attributes (if any) sent to the client together with the \"access_token\" response parameter. It also defines the HTTP authentication method used to include the access token when making a protected resource request.",
      "ja": "各アクセストークンタイプの定義では、「access_token」応答パラメータとともにクライアントに送信される追加の属性（存在する場合）を指定します。また、保護されたリソース要求を行うときにアクセストークンを含めるために使用されるHTTP認証方法も定義します。"
    },
    {
      "indent": 0,
      "text": "7.2. Error Response",
      "section_title": true,
      "ja": "7.2. エラー応答"
    },
    {
      "indent": 3,
      "text": "If a resource access request fails, the resource server SHOULD inform the client of the error. While the specifics of such error responses are beyond the scope of this specification, this document establishes a common registry in Section 11.4 for error values to be shared among OAuth token authentication schemes.",
      "ja": "リソースアクセス要求が失敗した場合、リソースサーバーはクライアントにエラーを通知する必要があります（SHOULD）。このようなエラー応答の詳細はこの仕様の範囲を超えていますが、このドキュメントでは、エラー値をOAuthトークン認証スキーム間で共有するために、セクション11.4で共通のレジストリを確立しています。"
    },
    {
      "indent": 3,
      "text": "New authentication schemes designed primarily for OAuth token authentication SHOULD define a mechanism for providing an error status code to the client, in which the error values allowed are registered in the error registry established by this specification.",
      "ja": "主にOAuthトークン認証用に設計された新しい認証スキームは、クライアントにエラーステータスコードを提供するためのメカニズムを定義する必要があります（SHOULD）。許可されるエラー値は、この仕様で確立されたエラーレジストリに登録されます。"
    },
    {
      "indent": 3,
      "text": "Such schemes MAY limit the set of valid error codes to a subset of the registered values. If the error code is returned using a named parameter, the parameter name SHOULD be \"error\".",
      "ja": "そのようなスキームは、有効なエラーコードのセットを登録された値のサブセットに制限するかもしれません。名前付きパラメーターを使用してエラーコードが返される場合、パラメーター名は「エラー」にする必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Other schemes capable of being used for OAuth token authentication, but not primarily designed for that purpose, MAY bind their error values to the registry in the same manner.",
      "ja": "OAuthトークン認証に使用できる他のスキームは主にその目的のために設計されていませんが、同じ方法でエラー値をレジストリにバインドできます（MAY）。"
    },
    {
      "indent": 3,
      "text": "New authentication schemes MAY choose to also specify the use of the \"error_description\" and \"error_uri\" parameters to return error information in a manner parallel to their usage in this specification.",
      "ja": "新しい認証スキームは、「error_description」および「error_uri」パラメータの使用を指定して、この仕様での使用と並行した方法でエラー情報を返すことを選択する場合があります。"
    },
    {
      "indent": 0,
      "text": "8. Extensibility",
      "section_title": true,
      "ja": "8. 拡張性"
    },
    {
      "indent": 0,
      "text": "8.1. Defining Access Token Types",
      "section_title": true,
      "ja": "8.1. アクセストークンタイプの定義"
    },
    {
      "indent": 3,
      "text": "Access token types can be defined in one of two ways: registered in the Access Token Types registry (following the procedures in Section 11.1), or by using a unique absolute URI as its name.",
      "ja": "アクセストークンタイプは、アクセストークンタイプレジストリに登録するか（セクション11.1の手順に従って）、または名前として一意の絶対URIを使用して、2つの方法のいずれかで定義できます。"
    },
    {
      "indent": 3,
      "text": "Types utilizing a URI name SHOULD be limited to vendor-specific implementations that are not commonly applicable, and are specific to the implementation details of the resource server where they are used.",
      "ja": "URI名を利用するタイプは、一般に適用できないベンダー固有の実装に限定する必要があり、それらが使用されるリソースサーバーの実装の詳細に固有です。"
    },
    {
      "indent": 3,
      "text": "All other types MUST be registered. Type names MUST conform to the type-name ABNF. If the type definition includes a new HTTP authentication scheme, the type name SHOULD be identical to the HTTP authentication scheme name (as defined by [RFC2617]). The token type \"example\" is reserved for use in examples.",
      "ja": "他のすべてのタイプは登録する必要があります。タイプ名はタイプ名ABNFに準拠する必要があります。タイプ定義に新しいHTTP認証スキームが含まれる場合、タイプ名は（[RFC2617]で定義されている）HTTP認証スキーム名と同一である必要があります（SHOULD）。トークンタイプ「example」は、例で使用するために予約されています。"
    },
    {
      "indent": 5,
      "text": "type-name  = 1*name-char\nname-char  = \"-\" / \".\" / \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 0,
      "text": "8.2. Defining New Endpoint Parameters",
      "section_title": true,
      "ja": "8.2. 新しいエンドポイントパラメータの定義"
    },
    {
      "indent": 3,
      "text": "New request or response parameters for use with the authorization endpoint or the token endpoint are defined and registered in the OAuth Parameters registry following the procedure in Section 11.2.",
      "ja": "セクション11.2の手順に従って、認証エンドポイントまたはトークンエンドポイントで使用する新しい要求または応答パラメーターが定義され、OAuthパラメーターレジストリに登録されます。"
    },
    {
      "indent": 3,
      "text": "Parameter names MUST conform to the param-name ABNF, and parameter values syntax MUST be well-defined (e.g., using ABNF, or a reference to the syntax of an existing parameter).",
      "ja": "パラメータ名はparam-name ABNFに準拠する必要があり、パラメータ値の構文は明確に定義されている必要があります（たとえば、ABNFを使用するか、既存のパラメータの構文への参照）。"
    },
    {
      "indent": 5,
      "text": "param-name  = 1*name-char\nname-char   = \"-\" / \".\" / \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Unregistered vendor-specific parameter extensions that are not commonly applicable and that are specific to the implementation details of the authorization server where they are used SHOULD utilize a vendor-specific prefix that is not likely to conflict with other registered values (e.g., begin with 'companyname_').",
      "ja": "一般に適用されず、それらが使用される認可サーバーの実装の詳細に固有の未登録のベンダー固有のパラメーター拡張は、他の登録済みの値と競合する可能性が低いベンダー固有のプレフィックスを使用する必要があります（たとえば、「会社名_'）。"
    },
    {
      "indent": 0,
      "text": "8.3. Defining New Authorization Grant Types",
      "section_title": true,
      "ja": "8.3. 新しい許可付与タイプの定義"
    },
    {
      "indent": 3,
      "text": "New authorization grant types can be defined by assigning them a unique absolute URI for use with the \"grant_type\" parameter. If the extension grant type requires additional token endpoint parameters, they MUST be registered in the OAuth Parameters registry as described by Section 11.2.",
      "ja": "「grant_type」パラメータで使用する一意の絶対URIを割り当てることにより、新しい許可付与タイプを定義できます。拡張付与タイプで追加のトークンエンドポイントパラメータが必要な場合は、セクション11.2で説明されているように、OAuthパラメータレジストリに登録する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.4. Defining New Authorization Endpoint Response Types",
      "section_title": true,
      "ja": "8.4. 新しい認可エンドポイントの応答タイプの定義"
    },
    {
      "indent": 3,
      "text": "New response types for use with the authorization endpoint are defined and registered in the Authorization Endpoint Response Types registry following the procedure in Section 11.3. Response type names MUST conform to the response-type ABNF.",
      "ja": "セクション11.3の手順に従って、認可エンドポイントで使用する新しい応答タイプが定義され、認可エンドポイント応答タイプレジストリに登録されます。応答タイプ名は、応答タイプABNFに準拠する必要があります。"
    },
    {
      "indent": 5,
      "text": "response-type  = response-name *( SP response-name )\nresponse-name  = 1*response-char\nresponse-char  = \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 3,
      "text": "If a response type contains one or more space characters (%x20), it is compared as a space-delimited list of values in which the order of values does not matter. Only one order of values can be registered, which covers all other arrangements of the same set of values.",
      "ja": "応答タイプに1つ以上のスペース文字（%x20）が含まれている場合、それは値の順序が重要ではない、スペースで区切られた値のリストとして比較されます。同じ値のセットの他のすべての配置をカバーする値の1つの順序のみを登録できます。"
    },
    {
      "indent": 3,
      "text": "For example, the response type \"token code\" is left undefined by this specification. However, an extension can define and register the \"token code\" response type. Once registered, the same combination cannot be registered as \"code token\", but both values can be used to denote the same response type.",
      "ja": "たとえば、応答タイプ「トークンコード」は、この仕様では未定義のままです。ただし、拡張機能は「トークンコード」応答タイプを定義および登録できます。一度登録すると、同じ組み合わせを「コードトークン」として登録することはできませんが、両方の値を使用して同じ応答タイプを表すことができます。"
    },
    {
      "indent": 0,
      "text": "8.5. Defining Additional Error Codes",
      "section_title": true,
      "ja": "8.5. 追加のエラーコードの定義"
    },
    {
      "indent": 3,
      "text": "In cases where protocol extensions (i.e., access token types, extension parameters, or extension grant types) require additional error codes to be used with the authorization code grant error response (Section 4.1.2.1), the implicit grant error response (Section 4.2.2.1), the token error response (Section 5.2), or the resource access error response (Section 7.2), such error codes MAY be defined.",
      "ja": "プロトコル拡張（つまり、アクセストークンタイプ、拡張パラメーター、または拡張付与タイプ）で、認証コード付与エラー応答（セクション4.1.2.1）で使用する追加のエラーコードが必要な場合、暗黙の付与エラー応答（セクション4.2。 2.1）、トークンエラーレスポンス（セクション5.2）、またはリソースアクセスエラーレスポンス（セクション7.2）では、このようなエラーコードを定義できます。"
    },
    {
      "indent": 3,
      "text": "Extension error codes MUST be registered (following the procedures in Section 11.4) if the extension they are used in conjunction with is a registered access token type, a registered endpoint parameter, or an extension grant type. Error codes used with unregistered extensions MAY be registered.",
      "ja": "拡張エラーコードは、それらが一緒に使用される拡張が登録済みアクセストークンタイプ、登録済みエンドポイントパラメータ、または拡張付与タイプである場合、登録する必要があります（セクション11.4の手順に従って）。未登録の拡張機能で使用されるエラーコードは登録される場合があります。"
    },
    {
      "indent": 3,
      "text": "Error codes MUST conform to the error ABNF and SHOULD be prefixed by an identifying name when possible. For example, an error identifying an invalid value set to the extension parameter \"example\" SHOULD be named \"example_invalid\".",
      "ja": "エラーコードはエラーABNFに準拠しなければならず（MUST）、可能な場合は識別名を前に付ける必要があります（SHOULD）。たとえば、拡張パラメーター「example」に設定された無効な値を識別するエラーは、「example_invalid」という名前にする必要があります（SHOULD）。"
    },
    {
      "indent": 5,
      "text": "error      = 1*error-char\nerror-char = %x20-21 / %x23-5B / %x5D-7E",
      "raw": true
    },
    {
      "indent": 0,
      "text": "9. Native Applications",
      "section_title": true,
      "ja": "9. ネイティブアプリケーション"
    },
    {
      "indent": 3,
      "text": "Native applications are clients installed and executed on the device used by the resource owner (i.e., desktop application, native mobile application). Native applications require special consideration related to security, platform capabilities, and overall end-user experience.",
      "ja": "ネイティブアプリケーションは、リソース所有者が使用するデバイスにインストールおよび実行されるクライアントです（デスクトップアプリケーション、ネイティブモバイルアプリケーションなど）。ネイティブアプリケーションでは、セキュリティ、プラットフォーム機能、および全体的なエンドユーザーエクスペリエンスに関連する特別な考慮が必要です。"
    },
    {
      "indent": 3,
      "text": "The authorization endpoint requires interaction between the client and the resource owner's user-agent. Native applications can invoke an external user-agent or embed a user-agent within the application. For example:",
      "ja": "認可エンドポイントでは、クライアントとリソース所有者のユーザーエージェント間の相互作用が必要です。ネイティブアプリケーションは、外部のユーザーエージェントを呼び出したり、アプリケーション内にユーザーエージェントを埋め込んだりできます。例えば："
    },
    {
      "indent": 3,
      "text": "o External user-agent - the native application can capture the response from the authorization server using a redirection URI with a scheme registered with the operating system to invoke the client as the handler, manual copy-and-paste of the credentials, running a local web server, installing a user-agent extension, or by providing a redirection URI identifying a server-hosted resource under the client's control, which in turn makes the response available to the native application.",
      "ja": "o 外部ユーザーエージェント-ネイティブアプリケーションは、オペレーティングシステムに登録されたスキームでリダイレクトURIを使用して認証サーバーからの応答をキャプチャし、クライアントをハンドラーとして呼び出し、資格情報を手動でコピーして貼り付け、ローカルWebを実行できます。サーバー、ユーザーエージェント拡張機能のインストール、またはクライアントの制御下でサーバーがホストするリソースを識別するリダイレクトURIを提供することにより、ネイティブアプリケーションが応答を利用できるようにします。"
    },
    {
      "indent": 3,
      "text": "o Embedded user-agent - the native application obtains the response by directly communicating with the embedded user-agent by monitoring state changes emitted during the resource load, or accessing the user-agent's cookies storage.",
      "ja": "o 組み込みユーザーエージェント-ネイティブアプリケーションは、リソースの読み込み中に発生した状態変化を監視するか、ユーザーエージェントのCookieストレージにアクセスして、組み込みユーザーエージェントと直接通信することで応答を取得します。"
    },
    {
      "indent": 3,
      "text": "When choosing between an external or embedded user-agent, developers should consider the following:",
      "ja": "外部または組み込みのユーザーエージェントを選択する場合、開発者は次のことを考慮する必要があります。"
    },
    {
      "indent": 0,
      "text": " o An external user-agent may improve completion rate, as the resource owner may already have an active session with the authorization server, removing the need to re-authenticate. It provides a familiar end-user experience and functionality. The resource owner may also rely on user-agent features or extensions to assist with authentication (e.g., password manager, 2-factor device reader).",
      "ja": "o 外部のユーザーエージェントは、リソース所有者が認可サーバーとのアクティブなセッションをすでに持っている可能性があるため、完了率を向上させる可能性があり、再認証の必要がなくなります。使い慣れたエンドユーザーエクスペリエンスと機能を提供します。リソースの所有者は、認証を支援するためにユーザーエージェントの機能や拡張機能（パスワードマネージャー、2要素デバイスリーダーなど）を利用することもあります。"
    },
    {
      "indent": 3,
      "text": "o An embedded user-agent may offer improved usability, as it removes the need to switch context and open new windows.",
      "ja": "o 組み込みのユーザーエージェントを使用すると、コンテキストを切り替えて新しいウィンドウを開く必要がなくなるため、使いやすさが向上します。"
    },
    {
      "indent": 3,
      "text": "o An embedded user-agent poses a security challenge because resource owners are authenticating in an unidentified window without access to the visual protections found in most external user-agents. An embedded user-agent educates end-users to trust unidentified requests for authentication (making phishing attacks easier to execute).",
      "ja": "o ほとんどの外部ユーザーエージェントにある視覚的な保護にアクセスせずにリソース所有者が識別されていないウィンドウで認証しているため、埋め込まれたユーザーエージェントはセキュリティ上の課題を引き起こします。埋め込まれたユーザーエージェントは、認証のための身元不明の要求を信頼するようにエンドユーザーを教育します（フィッシング攻撃の実行を容易にします）。"
    },
    {
      "indent": 3,
      "text": "When choosing between the implicit grant type and the authorization code grant type, the following should be considered:",
      "ja": "暗黙の付与タイプと許可コード付与タイプのどちらかを選択する場合は、以下を考慮する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Native applications that use the authorization code grant type SHOULD do so without using client credentials, due to the native application's inability to keep client credentials confidential.",
      "ja": "o 認可コード付与タイプを使用するネイティブアプリケーションは、クライアントの資格情報を機密に保つことができないため、クライアントの資格情報を使用せずに行う必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "o When using the implicit grant type flow, a refresh token is not returned, which requires repeating the authorization process once the access token expires.",
      "ja": "o 暗黙的な付与タイプのフローを使用する場合、更新トークンは返されません。そのため、アクセストークンの有効期限が切れると、認証プロセスを繰り返す必要があります。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "As a flexible and extensible framework, OAuth's security considerations depend on many factors. The following sections provide implementers with security guidelines focused on the three client profiles described in Section 2.1: web application, user-agent-based application, and native application.",
      "ja": "柔軟で拡張可能なフレームワークであるOAuthのセキュリティに関する考慮事項は、多くの要因に依存します。次のセクションでは、セクション2.1で説明した3つのクライアントプロファイル（Webアプリケーション、ユーザーエージェントベースのアプリケーション、ネイティブアプリケーション）に焦点を当てたセキュリティガイドラインを実装者に提供します。"
    },
    {
      "indent": 3,
      "text": "A comprehensive OAuth security model and analysis, as well as background for the protocol design, is provided by [OAuth-THREATMODEL].",
      "ja": "包括的なOAuthセキュリティモデルと分析、およびプロトコル設計の背景は、[OAuth-THREATMODEL]によって提供されます。"
    },
    {
      "indent": 0,
      "text": "10.1. Client Authentication",
      "section_title": true,
      "ja": "10.1. クライアント認証"
    },
    {
      "indent": 3,
      "text": "The authorization server establishes client credentials with web application clients for the purpose of client authentication. The authorization server is encouraged to consider stronger client authentication means than a client password. Web application clients MUST ensure confidentiality of client passwords and other client credentials.",
      "ja": "許可サーバーは、クライアント認証のために、Webアプリケーションクライアントとのクライアント資格情報を確立します。許可サーバーは、クライアントパスワードよりも強力なクライアント認証手段を検討することをお勧めします。 Webアプリケーションクライアントは、クライアントパスワードと他のクライアント資格情報の機密性を確保する必要があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST NOT issue client passwords or other client credentials to native application or user-agent-based application clients for the purpose of client authentication. The authorization server MAY issue a client password or other credentials for a specific installation of a native application client on a specific device.",
      "ja": "認可サーバーは、クライアント認証を目的として、ネイティブアプリケーションまたはユーザーエージェントベースのアプリケーションクライアントにクライアントパスワードまたはその他のクライアント資格情報を発行してはなりません（MUST NOT）。認可サーバーは、特定のデバイス上のネイティブアプリケーションクライアントの特定のインストールに対して、クライアントパスワードまたはその他の資格情報を発行する場合があります。"
    },
    {
      "indent": 3,
      "text": "When client authentication is not possible, the authorization server SHOULD employ other means to validate the client's identity -- for example, by requiring the registration of the client redirection URI or enlisting the resource owner to confirm identity. A valid redirection URI is not sufficient to verify the client's identity when asking for resource owner authorization but can be used to prevent delivering credentials to a counterfeit client after obtaining resource owner authorization.",
      "ja": "クライアント認証が不可能な場合、認可サーバーは他の手段を使用してクライアントのIDを検証する必要があります。たとえば、クライアントリダイレクトURIの登録を要求したり、リソース所有者にIDの確認を依頼したりします。有効なリダイレクトURIは、リソース所有者の認可を求めるときにクライアントのIDを確認するには不十分ですが、リソース所有者の認可を取得した後に偽造クライアントに資格情報を配信しないようにするために使用できます。"
    },
    {
      "indent": 3,
      "text": "The authorization server must consider the security implications of interacting with unauthenticated clients and take measures to limit the potential exposure of other credentials (e.g., refresh tokens) issued to such clients.",
      "ja": "認可サーバーは、認証されていないクライアントとのやり取りによるセキュリティへの影響を考慮し、そのようなクライアントに発行された他の資格情報（更新トークンなど）の潜在的な公開を制限するための対策を講じる必要があります。"
    },
    {
      "indent": 0,
      "text": "10.2. Client Impersonation",
      "section_title": true,
      "ja": "10.2. クライアントの偽装"
    },
    {
      "indent": 3,
      "text": "A malicious client can impersonate another client and obtain access to protected resources if the impersonated client fails to, or is unable to, keep its client credentials confidential.",
      "ja": "悪意のあるクライアントは、別のクライアントになりすまして、偽装されたクライアントがクライアントの資格情報を秘密にしておくことができないかできない場合、保護されたリソースへのアクセスを取得できます。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST authenticate the client whenever possible. If the authorization server cannot authenticate the client due to the client's nature, the authorization server MUST require the registration of any redirection URI used for receiving authorization responses and SHOULD utilize other means to protect resource owners from such potentially malicious clients. For example, the authorization server can engage the resource owner to assist in identifying the client and its origin.",
      "ja": "許可サーバーは、可能な限りクライアントを認証する必要があります。認可サーバーがクライアントの性質によりクライアントを認証できない場合、認可サーバーは認可応答の受信に使用されるリダイレクトURIの登録を要求しなければならず、そのような潜在的に悪意のあるクライアントからリソース所有者を保護するために他の手段を利用する必要があります。たとえば、認可サーバーは、リソースの所有者に依頼して、クライアントとその出所の特定を支援できます。"
    },
    {
      "indent": 3,
      "text": "The authorization server SHOULD enforce explicit resource owner authentication and provide the resource owner with information about the client and the requested authorization scope and lifetime. It is up to the resource owner to review the information in the context of the current client and to authorize or deny the request.",
      "ja": "認可サーバーは、明示的なリソース所有者認証を強制し、クライアントと要求された認可スコープとライフタイムに関する情報をリソース所有者に提供する必要があります。現在のクライアントのコンテキストで情報を確認し、要求を認可または拒否するのは、リソース所有者の責任です。"
    },
    {
      "indent": 3,
      "text": "The authorization server SHOULD NOT process repeated authorization requests automatically (without active resource owner interaction) without authenticating the client or relying on other measures to ensure that the repeated request comes from the original client and not an impersonator.",
      "ja": "認可サーバーは、クライアントを認証したり、繰り返しのリクエストが元のクライアントからのものであり、なりすましではないことを確認するための他の手段に依存したりせずに、繰り返しの認可リクエストを自動的に（アクティブなリソース所有者との対話なしで）処理すべきではありません。"
    },
    {
      "indent": 0,
      "text": "10.3. Access Tokens",
      "section_title": true,
      "ja": "10.3. アクセストークン"
    },
    {
      "indent": 3,
      "text": "Access token credentials (as well as any confidential access token attributes) MUST be kept confidential in transit and storage, and only shared among the authorization server, the resource servers the access token is valid for, and the client to whom the access token is issued. Access token credentials MUST only be transmitted using TLS as described in Section 1.6 with server authentication as defined by [RFC2818].",
      "ja": "アクセストークンの資格情報（および機密のアクセストークン属性）は、転送中および保管中に機密を保持する必要があり、認可サーバー、アクセストークンが有効なリソースサーバー、およびアクセストークンの発行先のクライアント間でのみ共有されます。 。 [RFC2818]で定義されているサーバー認証を備えたセクション1.6で説明されているように、アクセストークン資格情報はTLSを使用してのみ送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "When using the implicit grant type, the access token is transmitted in the URI fragment, which can expose it to unauthorized parties.",
      "ja": "暗黙的な許可タイプを使用する場合、アクセストークンはURIフラグメントで送信され、不正なパーティに公開される可能性があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST ensure that access tokens cannot be generated, modified, or guessed to produce valid access tokens by unauthorized parties.",
      "ja": "許可サーバーは、許可されていない当事者が有効なアクセストークンを生成するために、アクセストークンを生成、変更、または推測できないことを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "The client SHOULD request access tokens with the minimal scope necessary. The authorization server SHOULD take the client identity into account when choosing how to honor the requested scope and MAY issue an access token with less rights than requested.",
      "ja": "クライアントは、必要最小限の範囲でアクセストークンをリクエストする必要があります（SHOULD）。認可サーバーは、リクエストされたスコープを尊重する方法を選択するときにクライアントIDを考慮に入れて、リクエストされた権限よりも少ない権限でアクセストークンを発行する必要があります。"
    },
    {
      "indent": 3,
      "text": "This specification does not provide any methods for the resource server to ensure that an access token presented to it by a given client was issued to that client by the authorization server.",
      "ja": "この仕様では、リソースサーバーが特定のクライアントから提示されたアクセストークンが認可サーバーによってそのクライアントに発行されたことを確認するためのメソッドは提供されていません。"
    },
    {
      "indent": 0,
      "text": "10.4. Refresh Tokens",
      "section_title": true,
      "ja": "10.4. トークンを更新"
    },
    {
      "indent": 3,
      "text": "Authorization servers MAY issue refresh tokens to web application clients and native application clients.",
      "ja": "認可サーバーは、Webアプリケーションクライアントとネイティブアプリケーションクライアントに更新トークンを発行する場合があります。"
    },
    {
      "indent": 3,
      "text": "Refresh tokens MUST be kept confidential in transit and storage, and shared only among the authorization server and the client to whom the refresh tokens were issued. The authorization server MUST maintain the binding between a refresh token and the client to whom it was issued. Refresh tokens MUST only be transmitted using TLS as described in Section 1.6 with server authentication as defined by [RFC2818].",
      "ja": "更新トークンは、転送中および保管中に機密情報を保持する必要があり、認可サーバーと更新トークンが発行されたクライアントの間でのみ共有されます。認可サーバーは、更新トークンとそれが発行されたクライアントとの間のバインディングを維持する必要があります。リフレッシュトークンは、[RFC2818]で定義されているサーバー認証を使用して、セクション1.6で説明されているTLSを使用してのみ送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST verify the binding between the refresh token and client identity whenever the client identity can be authenticated. When client authentication is not possible, the authorization server SHOULD deploy other means to detect refresh token abuse.",
      "ja": "認可サーバーは、クライアントIDを認証できる場合は常に、リフレッシュトークンとクライアントID間のバインディングを検証する必要があります。クライアント認証が不可能な場合、認可サーバーは、リフレッシュトークンの不正使用を検出する他の手段を展開する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": " For example, the authorization server could employ refresh token rotation in which a new refresh token is issued with every access token refresh response. The previous refresh token is invalidated but retained by the authorization server. If a refresh token is compromised and subsequently used by both the attacker and the legitimate client, one of them will present an invalidated refresh token, which will inform the authorization server of the breach.",
      "ja": "たとえば、認可サーバーは、すべてのアクセストークン更新応答で新しい更新トークンが発行される更新トークンローテーションを使用できます。以前の更新トークンは無効になりますが、認可サーバーによって保持されます。更新トークンが危険にさらされ、その後攻撃者と正当なクライアントの両方で使用された場合、そのうちの1つが無効化された更新トークンを提示し、認証サーバーに違反を通知します。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST ensure that refresh tokens cannot be generated, modified, or guessed to produce valid refresh tokens by unauthorized parties.",
      "ja": "認可サーバーは、認可されていない当事者が有効な更新トークンを生成するために、更新トークンを生成、変更、または推測できないことを確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.5. Authorization Codes",
      "section_title": true,
      "ja": "10.5. 認証コード"
    },
    {
      "indent": 3,
      "text": "The transmission of authorization codes SHOULD be made over a secure channel, and the client SHOULD require the use of TLS with its redirection URI if the URI identifies a network resource. Since authorization codes are transmitted via user-agent redirections, they could potentially be disclosed through user-agent history and HTTP referrer headers.",
      "ja": "認証コードの送信は安全なチャネルを介して行われる必要があり（SHOULD）、URIがネットワークリソースを識別する場合、クライアントはリダイレクトURIでTLSを使用する必要があります（SHOULD）。認証コードはユーザーエージェントのリダイレクトを介して送信されるため、ユーザーエージェントの履歴とHTTPリファラーヘッダーを介して公開される可能性があります。"
    },
    {
      "indent": 3,
      "text": "Authorization codes operate as plaintext bearer credentials, used to verify that the resource owner who granted authorization at the authorization server is the same resource owner returning to the client to complete the process. Therefore, if the client relies on the authorization code for its own resource owner authentication, the client redirection endpoint MUST require the use of TLS.",
      "ja": "認可コードはプレーンテキストのベアラー資格情報として機能し、認可サーバーで認可を付与したリソース所有者が、クライアントに戻ってプロセスを完了するのと同じリソース所有者であることを確認するために使用されます。したがって、クライアントが独自のリソース所有者認証を認可コードに依存している場合、クライアントリダイレクトエンドポイントはTLSの使用を要求する必要があります。"
    },
    {
      "indent": 3,
      "text": "Authorization codes MUST be short lived and single-use. If the authorization server observes multiple attempts to exchange an authorization code for an access token, the authorization server SHOULD attempt to revoke all access tokens already granted based on the compromised authorization code.",
      "ja": "認証コードは、短命で使い捨てでなければなりません。認可サーバーがアクセストークンの認可コードを交換する複数の試行を観察する場合、認可サーバーは、侵害された認可コードに基づいてすでに付与されているすべてのアクセストークンを取り消そうとします。"
    },
    {
      "indent": 3,
      "text": "If the client can be authenticated, the authorization servers MUST authenticate the client and ensure that the authorization code was issued to the same client.",
      "ja": "クライアントを認証できる場合、認証サーバーはクライアントを認証し、認証コードが同じクライアントに発行されたことを確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.6. Authorization Code Redirection URI Manipulation",
      "section_title": true,
      "ja": "10.6. 認可コードのリダイレクトURI操作"
    },
    {
      "indent": 3,
      "text": "When requesting authorization using the authorization code grant type, the client can specify a redirection URI via the \"redirect_uri\" parameter. If an attacker can manipulate the value of the redirection URI, it can cause the authorization server to redirect the resource owner user-agent to a URI under the control of the attacker with the authorization code.",
      "ja": "認証コード付与タイプを使用して認証を要求する場合、クライアントは「redirect_uri」パラメーターを介してリダイレクトURIを指定できます。攻撃者がリダイレクトURIの値を操作できる場合、認証サーバーがリソース所有者のユーザーエージェントを、認証コードで攻撃者の制御下にあるURIにリダイレクトする可能性があります。"
    },
    {
      "indent": 0,
      "text": " An attacker can create an account at a legitimate client and initiate the authorization flow. When the attacker's user-agent is sent to the authorization server to grant access, the attacker grabs the authorization URI provided by the legitimate client and replaces the client's redirection URI with a URI under the control of the attacker. The attacker then tricks the victim into following the manipulated link to authorize access to the legitimate client.",
      "ja": "攻撃者は、正当なクライアントでアカウントを作成し、認可フローを開始できます。攻撃者のユーザーエージェントが認可サーバーに送信されてアクセスが許可されると、攻撃者は正当なクライアントから提供された認可URIを取得し、攻撃者の制御下にあるURIでクライアントのリダイレクトURIを置き換えます。次に、攻撃者は被害者をだまして操作されたリンクをたどり、正規のクライアントへのアクセスを許可します。"
    },
    {
      "indent": 3,
      "text": "Once at the authorization server, the victim is prompted with a normal, valid request on behalf of a legitimate and trusted client, and authorizes the request. The victim is then redirected to an endpoint under the control of the attacker with the authorization code. The attacker completes the authorization flow by sending the authorization code to the client using the original redirection URI provided by the client. The client exchanges the authorization code with an access token and links it to the attacker's client account, which can now gain access to the protected resources authorized by the victim (via the client).",
      "ja": "認可サーバーに到着すると、被害者は正当で信頼できるクライアントに代わって通常の有効なリクエストを求められ、リクエストを認可します。被害者は、認証コードを使用して、攻撃者の制御下にあるエンドポイントにリダイレクトされます。攻撃者は、クライアントから提供された元のリダイレクトURIを使用して認証コードをクライアントに送信することにより、認証フローを完了します。クライアントは認証コードをアクセストークンと交換し、攻撃者のクライアントアカウントにリンクします。これにより、被害者によって（クライアントを介して）認可された保護されたリソースにアクセスできるようになります。"
    },
    {
      "indent": 3,
      "text": "In order to prevent such an attack, the authorization server MUST ensure that the redirection URI used to obtain the authorization code is identical to the redirection URI provided when exchanging the authorization code for an access token. The authorization server MUST require public clients and SHOULD require confidential clients to register their redirection URIs. If a redirection URI is provided in the request, the authorization server MUST validate it against the registered value.",
      "ja": "このような攻撃を防ぐために、認証サーバーは、認証コードを取得するために使用されるリダイレクトURIが、アクセストークンの認証コードを交換するときに提供されるリダイレクトURIと同じであることを確認する必要があります。認可サーバーはパブリッククライアントを必要とし、機密クライアントがリダイレクトURIを登録することを要求する必要があります（SHOULD）。リダイレクトURIがリクエストで提供されている場合、認可サーバーは登録された値に対してそれを検証する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.7. Resource Owner Password Credentials",
      "section_title": true,
      "ja": "10.7. リソース所有者のパスワード資格情報"
    },
    {
      "indent": 3,
      "text": "The resource owner password credentials grant type is often used for legacy or migration reasons. It reduces the overall risk of storing usernames and passwords by the client but does not eliminate the need to expose highly privileged credentials to the client.",
      "ja": "リソース所有者のパスワード資格情報付与タイプは、レガシーまたは移行の理由でよく使用されます。これにより、クライアントがユーザー名とパスワードを保存する全体的なリスクが軽減されますが、特権の高い資格情報をクライアントに公開する必要がなくなるわけではありません。"
    },
    {
      "indent": 3,
      "text": "This grant type carries a higher risk than other grant types because it maintains the password anti-pattern this protocol seeks to avoid. The client could abuse the password, or the password could unintentionally be disclosed to an attacker (e.g., via log files or other records kept by the client).",
      "ja": "このプロトコルは、このプロトコルが回避しようとしているアンチパターンのパスワードを維持するため、この付与タイプは他の付与タイプよりもリスクが高くなります。クライアントがパスワードを悪用したり、パスワードが意図せずに攻撃者に開示されたりする可能性があります（たとえば、ログファイルやクライアントが保持するその他のレコードを介して）。"
    },
    {
      "indent": 3,
      "text": "Additionally, because the resource owner does not have control over the authorization process (the resource owner's involvement ends when it hands over its credentials to the client), the client can obtain access tokens with a broader scope than desired by the resource owner. The authorization server should consider the scope and lifetime of access tokens issued via this grant type.",
      "ja": "さらに、リソース所有者は認可プロセスを制御できないため（リソース所有者の関与は、資格情報をクライアントに渡すと終了します）、クライアントはリソース所有者が望むよりも広い範囲のアクセストークンを取得できます。許可サーバーは、この付与タイプを介して発行されたアクセストークンのスコープと有効期間を考慮する必要があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server and client SHOULD minimize use of this grant type and utilize other grant types whenever possible.",
      "ja": "認可サーバーとクライアントは、この許可タイプの使用を最小限に抑え、可能な限り他の許可タイプを利用する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "10.8. Request Confidentiality",
      "section_title": true,
      "ja": "10.8. 機密性の要求"
    },
    {
      "indent": 3,
      "text": "Access tokens, refresh tokens, resource owner passwords, and client credentials MUST NOT be transmitted in the clear. Authorization codes SHOULD NOT be transmitted in the clear.",
      "ja": "アクセストークン、更新トークン、リソース所有者のパスワード、およびクライアント資格情報は、平文で送信してはなりません（MUST NOT）。認証コードは平文で送信してはいけません。"
    },
    {
      "indent": 3,
      "text": "The \"state\" and \"scope\" parameters SHOULD NOT include sensitive client or resource owner information in plain text, as they can be transmitted over insecure channels or stored insecurely.",
      "ja": "\"state\"および \"scope\"パラメータには、クライアントまたはリソースの機密情報をプレーンテキストで含めないでください。これらは、安全でないチャネルを介して送信したり、安全に保存したりできないためです。"
    },
    {
      "indent": 0,
      "text": "10.9. Ensuring Endpoint Authenticity",
      "section_title": true,
      "ja": "10.9. エンドポイントの信頼性の確保"
    },
    {
      "indent": 3,
      "text": "In order to prevent man-in-the-middle attacks, the authorization server MUST require the use of TLS with server authentication as defined by [RFC2818] for any request sent to the authorization and token endpoints. The client MUST validate the authorization server's TLS certificate as defined by [RFC6125] and in accordance with its requirements for server identity authentication.",
      "ja": "中間者攻撃を防止するために、認可サーバーは、認可およびトークンエンドポイントに送信されるすべての要求に対して、[RFC2818]で定義されているサーバー認証でTLSを使用する必要があります。クライアントは、[RFC6125]で定義されているように、サーバーID認証の要件に従って、認可サーバーのTLS証明書を検証する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.10. Credentials-Guessing Attacks",
      "section_title": true,
      "ja": "10.10. 資格情報推測攻撃"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST prevent attackers from guessing access tokens, authorization codes, refresh tokens, resource owner passwords, and client credentials.",
      "ja": "認可サーバーは、攻撃者がアクセストークン、認可コード、更新トークン、リソース所有者のパスワード、およびクライアントの資格情報を推測できないようにする必要があります。"
    },
    {
      "indent": 3,
      "text": "The probability of an attacker guessing generated tokens (and other credentials not intended for handling by end-users) MUST be less than or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).",
      "ja": "生成されたトークン（およびエンドユーザーによる処理を目的としていないその他の資格情報）を攻撃者が推測する確率は、2^(-128) 以下でなければならず、2^(-160) 以下でなければなりません（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST utilize other means to protect credentials intended for end-user usage.",
      "ja": "認可サーバーは、エンドユーザーの使用を目的とした資格情報を保護するために他の手段を利用する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.11. Phishing Attacks",
      "section_title": true,
      "ja": "10.11. フィッシング攻撃"
    },
    {
      "indent": 3,
      "text": "Wide deployment of this and similar protocols may cause end-users to become inured to the practice of being redirected to websites where they are asked to enter their passwords. If end-users are not careful to verify the authenticity of these websites before entering their credentials, it will be possible for attackers to exploit this practice to steal resource owners' passwords.",
      "ja": "このプロトコルと同様のプロトコルを幅広く展開すると、エンドユーザーは、パスワードの入力を求められるWebサイトにリダイレクトされる習慣に慣れることができなくなる可能性があります。エンドユーザーが資格情報を入力する前にこれらのWebサイトの信頼性を慎重に確認しないと、攻撃者がこの手法を悪用してリソース所有者のパスワードを盗む可能性があります。"
    },
    {
      "indent": 3,
      "text": "Service providers should attempt to educate end-users about the risks phishing attacks pose and should provide mechanisms that make it easy for end-users to confirm the authenticity of their sites. Client developers should consider the security implications of how they interact with the user-agent (e.g., external, embedded), and the ability of the end-user to verify the authenticity of the authorization server.",
      "ja": "サービスプロバイダーは、フィッシング攻撃がもたらすリスクについてエンドユーザーを教育し、エンドユーザーがサイトの信頼性を簡単に確認できるメカニズムを提供する必要があります。クライアント開発者は、ユーザーエージェント（外部、埋め込みなど）との相互作用によるセキュリティへの影響、および認可サーバーの信頼性を検証するエンドユーザーの機能を考慮する必要があります。"
    },
    {
      "indent": 3,
      "text": "To reduce the risk of phishing attacks, the authorization servers MUST require the use of TLS on every endpoint used for end-user interaction.",
      "ja": "フィッシング攻撃のリスクを軽減するために、認可サーバーは、エンドユーザーの対話に使用されるすべてのエンドポイントでTLSの使用を要求する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.12. Cross-Site Request Forgery",
      "section_title": true,
      "ja": "10.12. クロスサイトリクエストフォージェリ"
    },
    {
      "indent": 3,
      "text": "Cross-site request forgery (CSRF) is an exploit in which an attacker causes the user-agent of a victim end-user to follow a malicious URI (e.g., provided to the user-agent as a misleading link, image, or redirection) to a trusting server (usually established via the presence of a valid session cookie).",
      "ja": "クロスサイトリクエストフォージェリ（CSRF）は、攻撃者が被害者のエンドユーザーのユーザーエージェントに悪意のあるURI（たとえば、誤解を招くリンク、画像、またはリダイレクトとしてユーザーエージェントに提供される）を追跡させるエクスプロイトです。信頼するサーバー（通常、有効なセッションCookieの存在を介して確立されます）。"
    },
    {
      "indent": 3,
      "text": "A CSRF attack against the client's redirection URI allows an attacker to inject its own authorization code or access token, which can result in the client using an access token associated with the attacker's protected resources rather than the victim's (e.g., save the victim's bank account information to a protected resource controlled by the attacker).",
      "ja": "クライアントのリダイレクトURIに対するCSRF攻撃により、攻撃者は独自の認証コードまたはアクセストークンを挿入できます。これにより、クライアントは被害者ではなく、攻撃者の保護されたリソースに関連付けられたアクセストークンを使用する可能性があります（たとえば、被害者の銀行口座情報を保存します）攻撃者によって制御される保護されたリソースに）。"
    },
    {
      "indent": 3,
      "text": "The client MUST implement CSRF protection for its redirection URI. This is typically accomplished by requiring any request sent to the redirection URI endpoint to include a value that binds the request to the user-agent's authenticated state (e.g., a hash of the session cookie used to authenticate the user-agent). The client SHOULD utilize the \"state\" request parameter to deliver this value to the authorization server when making an authorization request.",
      "ja": "クライアントは、リダイレクトURIにCSRF保護を実装する必要があります。これは通常、リダイレクトURIエンドポイントに送信されるすべてのリクエストに、リクエストをユーザーエージェントの認証済み状態にバインドする値（たとえば、ユーザーエージェントの認証に使用されるセッションCookieのハッシュ）を含めることを要求することで実現されます。クライアントは、認可リクエストを行うときに「state」リクエストパラメータを使用して、この値を認可サーバーに配信する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Once authorization has been obtained from the end-user, the authorization server redirects the end-user's user-agent back to the client with the required binding value contained in the \"state\" parameter. The binding value enables the client to verify the validity of the request by matching the binding value to the user-agent's authenticated state. The binding value used for CSRF protection MUST contain a non-guessable value (as described in Section 10.10), and the user-agent's authenticated state (e.g., session cookie, HTML5 local storage) MUST be kept in a location accessible only to the client and the user-agent (i.e., protected by same-origin policy).",
      "ja": "エンドユーザーから認証が取得されると、認証サーバーは、「state」パラメーターに含まれる必要なバインディング値を使用して、エンドユーザーのユーザーエージェントをクライアントにリダイレクトします。バインディング値を使用すると、クライアントは、バインディング値をユーザーエージェントの認証済み状態と照合することにより、リクエストの有効性を検証できます。 CSRF保護に使用されるバインディング値には、推測できない値が含まれている必要があり（セクション10.10で説明）、ユーザーエージェントの認証状態（たとえば、セッションCookie、HTML5ローカルストレージ）は、クライアントだけがアクセスできる場所に保持する必要があります。およびユーザーエージェント（つまり、同一生成元ポリシーによって保護されています）。"
    },
    {
      "indent": 3,
      "text": "A CSRF attack against the authorization server's authorization endpoint can result in an attacker obtaining end-user authorization for a malicious client without involving or alerting the end-user.",
      "ja": "認可サーバーの認可エンドポイントに対するCSRF攻撃により、攻撃者はエンドユーザーを関与させたり警告したりせずに、悪意のあるクライアントのエンドユーザー認可を取得する可能性があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST implement CSRF protection for its authorization endpoint and ensure that a malicious client cannot obtain authorization without the awareness and explicit consent of the resource owner.",
      "ja": "認可サーバーは、認可エンドポイントにCSRF保護を実装し、悪意のあるクライアントがリソース所有者の認識と明示的な同意なしに認可を取得できないようにする必要があります。"
    },
    {
      "indent": 0,
      "text": "10.13. Clickjacking",
      "section_title": true,
      "ja": "10.13. クリックジャッキング"
    },
    {
      "indent": 3,
      "text": "In a clickjacking attack, an attacker registers a legitimate client and then constructs a malicious site in which it loads the authorization server's authorization endpoint web page in a transparent iframe overlaid on top of a set of dummy buttons, which are carefully constructed to be placed directly under important buttons on the authorization page. When an end-user clicks a misleading visible button, the end-user is actually clicking an invisible button on the authorization page (such as an \"Authorize\" button). This allows an attacker to trick a resource owner into granting its client access without the end-user's knowledge.",
      "ja": "クリックジャッキング攻撃では、攻撃者は正当なクライアントを登録してから、悪意のあるサイトを構築し、認可サーバーの認可エンドポイントWebページを、直接配置されるように注意深く構築されたダミーボタンのセットの上にオーバーレイされた透明なiframeに読み込みます。認可ページの重要なボタンの下。エンドユーザーが誤解を招く表示ボタンをクリックすると、エンドユーザーは実際には認証ページの非表示ボタン（「認証」ボタンなど）をクリックしています。これにより、攻撃者はリソース所有者をだまして、エンドユーザーの知らないうちにクライアントアクセスを許可することができます。"
    },
    {
      "indent": 3,
      "text": "To prevent this form of attack, native applications SHOULD use external browsers instead of embedding browsers within the application when requesting end-user authorization. For most newer browsers, avoidance of iframes can be enforced by the authorization server using the (non-standard) \"x-frame-options\" header. This header can have two values, \"deny\" and \"sameorigin\", which will block any framing, or framing by sites with a different origin, respectively. For older browsers, JavaScript frame-busting techniques can be used but may not be effective in all browsers.",
      "ja": "この形式の攻撃を防ぐために、ネイティブアプリケーションは、エンドユーザーの認可を要求するときに、アプリケーション内にブラウザーを埋め込むのではなく、外部ブラウザーを使用する必要があります（SHOULD）。最近のほとんどのブラウザーでは、（非標準の）「x-frame-options」ヘッダーを使用して、許可サーバーによってiframeの回避を強制できます。このヘッダーには、「deny」と「sameorigin」の2つの値を設定できます。これらは、フレーミングをブロックするか、それぞれ異なる発信元のサイトによるフレーミングをブロックします。古いブラウザでは、JavaScriptフレームバスティングテクニックを使用できますが、すべてのブラウザで効果があるとは限りません。"
    },
    {
      "indent": 0,
      "text": "10.14. Code Injection and Input Validation",
      "section_title": true,
      "ja": "10.14. コードインジェクションと入力検証"
    },
    {
      "indent": 3,
      "text": "A code injection attack occurs when an input or otherwise external variable is used by an application unsanitized and causes modification to the application logic. This may allow an attacker to gain access to the application device or its data, cause denial of service, or introduce a wide range of malicious side-effects.",
      "ja": "コードインジェクション攻撃は、入力またはその他の外部変数がサニタイズされていないアプリケーションによって使用され、アプリケーションロジックが変更されると発生します。これにより、攻撃者がアプリケーションデバイスまたはそのデータにアクセスしたり、サービス拒否を引き起こしたり、さまざまな悪意のある副作用を引き起こしたりする可能性があります。"
    },
    {
      "indent": 3,
      "text": "The authorization server and client MUST sanitize (and validate when possible) any value received -- in particular, the value of the \"state\" and \"redirect_uri\" parameters.",
      "ja": "認可サーバーとクライアントは、受け取った値、特に「state」と「redirect_uri」の値をサニタイズ（および可能な場合は検証）する必要があります。"
    },
    {
      "indent": 0,
      "text": "10.15. Open Redirectors",
      "section_title": true,
      "ja": "10.15. オープンリダイレクタ"
    },
    {
      "indent": 3,
      "text": "The authorization server, authorization endpoint, and client redirection endpoint can be improperly configured and operate as open redirectors. An open redirector is an endpoint using a parameter to automatically redirect a user-agent to the location specified by the parameter value without any validation.",
      "ja": "認可サーバー、認可エンドポイント、およびクライアントリダイレクトエンドポイントが不適切に構成され、オープンリダイレクタとして動作する可能性があります。オープンリダイレクターは、パラメーターを使用して、検証なしでパラメーター値で指定された場所にユーザーエージェントを自動的にリダイレクトするエンドポイントです。"
    },
    {
      "indent": 0,
      "text": " Open redirectors can be used in phishing attacks, or by an attacker to get end-users to visit malicious sites by using the URI authority component of a familiar and trusted destination. In addition, if the authorization server allows the client to register only part of the redirection URI, an attacker can use an open redirector operated by the client to construct a redirection URI that will pass the authorization server validation but will send the authorization code or access token to an endpoint under the control of the attacker.",
      "ja": "オープンリダイレクタはフィッシング攻撃で使用されたり、攻撃者が使い慣れた信頼できる宛先のURI権限コンポーネントを使用してエンドユーザーに悪意のあるサイトを訪問させたりすることができます。さらに、認可サーバーがクライアントにリダイレクトURIの一部のみを登録することを許可している場合、攻撃者はクライアントが操作するオープンリダイレクターを使用して、認可サーバーの検証に合格するが認可コードまたはアクセスを送信するリダイレクトURIを構築できます。攻撃者の制御下にあるエンドポイントへのトークン。"
    },
    {
      "indent": 0,
      "text": "10.16. Misuse of Access Token to Impersonate Resource Owner in Implicit Flow",
      "section_title": true,
      "ja": "10.16. 暗黙的なフローでリソース所有者を偽装するアクセストークンの誤用"
    },
    {
      "indent": 3,
      "text": "For public clients using implicit flows, this specification does not provide any method for the client to determine what client an access token was issued to.",
      "ja": "暗黙的なフローを使用するパブリッククライアントの場合、この仕様では、クライアントがアクセストークンの発行先のクライアントを決定する方法は提供されていません。"
    },
    {
      "indent": 3,
      "text": "A resource owner may willingly delegate access to a resource by granting an access token to an attacker's malicious client. This may be due to phishing or some other pretext. An attacker may also steal a token via some other mechanism. An attacker may then attempt to impersonate the resource owner by providing the access token to a legitimate public client.",
      "ja": "リソース所有者は、攻撃者の悪意のあるクライアントにアクセストークンを許可することにより、リソースへのアクセスを喜んで委任する可能性があります。これは、フィッシングまたはその他の口実が原因である可能性があります。攻撃者は、他のメカニズムを介してトークンを盗むこともあります。攻撃者は、正当なパブリッククライアントにアクセストークンを提供することにより、リソース所有者になりすまそうとする可能性があります。"
    },
    {
      "indent": 3,
      "text": "In the implicit flow (response_type=token), the attacker can easily switch the token in the response from the authorization server, replacing the real access token with the one previously issued to the attacker.",
      "ja": "暗黙的なフロー（response_type = token）では、攻撃者は認証サーバーからの応答でトークンを簡単に切り替えることができ、実際のアクセストークンを以前に攻撃者に発行されたトークンに置き換えます。"
    },
    {
      "indent": 3,
      "text": "Servers communicating with native applications that rely on being passed an access token in the back channel to identify the user of the client may be similarly compromised by an attacker creating a compromised application that can inject arbitrary stolen access tokens.",
      "ja": "バックチャネルでアクセストークンを渡してクライアントのユーザーを特定することに依存するネイティブアプリケーションと通信するサーバーも、同様に、攻撃者が任意の盗んだアクセストークンを挿入できる危険なアプリケーションを作成することによって危険にさらされる可能性があります。"
    },
    {
      "indent": 3,
      "text": "Any public client that makes the assumption that only the resource owner can present it with a valid access token for the resource is vulnerable to this type of attack.",
      "ja": "リソースの所有者だけがリソースの有効なアクセストークンを提示できると想定しているパブリッククライアントは、このタイプの攻撃に対して脆弱です。"
    },
    {
      "indent": 3,
      "text": "This type of attack may expose information about the resource owner at the legitimate client to the attacker (malicious client). This will also allow the attacker to perform operations at the legitimate client with the same permissions as the resource owner who originally granted the access token or authorization code.",
      "ja": "このタイプの攻撃は、正当なクライアントのリソース所有者に関する情報を攻撃者（悪意のあるクライアント）に公開する可能性があります。これにより、攻撃者は正規のクライアントで、アクセストークンまたは認証コードを最初に付与したリソース所有者と同じ権限で操作を実行することもできます。"
    },
    {
      "indent": 3,
      "text": "Authenticating resource owners to clients is out of scope for this specification. Any specification that uses the authorization process as a form of delegated end-user authentication to the client (e.g., third-party sign-in service) MUST NOT use the implicit flow without additional security mechanisms that would enable the client to determine if the access token was issued for its use (e.g., audience-restricting the access token).",
      "ja": "クライアントに対するリソース所有者の認証は、この仕様の範囲外です。認可プロセスをクライアントへの委任されたエンドユーザー認証の形式として使用する仕様（たとえば、サードパーティのサインインサービス）は、クライアントがアクセスかどうかを判断できるようにする追加のセキュリティメカニズムなしに暗黙のフローを使用してはなりません（MUST NOT）。トークンはその使用のために発行されました（たとえば、アクセストークンを制限する聴衆）。"
    },
    {
      "indent": 0,
      "text": "11. IANA Considerations",
      "section_title": true,
      "ja": "11. IANAに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "11.1. OAuth Access Token Types Registry",
      "section_title": true,
      "ja": "11.1. OAuthアクセストークンタイプレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification establishes the OAuth Access Token Types registry.",
      "ja": "この仕様は、OAuthアクセストークンタイプレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Access token types are registered with a Specification Required ([RFC5226]) after a two-week review period on the oauth-ext-review@ietf.org mailing list, on the advice of one or more Designated Experts. However, to allow for the allocation of values prior to publication, the Designated Expert(s) may approve registration once they are satisfied that such a specification will be published.",
      "ja": "アクセストークンタイプは、1名以上のDesignated Expertsの助言により、oauth-ext-review @ ietf.orgメーリングリストの2週間のレビュー期間の後に、Specification Required（[RFC5226]）に登録されます。ただし、公開前の値の割り当てを可能にするために、指定された専門家は、そのような仕様が公開されることに納得したら、登録を認可することができます。"
    },
    {
      "indent": 3,
      "text": "Registration requests must be sent to the oauth-ext-review@ietf.org mailing list for review and comment, with an appropriate subject (e.g., \"Request for access token type: example\").",
      "ja": "登録リクエストは、適切な件名（例：「アクセストークンタイプのリクエスト：例」）とともに、レビューとコメントのためにoauth-ext-review@ietf.orgメーリングリストに送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Within the review period, the Designated Expert(s) will either approve or deny the registration request, communicating this decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions as to how to make the request successful.",
      "ja": "レビュー期間内に、指定された専門家は登録リクエストを認可または拒否し、この決定をレビューリストとIANAに通知します。拒否には、要求を成功させる方法についての説明と、該当する場合は提案を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "IANA must only accept registry updates from the Designated Expert(s) and should direct all requests for registration to the review mailing list.",
      "ja": "IANAは、指定された専門家からのレジストリの更新のみを受け入れ、登録のすべてのリクエストをレビューメーリングリストに転送する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.1.1. Registration Template",
      "section_title": true,
      "ja": "11.1.1. 登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Type name: The name requested (e.g., \"example\").",
      "ja": "タイプ名：要求された名前（「例」など）。"
    },
    {
      "indent": 3,
      "text": "Additional Token Endpoint Response Parameters: Additional response parameters returned together with the \"access_token\" parameter. New parameters MUST be separately registered in the OAuth Parameters registry as described by Section 11.2.",
      "ja": "追加のトークンエンドポイント応答パラメーター：「access_token」パラメーターと一緒に返される追加の応答パラメーター。セクション11.2で説明されているように、新しいパラメーターはOAuthパラメーターレジストリに個別に登録する必要があります。"
    },
    {
      "indent": 3,
      "text": "HTTP Authentication Scheme(s): The HTTP authentication scheme name(s), if any, used to authenticate protected resource requests using access tokens of this type.",
      "ja": "HTTP認証方式：このタイプのアクセストークンを使用して保護されたリソース要求を認証するために使用されるHTTP認証方式名（ある場合）。"
    },
    {
      "indent": 3,
      "text": "Change controller: For Standards Track RFCs, state \"IETF\". For others, give the name of the responsible party. Other details (e.g., postal address, email address, home page URI) may also be included.",
      "ja": "コントローラーの変更：Standards Track RFCの場合は、「IETF」と記載します。その他の場合は、責任者の名前を入力してください。その他の詳細（たとえば、住所、電子メールアドレス、ホームページURI）も含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Specification document(s): Reference to the document(s) that specify the parameter, preferably including a URI that can be used to retrieve a copy of the document(s). An indication of the relevant sections may also be included but is not required.",
      "ja": "仕様ドキュメント：パラメータを指定するドキュメントへの参照。できればドキュメントのコピーを取得するために使用できるURIを含むことが望ましい。関連セクションの表示も含まれる場合がありますが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "11.2. OAuth Parameters Registry",
      "section_title": true,
      "ja": "11.2. OAuthパラメータレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification establishes the OAuth Parameters registry.",
      "ja": "この仕様は、OAuthパラメータレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Additional parameters for inclusion in the authorization endpoint request, the authorization endpoint response, the token endpoint request, or the token endpoint response are registered with a Specification Required ([RFC5226]) after a two-week review period on the oauth-ext-review@ietf.org mailing list, on the advice of one or more Designated Experts. However, to allow for the allocation of values prior to publication, the Designated Expert(s) may approve registration once they are satisfied that such a specification will be published.",
      "ja": "認可エンドポイントリクエスト、認可エンドポイントレスポンス、トークンエンドポイントリクエスト、またはトークンエンドポイントレスポンスに含めるための追加パラメーターは、oauth-ext-reviewで2週間のレビュー期間の後に、必要な仕様（[RFC5226]）に登録されます。 @ ietf.orgメーリングリスト。1人以上の指定専門家の助言に基づいています。ただし、公開前の値の割り当てを可能にするために、指定された専門家は、そのような仕様が公開されることに納得したら、登録を認可することができます。"
    },
    {
      "indent": 3,
      "text": "Registration requests must be sent to the oauth-ext-review@ietf.org mailing list for review and comment, with an appropriate subject (e.g., \"Request for parameter: example\").",
      "ja": "登録リクエストは、適切な件名（例：「パラメーターのリクエスト：例」）とともに、レビューとコメントのためにoauth-ext-review@ietf.orgメーリングリストに送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Within the review period, the Designated Expert(s) will either approve or deny the registration request, communicating this decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions as to how to make the request successful.",
      "ja": "レビュー期間内に、指定された専門家は登録リクエストを認可または拒否し、この決定をレビューリストとIANAに通知します。拒否には、要求を成功させる方法についての説明と、該当する場合は提案を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "IANA must only accept registry updates from the Designated Expert(s) and should direct all requests for registration to the review mailing list.",
      "ja": "IANAは、指定された専門家からのレジストリの更新のみを受け入れ、登録のすべてのリクエストをレビューメーリングリストに転送する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.2.1. Registration Template",
      "section_title": true,
      "ja": "11.2.1. 登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Parameter name: The name requested (e.g., \"example\").",
      "ja": "パラメータ名：要求された名前（「例」など）。"
    },
    {
      "indent": 3,
      "text": "Parameter usage location: The location(s) where parameter can be used. The possible locations are authorization request, authorization response, token request, or token response.",
      "ja": "パラメータの使用場所：パラメータを使用できる場所。可能な場所は、許可要求、許可応答、トークン要求、またはトークン応答です。"
    },
    {
      "indent": 3,
      "text": "Change controller: For Standards Track RFCs, state \"IETF\". For others, give the name of the responsible party. Other details (e.g., postal address, email address, home page URI) may also be included.",
      "ja": "コントローラーの変更：Standards Track RFCの場合は、「IETF」と記載します。その他の場合は、責任者の名前を入力してください。その他の詳細（たとえば、住所、電子メールアドレス、ホームページURI）も含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Specification document(s): Reference to the document(s) that specify the parameter, preferably including a URI that can be used to retrieve a copy of the document(s). An indication of the relevant sections may also be included but is not required.",
      "ja": "仕様ドキュメント：パラメータを指定するドキュメントへの参照。できればドキュメントのコピーを取得するために使用できるURIを含むことが望ましい。関連セクションの表示も含まれる場合がありますが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "11.2.2. Initial Registry Contents",
      "section_title": true,
      "ja": "11.2.2. レジストリの初期内容"
    },
    {
      "indent": 3,
      "text": "The OAuth Parameters registry's initial contents are:",
      "ja": "OAuthパラメータレジストリの初期コンテンツは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Parameter name: client_id o Parameter usage location: authorization request, token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：client_id o パラメーターの使用場所：認可要求、トークン要求 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: client_secret o Parameter usage location: token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメータ名：client_secret o パラメータの使用場所：トークンリクエスト o 変更コントローラ：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: response_type o Parameter usage location: authorization request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメータ名：response_type o パラメータの使用場所：認可リクエスト o 変更コントローラ：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: redirect_uri o Parameter usage location: authorization request, token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：redirect_uri o パラメーターの使用場所：認可要求、トークン要求 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: scope o Parameter usage location: authorization request, authorization response, token request, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：スコープo パラメーターの使用場所：認可要求、認可応答、トークン要求、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: state o Parameter usage location: authorization request, authorization response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：状態o パラメーターの使用場所：認可要求、認可応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 0,
      "text": "   o  Parameter name: code\n   o  Parameter usage location: authorization response, token request\n   o  Change controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter name: error_description\n   o  Parameter usage location: authorization response, token response\n   o  Change controller: IETF\n   o  Specification document(s): RFC 6749",
      "raw": true
    },
    {
      "indent": 3,
      "text": "o Parameter name: error_uri o Parameter usage location: authorization response, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：error_uri o パラメーターの使用場所：認可応答、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: grant_type o Parameter usage location: token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：grant_type o パラメーターの使用場所：トークン要求 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: access_token o Parameter usage location: authorization response, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：access_token o パラメーターの使用場所：認可応答、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: token_type o Parameter usage location: authorization response, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：token_type o パラメーターの使用場所：認可応答、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: expires_in o Parameter usage location: authorization response, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：expires_in o パラメーターの使用場所：認可応答、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: username o Parameter usage location: token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：ユーザー名 o パラメーターの使用場所：トークンリクエスト o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: password o Parameter usage location: token request o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメータ名：パスワード o パラメータの使用場所：トークンリクエスト o 変更コントローラ：IETF  o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Parameter name: refresh_token o Parameter usage location: token request, token response o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o パラメーター名：refresh_token o パラメーターの使用場所：トークン要求、トークン応答 o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 0,
      "text": "11.3. OAuth Authorization Endpoint Response Types Registry",
      "section_title": true,
      "ja": "11.3. OAuth認可エンドポイントレスポンスタイプレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification establishes the OAuth Authorization Endpoint Response Types registry.",
      "ja": "この仕様は、OAuth認可エンドポイントレスポンスタイプレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Additional response types for use with the authorization endpoint are registered with a Specification Required ([RFC5226]) after a two-week review period on the oauth-ext-review@ietf.org mailing list, on the advice of one or more Designated Experts. However, to allow for the allocation of values prior to publication, the Designated Expert(s) may approve registration once they are satisfied that such a specification will be published.",
      "ja": "認可エンドポイントで使用するための追加の応答タイプは、1名以上のDesignated Expertsの助言により、oauth-ext-review @ ietf.orgメーリングリストで2週間のレビュー期間の後に必要な仕様（[RFC5226]）に登録されます。 。ただし、公開前の値の割り当てを可能にするために、指定された専門家は、そのような仕様が公開されることに納得したら、登録を認可することができます。"
    },
    {
      "indent": 3,
      "text": "Registration requests must be sent to the oauth-ext-review@ietf.org mailing list for review and comment, with an appropriate subject (e.g., \"Request for response type: example\").",
      "ja": "登録リクエストは、適切な件名（例：「レスポンスタイプのリクエスト：例」）とともに、レビューとコメントのためにoauth-ext-review@ietf.orgメーリングリストに送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Within the review period, the Designated Expert(s) will either approve or deny the registration request, communicating this decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions as to how to make the request successful.",
      "ja": "レビュー期間内に、指定された専門家は登録リクエストを認可または拒否し、この決定をレビューリストとIANAに通知します。拒否には、要求を成功させる方法についての説明と、該当する場合は提案を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "IANA must only accept registry updates from the Designated Expert(s) and should direct all requests for registration to the review mailing list.",
      "ja": "IANAは、指定された専門家からのレジストリの更新のみを受け入れ、登録のすべてのリクエストをレビューメーリングリストに転送する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.3.1. Registration Template",
      "section_title": true,
      "ja": "11.3.1. 登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Response type name: The name requested (e.g., \"example\").",
      "ja": "レスポンスタイプ名：リクエストされた名前（例：「example」）。"
    },
    {
      "indent": 3,
      "text": "Change controller: For Standards Track RFCs, state \"IETF\". For others, give the name of the responsible party. Other details (e.g., postal address, email address, home page URI) may also be included.",
      "ja": "コントローラーの変更：Standards Track RFCの場合は、「IETF」と記載します。その他の場合は、責任者の名前を入力してください。その他の詳細（たとえば、住所、電子メールアドレス、ホームページURI）も含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Specification document(s): Reference to the document(s) that specify the type, preferably including a URI that can be used to retrieve a copy of the document(s). An indication of the relevant sections may also be included but is not required.",
      "ja": "仕様ドキュメント：タイプを指定するドキュメントへの参照。できればドキュメントのコピーを取得するために使用できるURIを含むことが望ましい。関連セクションの表示も含まれる場合がありますが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "11.3.2. Initial Registry Contents",
      "section_title": true,
      "ja": "11.3.2. レジストリの初期内容"
    },
    {
      "indent": 3,
      "text": "The OAuth Authorization Endpoint Response Types registry's initial contents are:",
      "ja": "OAuth認可エンドポイントレスポンスタイプレジストリの初期コンテンツは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Response type name: code o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o 応答タイプ名：コード o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 3,
      "text": "o Response type name: token o Change controller: IETF o Specification document(s): RFC 6749",
      "ja": "o 応答タイプ名：トークン o 変更コントローラー：IETF o 仕様書：RFC 6749"
    },
    {
      "indent": 0,
      "text": "11.4. OAuth Extensions Error Registry",
      "section_title": true,
      "ja": "11.4. OAuth拡張エラーレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification establishes the OAuth Extensions Error registry.",
      "ja": "この仕様は、OAuth拡張エラーレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Additional error codes used together with other protocol extensions (i.e., extension grant types, access token types, or extension parameters) are registered with a Specification Required ([RFC5226]) after a two-week review period on the oauth-ext-review@ietf.org mailing list, on the advice of one or more Designated Experts. However, to allow for the allocation of values prior to publication, the Designated Expert(s) may approve registration once they are satisfied that such a specification will be published.",
      "ja": "他のプロトコル拡張（つまり、拡張付与タイプ、アクセストークンタイプ、または拡張パラメーター）と一緒に使用される追加のエラーコードは、oauth-ext-review @で2週間のレビュー期間の後に、必要な仕様（[RFC5226]）に登録されます。 1人以上のDesignated Expertsの助言に基づくietf.orgメーリングリスト。ただし、公開前の値の割り当てを可能にするために、指定された専門家は、そのような仕様が公開されることに納得したら、登録を認可することができます。"
    },
    {
      "indent": 3,
      "text": "Registration requests must be sent to the oauth-ext-review@ietf.org mailing list for review and comment, with an appropriate subject (e.g., \"Request for error code: example\").",
      "ja": "登録リクエストは、適切な件名（例：「エラーコードのリクエスト：例」）とともに、レビューとコメントのためにoauth-ext-review@ietf.orgメーリングリストに送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Within the review period, the Designated Expert(s) will either approve or deny the registration request, communicating this decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions as to how to make the request successful.",
      "ja": "レビュー期間内に、指定された専門家は登録リクエストを認可または拒否し、この決定をレビューリストとIANAに通知します。拒否には、要求を成功させる方法についての説明と、該当する場合は提案を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "IANA must only accept registry updates from the Designated Expert(s) and should direct all requests for registration to the review mailing list.",
      "ja": "IANAは、指定された専門家からのレジストリの更新のみを受け入れ、登録のすべてのリクエストをレビューメーリングリストに転送する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.4.1. Registration Template",
      "section_title": true,
      "ja": "11.4.1. 登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Error name: The name requested (e.g., \"example\"). Values for the error name MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.",
      "ja": "エラー名：要求された名前（「例」など）。エラー名の値には、セット%x20-21 / %x23-5B / %x5D-7E 以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "Error usage location: The location(s) where the error can be used. The possible locations are authorization code grant error response (Section 4.1.2.1), implicit grant error response (Section 4.2.2.1), token error response (Section 5.2), or resource access error response (Section 7.2).",
      "ja": "エラーの使用場所：エラーを使用できる場所。可能な場所は、認証コード付与エラー応答（セクション4.1.2.1）、暗黙的付与エラー応答（セクション4.2.2.1）、トークンエラー応答（セクション5.2）、またはリソースアクセスエラー応答（セクション7.2）です。"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: The name of the extension grant type, access token type, or extension parameter that the error code is used in conjunction with.",
      "ja": "関連プロトコル拡張：エラーコードが一緒に使用される拡張付与タイプ、アクセストークンタイプ、または拡張パラメーターの名前。"
    },
    {
      "indent": 3,
      "text": "Change controller: For Standards Track RFCs, state \"IETF\". For others, give the name of the responsible party. Other details (e.g., postal address, email address, home page URI) may also be included.",
      "ja": "コントローラーの変更：Standards Track RFCの場合は、「IETF」と記載します。その他の場合は、責任者の名前を入力してください。その他の詳細（たとえば、住所、電子メールアドレス、ホームページURI）も含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Specification document(s): Reference to the document(s) that specify the error code, preferably including a URI that can be used to retrieve a copy of the document(s). An indication of the relevant sections may also be included but is not required.",
      "ja": "仕様ドキュメント：エラーコードを指定するドキュメントへの参照。できればドキュメントのコピーを取得するために使用できるURIを含むことが望ましい。関連セクションの表示も含まれる場合がありますが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "12. References",
      "section_title": true,
      "ja": "12. 参考文献"
    },
    {
      "indent": 0,
      "text": "12.1. Normative References",
      "section_title": true,
      "ja": "12.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner, S., 「要件レベルを示すためにRFCで使用するキーワード」, BCP 14, RFC 2119, 1997年3月."
    },
    {
      "indent": 3,
      "text": "[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[RFC2246] Dierks, T. およびC. Allen, 「The TLS Protocol Version 1.0」, RFC 2246, 1999年1月."
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., およびT. Berners-Lee, 「ハイパーテキスト転送プロトコル-HTTP / 1.1」 , RFC 2616, 1999年6月."
    },
    {
      "indent": 3,
      "text": "[RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., and L. Stewart, \"HTTP Authentication: Basic and Digest Access Authentication\", RFC 2617, June 1999.",
      "ja": "[RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., およびL. Stewart, 「HTTP Authentication：Basic and Digest Access Authentication」 , RFC 2617, 1999年6月."
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.",
      "ja": "[RFC2818] Rescorla, E., 「HTTP over TLS」, RFC 2818, 2000年5月."
    },
    {
      "indent": 3,
      "text": "[RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, November 2003.",
      "ja": "[RFC3629] Yergeau, F., 「UTF-8, ISO 10646の変換フォーマット」, STD 63, RFC 3629, 2003年11月."
    },
    {
      "indent": 3,
      "text": "[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[RFC3986] Berners-Lee, T., Fielding, R., およびL. Masinter, 「Uniform Resource Identifier（URI）：Generic Syntax」, STD 66, RFC 3986, 2005年1月."
    },
    {
      "indent": 3,
      "text": "[RFC4627] Crockford, D., \"The application/json Media Type for JavaScript Object Notation (JSON)\", RFC 4627, July 2006.",
      "ja": "[RFC4627] Crockford, D., 「JavaScript Object Notation（JSON）のアプリケーション/ jsonメディアタイプ」, RFC 4627, 2006年7月."
    },
    {
      "indent": 3,
      "text": "[RFC4949] Shirey, R., \"Internet Security Glossary, Version 2\", RFC 4949, August 2007.",
      "ja": "[RFC4949] Shirey, R., 「インターネットセキュリティ用語集, バージョン2」, RFC 4949, 2007年8月."
    },
    {
      "indent": 3,
      "text": "[RFC5226] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 5226, May 2008.",
      "ja": "[RFC5226] Narten, T. およびH. Alvestrand, 「RFCでIANAの考慮事項セクションを作成するためのガイドライン」, BCP 26, RFC 5226, 2008年5月."
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008.",
      "ja": "[RFC5234] Crocker, D. およびP. Overell, 「構文仕様の拡張BNF：ABNF」, STD 68, RFC 5234, 2008年1月."
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246] Dierks, T. およびE. Rescorla, 「The Transport Layer Security（TLS）Protocol Version 1.2」, RFC 5246, 2008年8月."
    },
    {
      "indent": 3,
      "text": "[RFC6125] Saint-Andre, P. and J. Hodges, \"Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)\", RFC 6125, March 2011.",
      "ja": "[RFC6125] Saint-Andre, P. およびJ. Hodges, 「トランスポート層セキュリティ（TLS）のコンテキストでX.509（PKIX）証明書を使用したインターネット公開鍵インフラストラクチャ内のドメインベースのアプリケーションサービスIDの表現と検証」, RFC 6125, 2011年3月."
    },
    {
      "indent": 3,
      "text": "[USASCII] American National Standards Institute, \"Coded Character Set -- 7-bit American Standard Code for Information Interchange\", ANSI X3.4, 1986.",
      "ja": "[USASCII] American National Standards Institute, 「Coded Character Set-7-bit American Standard Code for Information Interchange」, ANSI X3.4, 1986."
    },
    {
      "indent": 3,
      "text": "[W3C.REC-html401-19991224] Raggett, D., Le Hors, A., and I. Jacobs, \"HTML 4.01 Specification\", World Wide Web Consortium Recommendation REC-html401-19991224, December 1999, <http://www.w3.org/TR/1999/REC-html401-19991224>.",
      "ja": "[W3C.REC-html401-19991224] Raggett, D., Le Hors, A., およびI. Jacobs, 「HTML 4.01 Specification」, World Wide Web Consortium Recommendation REC-html401-19991224, 1999年12月, <http：// www.w3.org/TR/1999/REC-html401-19991224>."
    },
    {
      "indent": 3,
      "text": "[W3C.REC-xml-20081126] Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., and F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth Edition)\", World Wide Web Consortium Recommendation REC-xml-20081126, November 2008, <http://www.w3.org/TR/2008/REC-xml-20081126>.",
      "ja": "[W3C.REC-xml-20081126] Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., およびF. Yergeau, 「Extensible Markup Language（XML）1.0（Fifth Edition）」,  World Wide Web Consortium Recommendation REC-xml-20081126, 2008年11月, <http://www.w3.org/TR/2008/REC-xml-20081126>."
    },
    {
      "indent": 0,
      "text": "12.2. Informative References",
      "section_title": true,
      "ja": "12.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[OAuth-HTTP-MAC] Hammer-Lahav, E., Ed., \"HTTP Authentication: MAC Access Authentication\", Work in Progress, February 2012.",
      "ja": "[OAuth-HTTP-MAC] Hammer-Lahav, E., 編, 「HTTP認証：MACアクセス認証」, Work in Progress, 2012年2月."
    },
    {
      "indent": 3,
      "text": "[OAuth-SAML2] Campbell, B. and C. Mortimore, \"SAML 2.0 Bearer Assertion Profiles for OAuth 2.0\", Work in Progress, September 2012.",
      "ja": "[OAuth-SAML2] Campbell, B. およびC. Mortimore, 「SAML 2.0 Bearer Assertion Profiles for OAuth 2.0」, Work in Progress, 2012年9月."
    },
    {
      "indent": 3,
      "text": "[OAuth-THREATMODEL] Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0 Threat Model and Security Considerations\", Work in Progress, October 2012.",
      "ja": "[OAuth-THREATMODEL] Lodderstedt, T., Ed., McGloin, M., およびP. Hunt, 「OAuth 2.0脅威モデルとセキュリティの考慮事項」, 作業中, 2012年10月."
    },
    {
      "indent": 3,
      "text": "[OAuth-WRAP] Hardt, D., Ed., Tom, A., Eaton, B., and Y. Goland, \"OAuth Web Resource Authorization Profiles\", Work in Progress, January 2010.",
      "ja": "[OAuth-WRAP] Hardt, D., Ed., Tom, A., Eaton, B., およびY. Goland, 「OAuth Web Resource Authorization Profiles」, Work in Progress, 2010年1月."
    },
    {
      "indent": 3,
      "text": "[RFC5849] Hammer-Lahav, E., \"The OAuth 1.0 Protocol\", RFC 5849, April 2010.",
      "ja": "[RFC5849] Hammer-Lahav, E., 「The OAuth 1.0 Protocol」, RFC 5849, 2010年4月. "
    },
    {
      "indent": 3,
      "text": "[RFC6750] Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization Framework: Bearer Token Usage\", RFC 6750, October 2012.",
      "ja": "[RFC6750]ジョーンズ, M. およびD.ハート, 「OAuth 2.0 Authorization Framework：Bearer Token Usage」, RFC 6750, 2012年10月."
    },
    {
      "indent": 0,
      "text": "Appendix A. Augmented Backus-Naur Form (ABNF) Syntax",
      "section_title": true,
      "ja": "付録A. 拡張バッカスナウアフォーム（ABNF）構文"
    },
    {
      "indent": 3,
      "text": "This section provides Augmented Backus-Naur Form (ABNF) syntax descriptions for the elements defined in this specification using the notation of [RFC5234]. The ABNF below is defined in terms of Unicode code points [W3C.REC-xml-20081126]; these characters are typically encoded in UTF-8. Elements are presented in the order first defined.",
      "ja": "このセクションでは、[RFC5234]の表記を使用して、この仕様で定義されている要素の拡張バッカスナウアフォーム（ABNF）構文について説明します。以下のABNFは、Unicodeコードポイント[W3C.REC-xml-20081126]の観点から定義されています。これらの文字は通常、UTF-8でエンコードされます。要素は最初に定義された順序で表示されます。"
    },
    {
      "indent": 3,
      "text": "Some of the definitions that follow use the \"URI-reference\" definition from [RFC3986].",
      "ja": "以下の定義の一部は、[RFC3986]の「URI参照」定義を使用しています。"
    },
    {
      "indent": 3,
      "text": "Some of the definitions that follow use these common definitions:",
      "ja": "以下の定義のいくつかは、これらの一般的な定義を使用しています。"
    },
    {
      "indent": 5,
      "text": "VSCHAR     = %x20-7E\nNQCHAR     = %x21 / %x23-5B / %x5D-7E\nNQSCHAR    = %x20-21 / %x23-5B / %x5D-7E\nUNICODECHARNOCRLF = %x09 / %x20-7E / %x80-D7FF /\n                    %xE000-FFFD / %x10000-10FFFF",
      "raw": true
    },
    {
      "indent": 3,
      "text": "(The UNICODECHARNOCRLF definition is based upon the Char definition in Section 2.2 of [W3C.REC-xml-20081126], but omitting the Carriage Return and Linefeed characters.)",
      "ja": "（UNICODECHARNOCRLF定義は、[W3C.REC-xml-20081126]のセクション2.2のChar定義に基づいていますが、改行文字と改行文字は省略されています。）"
    },
    {
      "indent": 0,
      "text": "A.1. \"client_id\" Syntax",
      "section_title": true,
      "ja": "A.1. 「client_id」構文"
    },
    {
      "indent": 3,
      "text": "The \"client_id\" element is defined in Section 2.3.1:",
      "ja": "「client_id」要素はセクション2.3.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "client-id     = *VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.2. \"client_secret\" Syntax",
      "section_title": true,
      "ja": "A.2. 「client_secret」構文"
    },
    {
      "indent": 3,
      "text": "The \"client_secret\" element is defined in Section 2.3.1:",
      "ja": "「client_secret」要素はセクション2.3.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "client-secret = *VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.3. \"response_type\" Syntax",
      "section_title": true,
      "ja": "A.3. 「response_type」構文"
    },
    {
      "indent": 3,
      "text": "The \"response_type\" element is defined in Sections 3.1.1 and 8.4:",
      "ja": "「response_type」要素は、セクション3.1.1および8.4で定義されています。"
    },
    {
      "indent": 5,
      "text": "response-type = response-name *( SP response-name )\nresponse-name = 1*response-char\nresponse-char = \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.4. \"scope\" Syntax",
      "section_title": true,
      "ja": "A.4. 「スコープ」構文"
    },
    {
      "indent": 3,
      "text": "The \"scope\" element is defined in Section 3.3:",
      "ja": "「scope」要素はセクション3.3で定義されています。"
    },
    {
      "indent": 5,
      "text": "scope       = scope-token *( SP scope-token )\nscope-token = 1*NQCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.5. \"state\" Syntax",
      "section_title": true,
      "ja": "A.5. 「状態」構文"
    },
    {
      "indent": 3,
      "text": "The \"state\" element is defined in Sections 4.1.1, 4.1.2, 4.1.2.1, 4.2.1, 4.2.2, and 4.2.2.1:",
      "ja": "「状態」要素は、セクション4.1.1、4.1.2、4.1.2.1、4.2.1、4.2.2、および4.2.2.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "state      = 1*VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.6. \"redirect_uri\" Syntax",
      "section_title": true,
      "ja": "A.6. 「redirect_uri」構文"
    },
    {
      "indent": 3,
      "text": "The \"redirect_uri\" element is defined in Sections 4.1.1, 4.1.3, and 4.2.1:",
      "ja": "「redirect_uri」要素は、セクション4.1.1、4.1.3、および4.2.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "redirect-uri      = URI-reference",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.7. \"error\" Syntax",
      "section_title": true,
      "ja": "A.7. 「エラー」構文"
    },
    {
      "indent": 3,
      "text": "The \"error\" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2, 7.2, and 8.5:",
      "ja": "「エラー」要素は、セクション4.1.2.1、4.2.2.1、5.2、7.2、および8.5で定義されています。"
    },
    {
      "indent": 5,
      "text": "error             = 1*NQSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.8. \"error_description\" Syntax",
      "section_title": true,
      "ja": "A.8. 「error_description」の構文"
    },
    {
      "indent": 3,
      "text": "The \"error_description\" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2, and 7.2:",
      "ja": "「error_description」要素は、セクション4.1.2.1、4.2.2.1、5.2、および7.2で定義されています。"
    },
    {
      "indent": 5,
      "text": "error-description = 1*NQSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.9. \"error_uri\" Syntax",
      "section_title": true,
      "ja": "A.9. 「error_uri」の構文"
    },
    {
      "indent": 3,
      "text": "The \"error_uri\" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2, and 7.2:",
      "ja": "「error_uri」要素は、セクション4.1.2.1、4.2.2.1、5.2、および7.2で定義されています。"
    },
    {
      "indent": 5,
      "text": "error-uri         = URI-reference",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.10. \"grant_type\" Syntax",
      "section_title": true,
      "ja": "A.10. 「grant_type」構文"
    },
    {
      "indent": 3,
      "text": "The \"grant_type\" element is defined in Sections 4.1.3, 4.3.2, 4.4.2, 4.5, and 6:",
      "ja": "「grant_type」要素は、セクション4.1.3、4.3.2、4.4.2、4.5、および6で定義されています。"
    },
    {
      "indent": 5,
      "text": "grant-type = grant-name / URI-reference\ngrant-name = 1*name-char\nname-char  = \"-\" / \".\" / \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.11. \"code\" Syntax",
      "section_title": true,
      "ja": "A.11. 「コード」構文"
    },
    {
      "indent": 3,
      "text": "The \"code\" element is defined in Section 4.1.3:",
      "ja": "「コード」要素はセクション4.1.3で定義されています。"
    },
    {
      "indent": 5,
      "text": "code       = 1*VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.12. \"access_token\" Syntax",
      "section_title": true,
      "ja": "A.12. 「access_token」構文"
    },
    {
      "indent": 3,
      "text": "The \"access_token\" element is defined in Sections 4.2.2 and 5.1:",
      "ja": "「access_token」要素は、セクション4.2.2および5.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "access-token = 1*VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.13. \"token_type\" Syntax",
      "section_title": true,
      "ja": "A.13. 「token_type」構文"
    },
    {
      "indent": 3,
      "text": "The \"token_type\" element is defined in Sections 4.2.2, 5.1, and 8.1:",
      "ja": "「token_type」要素は、セクション4.2.2、5.1、および8.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "token-type = type-name / URI-reference\ntype-name  = 1*name-char\nname-char  = \"-\" / \".\" / \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.14. \"expires_in\" Syntax",
      "section_title": true,
      "ja": "A.14. 「expires_in」構文"
    },
    {
      "indent": 3,
      "text": "The \"expires_in\" element is defined in Sections 4.2.2 and 5.1:",
      "ja": "「expires_in」要素は、セクション4.2.2および5.1で定義されています。"
    },
    {
      "indent": 5,
      "text": "expires-in = 1*DIGIT",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.15. \"username\" Syntax",
      "section_title": true,
      "ja": "A.15. 「username」構文"
    },
    {
      "indent": 3,
      "text": "The \"username\" element is defined in Section 4.3.2:",
      "ja": "「username」要素はセクション4.3.2で定義されています。"
    },
    {
      "indent": 5,
      "text": "username = *UNICODECHARNOCRLF",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.16. \"password\" Syntax",
      "section_title": true,
      "ja": "A.16. 「パスワード」構文"
    },
    {
      "indent": 3,
      "text": "The \"password\" element is defined in Section 4.3.2:",
      "ja": "「password」要素はセクション4.3.2で定義されています。"
    },
    {
      "indent": 5,
      "text": "password = *UNICODECHARNOCRLF",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.17. \"refresh_token\" Syntax",
      "section_title": true,
      "ja": "A.17. 「refresh_token」構文"
    },
    {
      "indent": 3,
      "text": "The \"refresh_token\" element is defined in Sections 5.1 and 6:",
      "ja": "「refresh_token」要素は、セクション5.1および6で定義されています。"
    },
    {
      "indent": 5,
      "text": "refresh-token = 1*VSCHAR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A.18. Endpoint Parameter Syntax",
      "section_title": true,
      "ja": "A.18. エンドポイントパラメータの構文"
    },
    {
      "indent": 3,
      "text": "The syntax for new endpoint parameters is defined in Section 8.2:",
      "ja": "新しいエンドポイントパラメータの構文は、セクション8.2で定義されています。"
    },
    {
      "indent": 5,
      "text": "param-name = 1*name-char\nname-char  = \"-\" / \".\" / \"_\" / DIGIT / ALPHA",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Appendix B. Use of application/x-www-form-urlencoded Media Type",
      "section_title": true,
      "ja": "付録B. application/x-www-form-urlencodedメディアタイプの使用"
    },
    {
      "indent": 3,
      "text": "At the time of publication of this specification, the \"application/x-www-form-urlencoded\" media type was defined in Section 17.13.4 of [W3C.REC-html401-19991224] but not registered in the IANA MIME Media Types registry (<http://www.iana.org/assignments/media-types>). Furthermore, that definition is incomplete, as it does not consider non-US-ASCII characters.",
      "ja": "この仕様の公開時点で、「application/x-www-form-urlencoded」メディアタイプは[W3C.REC-html401-19991224]のセクション17.13.4で定義されていますが、IANA MIMEメディアタイプレジストリに登録されていません（<http://www.iana.org/assignments/media-types>）。さらに、US-ASCII以外の文字は考慮されないため、その定義は不完全です。"
    },
    {
      "indent": 3,
      "text": "To address this shortcoming when generating payloads using this media type, names and values MUST be encoded using the UTF-8 character encoding scheme [RFC3629] first; the resulting octet sequence then needs to be further encoded using the escaping rules defined in [W3C.REC-html401-19991224].",
      "ja": "このメディアタイプを使用してペイロードを生成するときにこの欠点に対処するには、名前と値を最初にUTF-8文字エンコードスキーム[RFC3629]を使用してエンコードする必要があります。結果のオクテットシーケンスは、[W3C.REC-html401-19991224]で定義されたエスケープルールを使用してさらにエンコードする必要があります。"
    },
    {
      "indent": 3,
      "text": "When parsing data from a payload using this media type, the names and values resulting from reversing the name/value encoding consequently need to be treated as octet sequences, to be decoded using the UTF-8 character encoding scheme.",
      "ja": "このメディアタイプを使用してペイロードからデータを解析する場合、名前と値のエンコーディングを逆にした結果の名前と値は、UTF-8文字エンコーディングスキームを使用してデコードするには、オクテットシーケンスとして処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the value consisting of the six Unicode code points (1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN), (3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN), (5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded into the octet sequence below (using hexadecimal notation):",
      "ja": "たとえば、6つのUnicodeコードポイントで構成される値（1）U + 0020（スペース）、（2）U + 0025（パーセント記号）、（3）U + 0026（アンパサンド）、（4）U + 002B（ PLUS SIGN）、（5）U + 00A3（POUND SIGN）、および（6）U + 20AC（EURO SIGN）は、以下のオクテットシーケンスにエンコードされます（16進表記を使用）："
    },
    {
      "indent": 5,
      "text": "20 25 26 2B C2 A3 E2 82 AC",
      "raw": true
    },
    {
      "indent": 3,
      "text": "and then represented in the payload as:",
      "ja": "ペイロードでは次のように表されます。"
    },
    {
      "indent": 5,
      "text": "+%25%26%2B%C2%A3%E2%82%AC",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Appendix C. Acknowledgements",
      "section_title": true,
      "ja": "付録C. 謝辞"
    },
    {
      "indent": 3,
      "text": "The initial OAuth 2.0 protocol specification was edited by David Recordon, based on two previous publications: the OAuth 1.0 community specification [RFC5849], and OAuth WRAP (OAuth Web Resource Authorization Profiles) [OAuth-WRAP]. Eran Hammer then edited many of the intermediate drafts that evolved into this RFC. The Security Considerations section was drafted by Torsten Lodderstedt, Mark McGloin, Phil Hunt, Anthony Nadalin, and John Bradley. The section on use of the \"application/x-www-form-urlencoded\" media type was drafted by Julian Reschke. The ABNF section was drafted by Michael B. Jones.",
      "ja": "最初のOAuth 2.0プロトコル仕様は、以前の2つの出版物、OAuth 1.0コミュニティ仕様[RFC5849]、およびOAuth WRAP（OAuth Web Resource Authorization Profiles）[OAuth-WRAP]に基づいて、David Recordonによって編集されました。その後、Eran Hammerは、このRFCに発展した中間ドラフトの多くを編集しました。 「セキュリティに関する考慮事項」セクションは、Torsten Lodderstedt、Mark McGloin、Phil Hunt、Anthony Nadalin、およびJohn Bradleyによって起草されました。 「application/x-www-form-urlencoded」メディアタイプの使用に関するセクションは、Julian Reschkeによって作成されました。 ABNFセクションは、Michael B. Jonesによって起草されました。"
    },
    {
      "indent": 3,
      "text": "The OAuth 1.0 community specification was edited by Eran Hammer and authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M. Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton, Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler, Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.",
      "ja": "OAuth 1.0コミュニティ仕様は、Eran Hammerによって編集され、Mark Atwood、Dirk Ba​​lfanz、Darren Bounds、Richard M. Conlan、Blaine Cook、Lea Culver、Breno de Medeiros、Brian Eaton、Kellan Elliott-McCrea、Larry Halff、Eran Hammerによって作成されました、ベンローリー、クリスメッシーナ、ジョンパンツァー、サムクィグリー、デビッドレコートン、エランサンドラー、ジョナサンサージェント、トッドシーリング、ブライアンスレシンスキー、アンディスミス。"
    },
    {
      "indent": 3,
      "text": "The OAuth WRAP specification was edited by Dick Hardt and authored by Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.",
      "ja": "OAuth WRAP仕様は、Dick Hardtによって編集され、Brian Eaton、Yaron Y. Goland、Dick Hardt、およびAllen Tomによって作成されました。"
    },
    {
      "indent": 3,
      "text": "This specification is the work of the OAuth Working Group, which includes dozens of active and dedicated participants. In particular, the following individuals contributed ideas, feedback, and wording that shaped and formed the final specification:",
      "ja": "この仕様はOAuthワーキンググループの作業であり、何十人ものアクティブで熱心な参加者が含まれています。特に、以下の個人がアイデア、フィードバック、および最終的な仕様を形成および形成した表現を提供しました。"
    },
    {
      "indent": 3,
      "text": "Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor, Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre, Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert, Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer, Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones, Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara, Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin, Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin, Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov, Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner, Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson, Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar Woodward.",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "This document was produced under the chairmanship of Blaine Cook, Peter Saint-Andre, Hannes Tschofenig, Barry Leiba, and Derek Atkins. The area directors included Lisa Dusseault, Peter Saint-Andre, and Stephen Farrell.",
      "ja": "この文書は、ブレインクック、ピーターサンタンドレ、ハンネスツコフェニグ、バリーレイバ、デレクアトキンスの議長の下で作成されました。エリアディレクターには、Lisa Dusseault、Peter Saint-Andre、Stephen Farrellが含まれていました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Dick Hardt (editor) Microsoft",
      "ja": "ディック・ハート（編集者）マイクロソフト"
    },
    {
      "indent": 3,
      "text": "EMail: dick.hardt@gmail.com\nURI:   http://dickhardt.org/",
      "raw": true
    }
  ]
}