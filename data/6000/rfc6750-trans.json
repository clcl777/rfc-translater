{
  "title": {
    "text": "RFC 6750 - The OAuth 2.0 Authorization Framework: Bearer Token Usage",
    "ja": "RFC 6750 - OAuth 2.0 Authorization Framework：Bearer Token Usage"
  },
  "number": 6750,
  "created_at": "2020-08-15 21:07:46.012645+09:00",
  "updated_by": "自動翻訳＆手動修正",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          M. Jones\nRequest for Comments: 6750                                     Microsoft\nCategory: Standards Track                                       D. Hardt\nISSN: 2070-1721                                              Independent\n                                                            October 2012",
      "raw": true
    },
    {
      "indent": 7,
      "text": "The OAuth 2.0 Authorization Framework: Bearer Token Usage",
      "ja": "OAuth 2.0 Authorization Framework：Bearer Token Usage"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. Any party in possession of a bearer token (a \"bearer\") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.",
      "ja": "この仕様では、HTTPリクエストでベアラートークンを使用してOAuth 2.0で保護されたリソースにアクセスする方法について説明します。無記名トークン（「無記名」）を所持している当事者は、それを使用して、関連するリソースにアクセスできます（暗号鍵の所持を示すことなく）。誤用を防ぐために、無記名トークンは保管および輸送中の漏洩から保護する必要があります。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置づけ"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が認可されました。インターネット標準の詳細については、RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6750.",
      "ja": "このドキュメントの現在のステータス、エラッタ、フィードバックの提供方法に関する情報は、http://www.rfc-editor.org/info/rfc6750 で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2012 IETF Trustおよびドキュメントの作成者として特定された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Notational Conventions .....................................3\n   1.2. Terminology ................................................3\n   1.3. Overview ...................................................3\n2. Authenticated Requests ..........................................4\n   2.1. Authorization Request Header Field .........................5\n   2.2. Form-Encoded Body Parameter ................................5\n   2.3. URI Query Parameter ........................................6\n3. The WWW-Authenticate Response Header Field ......................7\n   3.1. Error Codes ................................................9\n4. Example Access Token Response ..................................10\n5. Security Considerations ........................................10\n   5.1. Security Threats ..........................................10\n   5.2. Threat Mitigation .........................................11\n   5.3. Summary of Recommendations ................................13\n6. IANA Considerations ............................................14\n   6.1. OAuth Access Token Type Registration ......................14\n        6.1.1. The \"Bearer\" OAuth Access Token Type ...............14\n   6.2. OAuth Extensions Error Registration .......................14\n        6.2.1. The \"invalid_request\" Error Value ..................14\n        6.2.2. The \"invalid_token\" Error Value ....................15\n        6.2.3. The \"insufficient_scope\" Error Value ...............15\n7. References .....................................................15\n   7.1. Normative References ......................................15\n   7.2. Informative References ....................................17\nAppendix A. Acknowledgements ......................................18",
      "toc": true,
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "OAuth enables clients to access protected resources by obtaining an access token, which is defined in \"The OAuth 2.0 Authorization Framework\" [RFC6749] as \"a string representing an access authorization issued to the client\", rather than using the resource owner's credentials directly.",
      "ja": "OAuthは、リソースオーナーの資格情報を直接使用するのではなく、「OAuth 2.0 Authorization Framework」[RFC6749]で「クライアントに発行されたアクセス認証を表す文字列」として定義されているアクセストークンを取得することで、クライアントが保護されたリソースにアクセスできるようにします。"
    },
    {
      "indent": 3,
      "text": "Tokens are issued to clients by an authorization server with the approval of the resource owner. The client uses the access token to access the protected resources hosted by the resource server. This specification describes how to make protected resource requests when the OAuth access token is a bearer token.",
      "ja": "トークンは、リソース所有者の認可を得て、認可サーバーによってクライアントに発行されます。クライアントは、アクセストークンを使用して、リソースサーバーによってホストされている保護されたリソースにアクセスします。この仕様では、OAuthアクセストークンがベアラートークンである場合に保護されたリソース要求を作成する方法について説明します。"
    },
    {
      "indent": 0,
      "text": " This specification defines the use of bearer tokens over HTTP/1.1 [RFC2616] using Transport Layer Security (TLS) [RFC5246] to access protected resources. TLS is mandatory to implement and use with this specification; other specifications may extend this specification for use with other protocols. While designed for use with access tokens resulting from OAuth 2.0 authorization [RFC6749] flows to access OAuth protected resources, this specification actually defines a general HTTP authorization method that can be used with bearer tokens from any source to access any resources protected by those bearer tokens. The Bearer authentication scheme is intended primarily for server authentication using the WWW-Authenticate and Authorization HTTP headers but does not preclude its use for proxy authentication.",
      "ja": "この仕様では、トランスポート層セキュリティ（TLS）[RFC5246] を使用してHTTP / 1.1 [RFC2616]でベアラートークンを使用し、保護されたリソースにアクセスすることを定義しています。この仕様を実装して使用するには、TLSが必須です。他の仕様では、この仕様を拡張して他のプロトコルで使用できます。 OAuth 2.0認可[RFC6749]フローからのアクセストークンで使用してOAuth保護リソースにアクセスするように設計されていますが、この仕様は実際には、任意のソースからのベアラートークンで使用して、これらのベアラートークンで保護されたリソースにアクセスできる一般的なHTTP認可方法を定義しています。 。 Bearer認証方式は、主にWWW-AuthenticateおよびAuthorization HTTPヘッダーを使用したサーバー認証を目的としていますが、プロキシ認証の使用を排除するものではありません。"
    },
    {
      "indent": 0,
      "text": "1.1. Notational Conventions",
      "section_title": true,
      "ja": "1.1. 表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in \"Key words for use in RFCs to Indicate Requirement Levels\" [RFC2119].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、「要件レベルを示すためのRFCで使用するキーワード」[RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This document uses the Augmented Backus-Naur Form (ABNF) notation of [RFC5234]. Additionally, the following rules are included from HTTP/1.1 [RFC2617]: auth-param and auth-scheme; and from \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986]: URI-reference.",
      "ja": "このドキュメントでは、[RFC5234]の拡張バッカスナウアフォーム（ABNF）表記を使用しています。さらに、HTTP / 1.1 [RFC2617]には次のルールが含まれています。auth-paramおよびauth-scheme。および「Uniform Resource Identifier（URI）：Generic Syntax」[RFC3986]：URI-referenceから。"
    },
    {
      "indent": 3,
      "text": "Unless otherwise noted, all the protocol parameter names and values are case sensitive.",
      "ja": "特に明記しない限り、すべてのプロトコルパラメータの名前と値は大文字と小文字が区別されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2. 用語"
    },
    {
      "indent": 3,
      "text": "Bearer Token A security token with the property that any party in possession of the token (a \"bearer\") can use the token in any way that any other party in possession of it can. Using a bearer token does not require a bearer to prove possession of cryptographic key material (proof-of-possession).",
      "ja": "ベアラートークントークンを所持するすべての当事者（「ベアラー」）が、トークンを所持する他の当事者が使用できる方法でトークンを使用できるという特性を持つセキュリティトークン。無記名トークンを使用しても、無記名で暗号鍵素材の所有を証明する必要はありません（所有証明）。"
    },
    {
      "indent": 3,
      "text": "All other terms are as defined in \"The OAuth 2.0 Authorization Framework\" [RFC6749].",
      "ja": "他のすべての用語は、「The OAuth 2.0 Authorization Framework」[RFC6749]で定義されています。"
    },
    {
      "indent": 0,
      "text": "1.3. Overview",
      "section_title": true,
      "ja": "1.3. 概観"
    },
    {
      "indent": 3,
      "text": "OAuth provides a method for clients to access a protected resource on behalf of a resource owner. In the general case, before a client can access a protected resource, it must first obtain an authorization grant from the resource owner and then exchange the authorization grant for an access token. The access token represents the grant's scope, duration, and other attributes granted by the authorization grant. The client accesses the protected resource by presenting the access token to the resource server. In some cases, a client can directly present its own credentials to an authorization server to obtain an access token without having to first obtain an authorization grant from a resource owner.",
      "ja": "OAuthは、クライアントがリソース所有者の代わりに保護されたリソースにアクセスするための方法を提供します。一般的なケースでは、クライアントが保護されたリソースにアクセスする前に、まずリソース所有者から許可付与を取得し、次に許可付与をアクセストークンと交換する必要があります。アクセストークンは、認可のスコープ、期間、および認可付与によって付与されるその他の属性を表します。クライアントは、リソースサーバーにアクセストークンを提示して、保護されたリソースにアクセスします。場合によっては、クライアントは自身の資格情報を認可サーバーに直接提示して、最初にリソース所有者から認可付与を取得しなくてもアクセストークンを取得できます。"
    },
    {
      "indent": 3,
      "text": "The access token provides an abstraction, replacing different authorization constructs (e.g., username and password, assertion) for a single token understood by the resource server. This abstraction enables issuing access tokens valid for a short time period, as well as removing the resource server's need to understand a wide range of authentication schemes.",
      "ja": "アクセストークンは抽象化を提供し、リソースサーバーが理解する単一のトークンのさまざまな認証構成（ユーザー名とパスワード、アサーションなど）を置き換えます。この抽象化により、短期間に有効なアクセストークンを発行できるだけでなく、リソースサーバーが幅広い認証スキームを理解する必要をなくすことができます。"
    },
    {
      "indent": 5,
      "text": "+--------+                               +---------------+\n|        |--(A)- Authorization Request ->|   Resource    |\n|        |                               |     Owner     |\n|        |<-(B)-- Authorization Grant ---|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(C)-- Authorization Grant -->| Authorization |\n| Client |                               |     Server    |\n|        |<-(D)----- Access Token -------|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(E)----- Access Token ------>|    Resource   |\n|        |                               |     Server    |\n|        |<-(F)--- Protected Resource ---|               |\n+--------+                               +---------------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: Abstract Protocol Flow",
      "ja": "図1：プロトコルフローの抽象図"
    },
    {
      "indent": 3,
      "text": "The abstract OAuth 2.0 flow illustrated in Figure 1 describes the interaction between the client, resource owner, authorization server, and resource server (described in [RFC6749]). The following two steps are specified within this document:",
      "ja": "図1に示されている抽象的なOAuth 2.0フローは、クライアント、リソース所有者、認可サーバー、およびリソースサーバー（[RFC6749]で説明）間の相互作用を説明しています。このドキュメントでは、次の2つの手順を説明しています。"
    },
    {
      "indent": 3,
      "text": "(E) The client requests the protected resource from the resource server and authenticates by presenting the access token.",
      "ja": "（E）クライアントは保護されたリソースをリソースサーバーに要求し、アクセストークンを提示して認証します。"
    },
    {
      "indent": 3,
      "text": "(F) The resource server validates the access token, and if valid, serves the request.",
      "ja": "（F）リソースサーバーはアクセストークンを検証し、有効な場合はリクエストを処理します。"
    },
    {
      "indent": 3,
      "text": "This document also imposes semantic requirements upon the access token returned in step (D).",
      "ja": "このドキュメントでは、ステップ（D）で返されたアクセストークンにセマンティック要件も課しています。"
    },
    {
      "indent": 0,
      "text": "2. Authenticated Requests",
      "section_title": true,
      "ja": "2. 認証済みリクエスト"
    },
    {
      "indent": 3,
      "text": "This section defines three methods of sending bearer access tokens in resource requests to resource servers. Clients MUST NOT use more than one method to transmit the token in each request.",
      "ja": "このセクションでは、リソースリクエストでベアラアクセストークンをリソースサーバーに送信する3つの方法を定義します。クライアントは、各リクエストでトークンを送信するために複数のメソッドを使用してはなりません（MUST NOT）。"
    },
    {
      "indent": 0,
      "text": "2.1. Authorization Request Header Field",
      "section_title": true,
      "ja": "2.1. 認可リクエストヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the \"Authorization\" request header field defined by HTTP/1.1 [RFC2617], the client uses the \"Bearer\" authentication scheme to transmit the access token.",
      "ja": "HTTP / 1.1 [RFC2617]で定義されている「Authorization」リクエストヘッダーフィールドでアクセストークンを送信する場合、クライアントは「Bearer」認証方式を使用してアクセストークンを送信します。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "GET /resource HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer mF_9.B5f-4.1JqM",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The syntax of the \"Authorization\" header field for this scheme follows the usage of the Basic scheme defined in Section 2 of [RFC2617]. Note that, as with Basic, it does not conform to the generic syntax defined in Section 1.2 of [RFC2617] but is compatible with the general authentication framework being developed for HTTP 1.1 [HTTP-AUTH], although it does not follow the preferred practice outlined therein in order to reflect existing deployments. The syntax for Bearer credentials is as follows:",
      "ja": "このスキームの「Authorization」ヘッダーフィールドの構文は、[RFC2617]のセクション2で定義されている基本スキームの使用法に従います。 Basicと同様に、[RFC2617]のセクション1.2で定義されている一般的な構文には準拠していませんが、推奨される慣例に従っていないものの、HTTP 1.1 [HTTP-AUTH]用に開発されている一般的な認証フレームワークと互換性があります。既存の展開を反映するために、その中で概説されています。 Bearer資格情報の構文は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "b64token    = 1*( ALPHA / DIGIT /\n                  \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\ncredentials = \"Bearer\" 1*SP b64token",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Clients SHOULD make authenticated requests with a bearer token using the \"Authorization\" request header field with the \"Bearer\" HTTP authorization scheme. Resource servers MUST support this method.",
      "ja": "クライアントは、「ベアラ」HTTP認可スキームで「認可」リクエストヘッダーフィールドを使用して、ベアラトークンで認証済みリクエストを作成する必要があります。リソースサーバーはこのメソッドをサポートする必要があります。"
    },
    {
      "indent": 0,
      "text": "2.2. Form-Encoded Body Parameter",
      "section_title": true,
      "ja": "2.2. フォームエンコードされた本文パラメーター"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the HTTP request entity-body, the client adds the access token to the request-body using the \"access_token\" parameter. The client MUST NOT use this method unless all of the following conditions are met:",
      "ja": "HTTPリクエストのエンティティ本体でアクセストークンを送信する場合、クライアントは \"access_token\"パラメータを使用してリクエストボディにアクセストークンを追加します。クライアントは、次の条件がすべて満たされない限り、このメソッドを使用してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request entity-header includes the \"Content-Type\" header field set to \"application/x-www-form-urlencoded\".",
      "ja": "o HTTPリクエストのエンティティヘッダーには、「application/x-www-form-urlencoded」に設定された「Content-Type」ヘッダーフィールドが含まれています。"
    },
    {
      "indent": 3,
      "text": "o The entity-body follows the encoding requirements of the \"application/x-www-form-urlencoded\" content-type as defined by HTML 4.01 [W3C.REC-html401-19991224].",
      "ja": "o entity-bodyは、HTML 4.01 [W3C.REC-html401-19991224] で定義されている「application/x-www-form-urlencoded」コンテンツタイプのエンコーディング要件に従います。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request entity-body is single-part.",
      "ja": "o HTTPリクエストのエンティティ本体はシングルパートです。"
    },
    {
      "indent": 3,
      "text": "o The content to be encoded in the entity-body MUST consist entirely of ASCII [USASCII] characters.",
      "ja": "o entity-bodyでエンコードされるコンテンツは、すべてASCII [USASCII] 文字で構成する必要があります。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request method is one for which the request-body has defined semantics. In particular, this means that the \"GET\" method MUST NOT be used.",
      "ja": "o HTTPリクエストメソッドは、リクエストボディでセマンティクスが定義されているメソッドです。特に、これは「GET」メソッドを使用してはならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "The entity-body MAY include other request-specific parameters, in which case the \"access_token\" parameter MUST be properly separated from the request-specific parameters using \"&\" character(s) (ASCII code 38).",
      "ja": "エンティティ本体には他のリクエスト固有のパラメータを含めることができます。その場合、「access_token」パラメータは、「＆」文字（ASCIIコード38）を使用してリクエスト固有のパラメータから適切に分離する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security:",
      "ja": "たとえば、クライアントはトランスポート層セキュリティを使用して次のHTTP要求を行います。"
    },
    {
      "indent": 5,
      "text": "POST /resource HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\naccess_token=mF_9.B5f-4.1JqM",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The \"application/x-www-form-urlencoded\" method SHOULD NOT be used except in application contexts where participating browsers do not have access to the \"Authorization\" request header field. Resource servers MAY support this method.",
      "ja": "「application/x-www-form-urlencoded」メソッドは、参加しているブラウザが「Authorization」リクエストヘッダーフィールドにアクセスできないアプリケーションコンテキスト以外では使用しないでください。リソースサーバーはこの方法をサポートしてもよい（MAY）。"
    },
    {
      "indent": 0,
      "text": "2.3. URI Query Parameter",
      "section_title": true,
      "ja": "2.3. URIクエリパラメータ"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the HTTP request URI, the client adds the access token to the request URI query component as defined by \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986], using the \"access_token\" parameter.",
      "ja": "クライアントは、HTTPリクエストURIでアクセストークンを送信するときに、「access_token」パラメータを使用して、「Uniform Resource Identifier（URI）：Generic Syntax」[RFC3986]で定義されているように、リクエストURIクエリコンポーネントにアクセストークンを追加します。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security:",
      "ja": "たとえば、クライアントはトランスポート層セキュリティを使用して次のHTTP要求を行います。"
    },
    {
      "indent": 5,
      "text": "GET /resource?access_token=mF_9.B5f-4.1JqM HTTP/1.1\nHost: server.example.com",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The HTTP request URI query can include other request-specific parameters, in which case the \"access_token\" parameter MUST be properly separated from the request-specific parameters using \"&\" character(s) (ASCII code 38).",
      "ja": "HTTPリクエストURIクエリには、他のリクエスト固有のパラメーターを含めることができます。その場合、「access_token」パラメーターは、「＆」文字（ASCIIコード38）を使用してリクエスト固有のパラメーターから適切に分離する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 4,
      "text": "https://server.example.com/resource?access_token=mF_9.B5f-4.1JqM&p=q",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Clients using the URI Query Parameter method SHOULD also send a Cache-Control header containing the \"no-store\" option. Server success (2XX status) responses to these requests SHOULD contain a Cache-Control header with the \"private\" option.",
      "ja": "URIクエリパラメータメソッドを使用するクライアントは、「ストアなし」オプションを含むCache-Controlヘッダーも送信する必要があります（SHOULD）。これらのリクエストに対するサーバーの成功（2XXステータス）応答には、「プライベート」オプションが設定されたCache-Controlヘッダーが含まれている必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Because of the security weaknesses associated with the URI method (see Section 5), including the high likelihood that the URL containing the access token will be logged, it SHOULD NOT be used unless it is impossible to transport the access token in the \"Authorization\" request header field or the HTTP request entity-body. Resource servers MAY support this method.",
      "ja": "アクセストークンを含むURLがログに記録される可能性が高いなど、URIメソッド（セクション5を参照）に関連するセキュリティ上の弱点のため、「Authorization」でアクセストークンをトランスポートすることが不可能でない限り、これを使用しないでください。リクエストヘッダーフィールドまたはHTTPリクエストのエンティティ本体。リソースサーバーはこの方法をサポートしてもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "This method is included to document current use; its use is not recommended, due to its security deficiencies (see Section 5) and also because it uses a reserved query parameter name, which is counter to URI namespace best practices, per \"Architecture of the World Wide Web, Volume One\" [W3C.REC-webarch-20041215].",
      "ja": "このメソッドは、現在の使用を文書化するために含まれています。セキュリティの欠陥（セクション5を参照）と、URIネームスペースのベストプラクティスに反する予約済みのクエリパラメータ名を使用するため、その使用はお勧めしません。 .REC-webarch-20041215]。"
    },
    {
      "indent": 0,
      "text": "3. The WWW-Authenticate Response Header Field",
      "section_title": true,
      "ja": "3. WWW-Authenticate 応答ヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "If the protected resource request does not include authentication credentials or does not contain an access token that enables access to the protected resource, the resource server MUST include the HTTP \"WWW-Authenticate\" response header field; it MAY include it in response to other conditions as well. The \"WWW-Authenticate\" header field uses the framework defined by HTTP/1.1 [RFC2617].",
      "ja": "保護されたリソース要求に認証資格情報が含まれていないか、保護されたリソースへのアクセスを可能にするアクセストークンが含まれていない場合、リソースサーバーはHTTP \"WWW-Authenticate\"応答ヘッダーフィールドを含める必要があります。他の条件に応じて含めることもできます（MAY）。 「WWW-Authenticate」ヘッダーフィールドは、HTTP / 1.1 [RFC2617]で定義されたフレームワークを使用します。"
    },
    {
      "indent": 3,
      "text": "All challenges defined by this specification MUST use the auth-scheme value \"Bearer\". This scheme MUST be followed by one or more auth-param values. The auth-param attributes used or defined by this specification are as follows. Other auth-param attributes MAY be used as well.",
      "ja": "この仕様で定義されているすべてのチャレンジでは、auth-scheme値「Bearer」を使用する必要があります。このスキームの後には、1つ以上のauth-param値が続く必要があります。この仕様で使用または定義されているauth-param属性は次のとおりです。他のauth-param属性も使用できます（MAY）。"
    },
    {
      "indent": 3,
      "text": "A \"realm\" attribute MAY be included to indicate the scope of protection in the manner described in HTTP/1.1 [RFC2617]. The \"realm\" attribute MUST NOT appear more than once.",
      "ja": "HTTP / 1.1 [RFC2617]で説明されている方法で保護の範囲を示すために、「レルム」属性が含まれる場合があります。 「レルム」属性は2回以上指定してはなりません。"
    },
    {
      "indent": 0,
      "text": " The \"scope\" attribute is defined in Section 3.3 of [RFC6749]. The \"scope\" attribute is a space-delimited list of case-sensitive scope values indicating the required scope of the access token for accessing the requested resource. \"scope\" values are implementation defined; there is no centralized registry for them; allowed values are defined by the authorization server. The order of \"scope\" values is not significant. In some cases, the \"scope\" value will be used when requesting a new access token with sufficient scope of access to utilize the protected resource. Use of the \"scope\" attribute is OPTIONAL. The \"scope\" attribute MUST NOT appear more than once. The \"scope\" value is intended for programmatic use and is not meant to be displayed to end-users.",
      "ja": "「scope」属性は、[RFC6749]のセクション3.3で定義されています。 「スコープ」属性は、スペースで区切られた、大文字と小文字が区別されるスコープ値のリストで、要求されたリソースにアクセスするために必要なアクセストークンのスコープを示します。 「スコープ」の値は実装定義です。それらのための一元化されたレジストリはありません。許可される値は、許可サーバーによって定義されます。 「スコープ」値の順序は重要ではありません。場合によっては、保護されたリソースを利用するのに十分なアクセス範囲を持つ新しいアクセストークンを要求するときに、「スコープ」値が使用されます。 「スコープ」属性の使用はオプションです。 「スコープ」属性は2回以上指定してはなりません。 「スコープ」値はプログラムによる使用を目的としており、エンドユーザーに表示されることを意図していません。"
    },
    {
      "indent": 3,
      "text": "Two example scope values follow; these are taken from the OpenID Connect [OpenID.Messages] and the Open Authentication Technology Committee (OATC) Online Multimedia Authorization Protocol [OMAP] OAuth 2.0 use cases, respectively:",
      "ja": "次に2つのスコープ値の例を示します。これらは、それぞれOpenID Connect [OpenID.Messages]およびOpen Authentication Technology Committee（OATC）Online Multimedia Authorization Protocol [OMAP] OAuth 2.0ユースケースから取得されます。"
    },
    {
      "indent": 5,
      "text": "scope=\"openid profile email\"\nscope=\"urn:example:channel=HBO&urn:example:rating=G,PG-13\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "If the protected resource request included an access token and failed authentication, the resource server SHOULD include the \"error\" attribute to provide the client with the reason why the access request was declined. The parameter value is described in Section 3.1. In addition, the resource server MAY include the \"error_description\" attribute to provide developers a human-readable explanation that is not meant to be displayed to end-users. It also MAY include the \"error_uri\" attribute with an absolute URI identifying a human-readable web page explaining the error. The \"error\", \"error_description\", and \"error_uri\" attributes MUST NOT appear more than once.",
      "ja": "保護されたリソース要求にアクセストークンが含まれ、認証に失敗した場合、リソースサーバーは「エラー」属性を含めて、アクセス要求が拒否された理由をクライアントに提供する必要があります（SHOULD）。パラメータ値については、セクション3.1で説明します。さらに、リソースサーバーは、開発者にエンドユーザーに表示することを意図していない人間が読める説明を提供するために「error_description」属性を含めることができます。また、エラーを説明する人間が読める形式のWebページを識別する絶対URIを含む「error_uri」属性を含めることもできます（MAY）。 「error」、「error_description」、および「error_uri」属性は、複数回出現してはなりません。"
    },
    {
      "indent": 3,
      "text": "Values for the \"scope\" attribute (specified in Appendix A.4 of [RFC6749]) MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E for representing scope values and %x20 for delimiters between scope values. Values for the \"error\" and \"error_description\" attributes (specified in Appendixes A.7 and A.8 of [RFC6749]) MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E. Values for the \"error_uri\" attribute (specified in Appendix A.9 of [RFC6749]) MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.",
      "ja": "「スコープ」属性の値（[RFC6749]の付録A.4で指定）には、スコープ値を表す％x21 /％x23-5B /％x5D-7Eの範囲外の文字、およびスコープ値間の区切り文字の％x20を含めることはできません。 「error」および「error_description」属性の値（[RFC6749]の付録A.7およびA.8で指定）には、セット％x20-21 /％x23-5B /％x5D-7Eの外の文字を含めてはなりません。 「error_uri」属性の値（[RFC6749]の付録A.9で指定）は、URI参照構文に準拠する必要があるため、セット％x21 /％x23-5B /％x5D-7Eの外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "For example, in response to a protected resource request without authentication:",
      "ja": "たとえば、認証されていない保護されたリソース要求に応答して："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Bearer realm=\"example\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "And in response to a protected resource request with an authentication attempt using an expired access token:",
      "ja": "また、有効期限が切れたアクセストークンを使用した認証試行を伴う保護されたリソース要求に応じて、"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Bearer realm=\"example\",\n                  error=\"invalid_token\",\n                  error_description=\"The access token expired\"",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.1. Error Codes",
      "section_title": true,
      "ja": "3.1. エラーコード"
    },
    {
      "indent": 3,
      "text": "When a request fails, the resource server responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes one of the following error codes in the response:",
      "ja": "要求が失敗すると、リソースサーバーは適切なHTTPステータスコード（通常は400、401、403、または405）を使用して応答し、応答に次のエラーコードのいずれかを含めます。"
    },
    {
      "indent": 3,
      "text": "invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.",
      "ja": "invalid_requestリクエストに必須パラメータが欠落しているか、サポートされていないパラメータまたはパラメータ値が含まれているか、同じパラメータが繰り返されているか、アクセストークンを含めるために複数の方法を使用しているか、またはその他の形式です。リソースサーバーは、HTTP 400（Bad Request）ステータスコードで応答する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.",
      "ja": "invalid_token提供されたアクセストークンは、他の理由で期限切れ、失効、不正、または無効です。リソースは、HTTP 401（無許可）ステータスコードで応答する必要があります（SHOULD）。クライアントは新しいアクセストークンを要求して、保護されたリソース要求を再試行してもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "insufficient_scope The request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\" attribute with the scope necessary to access the protected resource.",
      "ja": "不十分なスコープ要求には、アクセストークンによって提供されるよりも高い特権が必要です。リソースサーバーは、HTTP 403（禁止）ステータスコードで応答する必要があり（SHOULD）、保護されたリソースへのアクセスに必要なスコープを持つ「スコープ」属性を含めることができます（MAY）。"
    },
    {
      "indent": 3,
      "text": "If the request lacks any authentication information (e.g., the client was unaware that authentication is necessary or attempted using an unsupported authentication method), the resource server SHOULD NOT include an error code or other error information.",
      "ja": "リクエストに認証情報が不足している場合（クライアントが認証が必要であることを認識していない、またはサポートされていない認証方法を使用しようとした場合）、リソースサーバーはエラーコードまたはその他のエラー情報を含めないでください。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Bearer realm=\"example\"",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4. Example Access Token Response",
      "section_title": true,
      "ja": "4. アクセストークン応答の例"
    },
    {
      "indent": 3,
      "text": "Typically, a bearer token is returned to the client as part of an OAuth 2.0 [RFC6749] access token response. An example of such a response is:",
      "ja": "通常、ベアラートークンは、OAuth 2.0 [RFC6749]アクセストークン応答の一部としてクライアントに返されます。そのような応答の例は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\":\"mF_9.B5f-4.1JqM\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\"\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This section describes the relevant security threats regarding token handling when using bearer tokens and describes how to mitigate these threats.",
      "ja": "このセクションでは、ベアラートークンを使用する場合のトークン処理に関連するセキュリティの脅威と、これらの脅威を軽減する方法について説明します。"
    },
    {
      "indent": 0,
      "text": "5.1. Security Threats",
      "section_title": true,
      "ja": "5.1. セキュリティの脅威"
    },
    {
      "indent": 3,
      "text": "The following list presents several common threats against protocols utilizing some form of tokens. This list of threats is based on NIST Special Publication 800-63 [NIST800-63]. Since this document builds on the OAuth 2.0 Authorization specification [RFC6749], we exclude a discussion of threats that are described there or in related documents.",
      "ja": "次のリストは、何らかの形のトークンを利用するプロトコルに対するいくつかの一般的な脅威を示しています。この脅威のリストは、NIST Special Publication 800-63 [NIST800-63]に基づいています。このドキュメントはOAuth 2.0 Authorization仕様[RFC6749]に基づいて構築されているため、そこまたは関連ドキュメントで説明されている脅威の説明は除外します。"
    },
    {
      "indent": 3,
      "text": "Token manufacture/modification: An attacker may generate a bogus token or modify the token contents (such as the authentication or attribute statements) of an existing token, causing the resource server to grant inappropriate access to the client. For example, an attacker may modify the token to extend the validity period; a malicious client may modify the assertion to gain access to information that they should not be able to view.",
      "ja": "トークンの製造/変更：攻撃者は、偽のトークンを生成したり、既存のトークンのトークンの内容（認証や属性ステートメントなど）を変更したりして、リソースサーバーがクライアントに不適切なアクセスを許可する可能性があります。たとえば、攻撃者はトークンを変更して有効期間を延長できます。悪意のあるクライアントは、アサーションを変更して、表示できないはずの情報にアクセスする可能性があります。"
    },
    {
      "indent": 3,
      "text": "Token disclosure: Tokens may contain authentication and attribute statements that include sensitive information.",
      "ja": "トークンの開示：トークンには、機密情報を含む認証および属性ステートメントが含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Token redirect: An attacker uses a token generated for consumption by one resource server to gain access to a different resource server that mistakenly believes the token to be for it.",
      "ja": "トークンリダイレクト：攻撃者は、あるリソースサーバーが使用するために生成されたトークンを使用して、トークンがそのトークンであると誤って信じている別のリソースサーバーにアクセスします。"
    },
    {
      "indent": 3,
      "text": "Token replay: An attacker attempts to use a token that has already been used with that resource server in the past.",
      "ja": "トークンの再生：攻撃者は、過去にそのリソースサーバーで既に使用されているトークンを使用しようとします。"
    },
    {
      "indent": 0,
      "text": "5.2. Threat Mitigation",
      "section_title": true,
      "ja": "5.2. 脅威の軽減"
    },
    {
      "indent": 3,
      "text": "A large range of threats can be mitigated by protecting the contents of the token by using a digital signature or a Message Authentication Code (MAC). Alternatively, a bearer token can contain a reference to authorization information, rather than encoding the information directly. Such references MUST be infeasible for an attacker to guess; using a reference may require an extra interaction between a server and the token issuer to resolve the reference to the authorization information. The mechanics of such an interaction are not defined by this specification.",
      "ja": "デジタル署名またはメッセージ認証コード（MAC）を使用してトークンの内容を保護することにより、広範囲の脅威を軽減できます。または、ベアラートークンには、認証情報を直接エンコードするのではなく、認証情報への参照を含めることができます。このような参照は、攻撃者が推測することは不可能でなければなりません。参照を使用すると、認証情報への参照を解決するために、サーバーとトークン発行者の間の追加の相互作用が必要になる場合があります。このような相互作用のメカニズムは、この仕様では定義されていません。"
    },
    {
      "indent": 3,
      "text": "This document does not specify the encoding or the contents of the token; hence, detailed recommendations about the means of guaranteeing token integrity protection are outside the scope of this document. The token integrity protection MUST be sufficient to prevent the token from being modified.",
      "ja": "このドキュメントでは、トークンのエンコーディングやコンテンツを指定していません。したがって、トークンの整合性保護を保証する手段に関する詳細な推奨事項は、このドキュメントの範囲外です。トークンの完全性保護は、トークンが変更されるのを防ぐのに十分でなければなりません。"
    },
    {
      "indent": 3,
      "text": "To deal with token redirect, it is important for the authorization server to include the identity of the intended recipients (the audience), typically a single resource server (or a list of resource servers), in the token. Restricting the use of the token to a specific scope is also RECOMMENDED.",
      "ja": "トークンリダイレクトを処理するには、認可サーバーが対象の受信者（対象者）のID、通常は単一のリソースサーバー（またはリソースサーバーのリスト）をトークンに含めることが重要です。トークンの使用を特定のスコープに制限することも推奨されます。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST implement TLS. Which version(s) ought to be implemented will vary over time and will depend on the widespread deployment and known security vulnerabilities at the time of implementation. At the time of this writing, TLS version 1.2 [RFC5246] is the most recent version, but it has very limited actual deployment and might not be readily available in implementation toolkits. TLS version 1.0 [RFC2246] is the most widely deployed version and will give the broadest interoperability.",
      "ja": "認可サーバーはTLSを実装する必要があります。実装する必要のあるバージョンは、時間の経過とともに変化し、実装時の広範な展開と既知のセキュリティの脆弱性に依存します。これを書いている時点では、TLSバージョン1.2 [RFC5246]が最新バージョンですが、実際の展開は非常に制限されており、実装ツールキットですぐに利用できない場合があります。 TLSバージョン1.0 [RFC2246]は、最も広く展開されているバージョンであり、幅広い相互運用性を提供します。"
    },
    {
      "indent": 0,
      "text": " To protect against token disclosure, confidentiality protection MUST be applied using TLS [RFC5246] with a ciphersuite that provides confidentiality and integrity protection. This requires that the communication interaction between the client and the authorization server, as well as the interaction between the client and the resource server, utilize confidentiality and integrity protection. Since TLS is mandatory to implement and to use with this specification, it is the preferred approach for preventing token disclosure via the communication channel. For those cases where the client is prevented from observing the contents of the token, token encryption MUST be applied in addition to the usage of TLS protection. As a further defense against token disclosure, the client MUST validate the TLS certificate chain when making requests to protected resources, including checking the Certificate Revocation List (CRL) [RFC5280].",
      "ja": "トークンの開示から保護するには、機密性と完全性の保護を提供する暗号スイートを備えたTLS [RFC5246]を使用して機密性保護を適用する必要があります。これには、クライアントと認可サーバー間の通信の相互作用、およびクライアントとリソースサーバー間の相互作用が機密性と整合性保護を利用することが必要です。 TLSはこの仕様を実装して使用するために必須であるため、通信チャネルを介したトークンの開示を防ぐための推奨アプローチです。クライアントがトークンの内容を監視できない場合は、TLS保護の使用に加えて、トークンの暗号化を適用する必要があります。トークンの開示に対するさらなる防御策として、クライアントは、証明書失効リスト（CRL）[RFC5280]のチェックを含む、保護されたリソースへのリクエストを行うときにTLS証明書チェーンを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "Cookies are typically transmitted in the clear. Thus, any information contained in them is at risk of disclosure. Therefore, bearer tokens MUST NOT be stored in cookies that can be sent in the clear. See \"HTTP State Management Mechanism\" [RFC6265] for security considerations about cookies.",
      "ja": "Cookieは通常、平文で送信されます。したがって、それらに含まれる情報は開示の危険にさらされます。したがって、ベアラートークンは、クリアテキストで送信できるCookieに保存してはなりません。 Cookieに関するセキュリティの考慮事項については、「HTTP状態管理メカニズム」[RFC6265]を参照してください。"
    },
    {
      "indent": 3,
      "text": "In some deployments, including those utilizing load balancers, the TLS connection to the resource server terminates prior to the actual server that provides the resource. This could leave the token unprotected between the front-end server where the TLS connection terminates and the back-end server that provides the resource. In such deployments, sufficient measures MUST be employed to ensure confidentiality of the token between the front-end and back-end servers; encryption of the token is one such possible measure.",
      "ja": "ロードバランサーを利用する展開を含む一部の展開では、リソースを提供する実際のサーバーより先に、リソースサーバーへのTLS接続が終了します。これにより、TLS接続が終了するフロントエンドサーバーとリソースを提供するバックエンドサーバーの間でトークンが保護されないままになる可能性があります。そのような展開では、フロントエンドサーバーとバックエンドサーバー間のトークンの機密性を確保するために十分な手段を採用する必要があります。トークンの暗号化は、そのような可能な手段の1つです。"
    },
    {
      "indent": 3,
      "text": "To deal with token capture and replay, the following recommendations are made: First, the lifetime of the token MUST be limited; one means of achieving this is by putting a validity time field inside the protected part of the token. Note that using short-lived (one hour or less) tokens reduces the impact of them being leaked. Second, confidentiality protection of the exchanges between the client and the authorization server and between the client and the resource server MUST be applied. As a consequence, no eavesdropper along the communication path is able to observe the token exchange. Consequently, such an on-path adversary cannot replay the token. Furthermore, when presenting the token to a resource server, the client MUST verify the identity of that resource server, as per Section 3.1 of \"HTTP Over TLS\" [RFC2818]. Note that the client MUST validate the TLS certificate chain when making these requests to protected resources. Presenting the token to an unauthenticated and unauthorized resource server or failing to validate the certificate chain will allow adversaries to steal the token and gain unauthorized access to protected resources.",
      "ja": "トークンのキャプチャと再生を処理するために、次の推奨事項が作成されます。最初に、トークンの有効期間を制限する必要があります。これを実現する1つの方法は、トークンの保護された部分内に有効期間フィールドを配置することです。存続期間の短い（1時間以下）トークンを使用すると、リークされる影響が減少することに注意してください。第2に、クライアントと認可サーバー間およびクライアントとリソースサーバー間の交換の機密保護を適用する必要があります。結果として、通信パスに沿った盗聴者はトークンの交換を監視できません。したがって、このようなパス上の敵はトークンを再生できません。さらに、「HTTP over TLS」[RFC2818]のセクション3.1に従って、クライアントはトークンをリソースサーバーに提示するときに、そのリソースサーバーのIDを検証する必要があります。保護されたリソースに対してこれらの要求を行う場合、クライアントはTLS証明書チェーンを検証する必要があることに注意してください。認証されていない無許可のリソースサーバーにトークンを提示したり、証明書チェーンの検証に失敗したりすると、攻撃者はトークンを盗み、保護されたリソースへの不正アクセスを取得できます。"
    },
    {
      "indent": 0,
      "text": "5.3. Summary of Recommendations",
      "section_title": true,
      "ja": "5.3. 推奨事項の要約"
    },
    {
      "indent": 3,
      "text": "Safeguard bearer tokens: Client implementations MUST ensure that bearer tokens are not leaked to unintended parties, as they will be able to use them to gain access to protected resources. This is the primary security consideration when using bearer tokens and underlies all the more specific recommendations that follow.",
      "ja": "ベアラートークンの保護：クライアントの実装では、ベアラートークンを使用して保護されたリソースにアクセスできるため、意図しないパーティーにそれらが漏洩しないようにする必要があります。これは、ベアラートークンを使用する場合の主要なセキュリティの考慮事項であり、以下のより具体的な推奨事項のすべての基礎になります。"
    },
    {
      "indent": 3,
      "text": "Validate TLS certificate chains: The client MUST validate the TLS certificate chain when making requests to protected resources. Failing to do so may enable DNS hijacking attacks to steal the token and gain unintended access.",
      "ja": "TLS証明書チェーンの検証：クライアントは、保護されたリソースにリクエストを行うときにTLS証明書チェーンを検証する必要があります。そうしないと、DNSハイジャック攻撃がトークンを盗み、意図しないアクセスを取得する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Always use TLS (https): Clients MUST always use TLS [RFC5246] (https) or equivalent transport security when making requests with bearer tokens. Failing to do so exposes the token to numerous attacks that could give attackers unintended access.",
      "ja": "常にTLS（https）を使用する：クライアントは、ベアラートークンでリクエストを行う場合、常にTLS [RFC5246]（https）または同等のトランスポートセキュリティを使用する必要があります。そうしないと、トークンが多数の攻撃にさらされ、攻撃者が意図しないアクセスを行う可能性があります。"
    },
    {
      "indent": 3,
      "text": "Don't store bearer tokens in cookies: Implementations MUST NOT store bearer tokens within cookies that can be sent in the clear (which is the default transmission mode for cookies). Implementations that do store bearer tokens in cookies MUST take precautions against cross-site request forgery.",
      "ja": "ベアラートークンをCookieに保存しない：実装は、クリアテキストで送信できるCookie内にベアラートークンを保存してはなりません（これは、Cookieのデフォルトの送信モードです）。ベアラトークンをCookieに保存する実装は、クロスサイトリクエストフォージェリに対して予防策を講じる必要があります。"
    },
    {
      "indent": 3,
      "text": "Issue short-lived bearer tokens: Token servers SHOULD issue short-lived (one hour or less) bearer tokens, particularly when issuing tokens to clients that run within a web browser or other environments where information leakage may occur. Using short-lived bearer tokens can reduce the impact of them being leaked.",
      "ja": "短期間有効なベアラートークンを発行する：トークンサーバーは、特に情報漏えいが発生する可能性のあるWebブラウザーまたはその他の環境内で実行されるクライアントにトークンを発行する場合、短期間有効な（1時間以下）ベアラートークンを発行する必要があります。存続期間の短いベアラートークンを使用すると、リークされる影響を減らすことができます。"
    },
    {
      "indent": 3,
      "text": "Issue scoped bearer tokens: Token servers SHOULD issue bearer tokens that contain an audience restriction, scoping their use to the intended relying party or set of relying parties.",
      "ja": "スコープ付きベアラートークンの発行：トークンサーバーは、対象ユーザーの制限を含むベアラートークンを発行する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Don't pass bearer tokens in page URLs: Bearer tokens SHOULD NOT be passed in page URLs (for example, as query string parameters). Instead, bearer tokens SHOULD be passed in HTTP message headers or message bodies for which confidentiality measures are taken. Browsers, web servers, and other software may not adequately secure URLs in the browser history, web server logs, and other data structures. If bearer tokens are passed in page URLs, attackers might be able to steal them from the history data, logs, or other unsecured locations.",
      "ja": "ページURLでベアラートークンを渡さない：ベアラートークンは、ページURLで（たとえば、クエリ文字列パラメーターとして）渡すべきではありません（SHOULD NOT）。代わりに、ベアラトークンは、機密性の測定が行われるHTTPメッセージヘッダーまたはメッセージ本文で渡される必要があります（SHOULD）。ブラウザー、Webサーバー、およびその他のソフトウェアは、ブラウザーの履歴、Webサーバーのログ、およびその他のデータ構造内のURLを適切に保護しない場合があります。ベアラートークンがページURLで渡される場合、攻撃者は履歴データ、ログ、または他の安全でない場所からトークンを盗む可能性があります。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "6.1. OAuth Access Token Type Registration",
      "section_title": true,
      "ja": "6.1. OAuthアクセストークンタイプの登録"
    },
    {
      "indent": 3,
      "text": "This specification registers the following access token type in the OAuth Access Token Types registry defined in [RFC6749].",
      "ja": "この仕様は、[RFC6749]で定義されているOAuthアクセストークンタイプレジストリに次のアクセストークンタイプを登録します。"
    },
    {
      "indent": 0,
      "text": "6.1.1. The \"Bearer\" OAuth Access Token Type",
      "section_title": true,
      "ja": "6.1.1. 「ベアラー」OAuthアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Type name: Bearer",
      "ja": "タイプ名：Bearer"
    },
    {
      "indent": 3,
      "text": "Additional Token Endpoint Response Parameters: (none)",
      "ja": "追加のトークンエンドポイント応答パラメーター：（なし）"
    },
    {
      "indent": 3,
      "text": "HTTP Authentication Scheme(s): Bearer",
      "ja": "HTTP認証方式：ベアラ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "コントローラの変更：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2. OAuth Extensions Error Registration",
      "section_title": true,
      "ja": "6.2. OAuth拡張エラー登録"
    },
    {
      "indent": 3,
      "text": "This specification registers the following error values in the OAuth Extensions Error registry defined in [RFC6749].",
      "ja": "この仕様は、[RFC6749]で定義されているOAuth拡張エラーレジストリに次のエラー値を登録します。"
    },
    {
      "indent": 0,
      "text": "6.2.1. The \"invalid_request\" Error Value",
      "section_title": true,
      "ja": "6.2.1. 「invalid_request」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: invalid_request",
      "ja": "エラー名：invalid_request"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラーアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "コントローラの変更：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2.2. The \"invalid_token\" Error Value",
      "section_title": true,
      "ja": "6.2.2. 「invalid_token」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: invalid_token",
      "ja": "エラー名：invalid_token"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラーアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "コントローラの変更：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2.3. The \"insufficient_scope\" Error Value",
      "section_title": true,
      "ja": "6.2.3. 「insufficient_scope」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: insufficient_scope",
      "ja": "エラー名：不十分なスコープ"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラーアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "コントローラの変更：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書：RFC 6750"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7. 参考文献"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner, S., 「要件レベルを示すためにRFCで使用するキーワード」, BCP 14, RFC 2119, 1997年3月."
    },
    {
      "indent": 3,
      "text": "[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[RFC2246] Dierks, T.およびC. Allen, 「The TLS Protocol Version 1.0」, RFC 2246, 1999年1月."
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., およびT. Berners-Lee, 「ハイパーテキスト転送プロトコル -- HTTP/1.1」, RFC 2616, 1999年6月."
    },
    {
      "indent": 3,
      "text": "[RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., and L. Stewart, \"HTTP Authentication: Basic and Digest Access Authentication\", RFC 2617, June 1999.",
      "ja": "[RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., およびL. Stewart, 「HTTP Authentication：Basic and Digest Access Authentication」, RFC 2617, 1999年6月."
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.",
      "ja": "[RFC2818] Rescorla, E., 「HTTP over TLS」, RFC 2818, 2000年5月."
    },
    {
      "indent": 3,
      "text": "[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[RFC3986] Berners-Lee, T., Fielding, R., およびL. Masinter, 「Uniform Resource Identifier（URI）：Generic Syntax」, STD 66, RFC 3986, 2005年1月."
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008.",
      "ja": "[RFC5234] Crocker, D.およびP. Overell, 「構文仕様の拡張BNF：ABNF」, STD 68, RFC 5234, 2008年1月."
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246] Dierks, T.およびE. Rescorla, 「The Transport Layer Security（TLS）Protocol Version 1.2」, RFC 5246, 2008年8月."
    },
    {
      "indent": 3,
      "text": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, May 2008.",
      "ja": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., およびW. Polk, 「Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List（CRL）Profile \", RFC 5280, 2008年5月."
    },
    {
      "indent": 3,
      "text": "[RFC6265] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, April 2011.",
      "ja": "[RFC6265]バース, A., 「HTTP状態管理メカニズム」, RFC 6265, 2011年4月."
    },
    {
      "indent": 3,
      "text": "[RFC6749] Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, October 2012.",
      "ja": "[RFC6749] Hardt, D., 編, 「OAuth 2.0認可フレームワーク」, RFC 6749, 2012年10月."
    },
    {
      "indent": 3,
      "text": "[USASCII] American National Standards Institute, \"Coded Character Set -- 7-bit American Standard Code for Information Interchange\", ANSI X3.4, 1986.",
      "ja": "[USASCII] American National Standards Institute, 「Coded Character Set-7-bit American Standard Code for Information Interchange」, ANSI X3.4, 1986."
    },
    {
      "indent": 3,
      "text": "[W3C.REC-html401-19991224] Raggett, D., Le Hors, A., and I. Jacobs, \"HTML 4.01 Specification\", World Wide Web Consortium Recommendation REC-html401-19991224, December 1999, <http://www.w3.org/TR/1999/REC-html401-19991224>.",
      "ja": "[W3C.REC-html401-19991224] Raggett, D., Le Hors, A., およびI. Jacobs, 「HTML 4.01 Specification」, World Wide Web Consortium Recommendation REC-html401-19991224, 1999年12月, <http://www.w3.org/TR/1999/REC-html401-19991224>."
    },
    {
      "indent": 3,
      "text": "[W3C.REC-webarch-20041215] Jacobs, I. and N. Walsh, \"Architecture of the World Wide Web, Volume One\", World Wide Web Consortium Recommendation REC-webarch-20041215, December 2004, <http://www.w3.org/TR/2004/REC-webarch-20041215>.",
      "ja": "[W3C.REC-webarch-20041215] Jacobs, I.およびN. Walsh, 「Architecture of the World Wide Web, Volume One」, World Wide Web Consortium Recommendation REC-webarch-20041215, 2004年12月, <http://www.w3.org/TR/2004/REC-webarch-20041215>."
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[HTTP-AUTH] Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Authentication\", Work in Progress, October 2012.",
      "ja": "[HTTP-AUTH] Fielding, R., Ed., and J. Reschke, Ed.,  \"Hypertext Transfer Protocol（HTTP / 1.1）：Authentication\", Work in Progress, 2012年10月."
    },
    {
      "indent": 3,
      "text": "[NIST800-63] Burr, W., Dodson, D., Newton, E., Perlner, R., Polk, T., Gupta, S., and E. Nabbus, \"NIST Special Publication 800-63-1, INFORMATION SECURITY\", December 2011, <http://csrc.nist.gov/publications/>.",
      "ja": "[NIST800-63]バー, W, ドドソン, D, ニュートン, E, パールナー, R, ポーク, T, グプタ, S, およびナブス, 「NIST Special Publication 800-63-1, 情報セキュリティ」, 2011年12月, <http://csrc.nist.gov/publications/>."
    },
    {
      "indent": 3,
      "text": "[OMAP] Huff, J., Schlacht, D., Nadalin, A., Simmons, J., Rosenberg, P., Madsen, P., Ace, T., Rickelton-Abdi, C., and B. Boyer, \"Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources\", April 2012, <http://www.oatc.us/Standards/Download.aspx>.",
      "ja": "[OMAP] Huff, J., Schlacht, D., Nadalin, A., Simmons, J., Rosenberg, P., Madsen, P., Ace, T., Rickelton-Abdi, C., およびB. Boyer,  「Online Multimedia Authorization Protocol：The Industry Standard for Authorized Access to Internet Multimedia Resources」, 2012年4月, <http://www.oatc.us/Standards/Download.aspx>."
    },
    {
      "indent": 3,
      "text": "[OpenID.Messages] Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., Mortimore, C., and E. Jay, \"OpenID Connect Messages 1.0\", June 2012, <http://openid.net/specs/ openid-connect-messages-1_0.html>.",
      "ja": "[OpenID.Messages] Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., Mortimore, C., and E. Jay,  \"OpenID Connect Messages 1.0\", June 2012, <http://openid.net/specs/openid-connect-messages-1_0.html>."
    },
    {
      "indent": 0,
      "text": "Appendix A. Acknowledgements",
      "section_title": true,
      "ja": "付録A. 謝辞"
    },
    {
      "indent": 3,
      "text": "The following people contributed to preliminary versions of this document: Blaine Cook (BT), Brian Eaton (Google), Yaron Y. Goland (Microsoft), Brent Goldman (Facebook), Raffi Krikorian (Twitter), Luke Shepard (Facebook), and Allen Tom (Yahoo!). The content and concepts within are a product of the OAuth community, the Web Resource Authorization Profiles (WRAP) community, and the OAuth Working Group. David Recordon created a preliminary version of this specification based upon an early draft of the specification that evolved into OAuth 2.0 [RFC6749]. Michael B. Jones in turn created the first version (00) of this specification using portions of David's preliminary document and edited all subsequent versions.",
      "ja": "次の人々がこのドキュメントの暫定版に貢献しました：ブレインクック（BT）、ブライアンイートン（Google）、ヤロンY.ゴランド（Microsoft）、ブレントゴールドマン（Facebook）、ラフィクリコリアン（Twitter）、ルークシェパード（Facebook）、アレン・トム（Yahoo!）。内のコンテンツとコンセプトは、OAuthコミュニティ、Web Resource Authorization Profiles（WRAP）コミュニティ、およびOAuthワーキンググループの製品です。 David Recordonは、OAuth 2.0 [RFC6749]に発展した仕様の初期ドラフトに基づいて、この仕様の予備バージョンを作成しました。 Michael B. Jonesは、Davidの予備文書の一部を使用してこの仕様の最初のバージョン（00）を作成し、その後のすべてのバージョンを編集しました。"
    },
    {
      "indent": 3,
      "text": "The OAuth Working Group has dozens of very active contributors who proposed ideas and wording for this document, including Michael Adams, Amanda Anganes, Andrew Arnott, Derek Atkins, Dirk Balfanz, John Bradley, Brian Campbell, Francisco Corella, Leah Culver, Bill de hOra, Breno de Medeiros, Brian Ellin, Stephen Farrell, Igor Faynberg, George Fletcher, Tim Freeman, Evan Gilbert, Yaron Y. Goland, Eran Hammer, Thomas Hardjono, Dick Hardt, Justin Hart, Phil Hunt, John Kemp, Chasen Le Hara, Barry Leiba, Amos Jeffries, Michael B. Jones, Torsten Lodderstedt, Paul Madsen, Eve Maler, James Manger, Laurence Miao, William J. Mills, Chuck Mortimore, Anthony Nadalin, Axel Nennker, Mark Nottingham, David Recordon, Julian Reschke, Rob Richards, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre, Marius Scurtescu, Naitik Shah, Justin Smith, Christian Stuebner, Jeremy Suriel, Doug Tangren, Paul Tarjan, Hannes Tschofenig, Franklin Tse, Sean Turner, Paul Walker, Shane Weeden, Skylar Woodward, and Zachary Zeltsan.",
      "ja": "OAuthワーキンググループには、マイケルアダムス、アマンダアンガネス、アンドリューアーノット、デレクアトキンス、ダークバルファンズ、ジョンブラッドリー、ブライアンキャンベル、フランシスココレラ、リアカルバー、ビルデホラなど、このドキュメントのアイデアや表現を提案した非常に活発な寄稿者が多数います。 、ブレノ・デ・メデイロス、ブライアン・エリン、スティーブン・ファレル、イゴール・ファインバーグ、ジョージ・フレッチャー、ティム・フリーマン、エヴァン・ギルバート、ヤロン・Y・ゴランド、エラン・ハマー、トーマス・ハードジョノ、ディック・ハート、ジャスティン・ハート、フィル・ハント、ジョン・ケンプ、チャセン・ル・ハラ、バリー・レイバ、アモス・ジェフリーズ、マイケル・B・ジョーンズ、トルステン・ロダーステッド、ポール・マドセン、イブ・マラー、ジェームズ・マンガー、ローレンス・ミャオ、ウィリアム・J・ミルズ、チャック・モーティモア、アンソニー・ナダリン、アクセル・ネンカー、マーク・ノッティンガム、デビッド・レコン、ジュリアン・レシュケ、ロブリチャーズ、ジャスティンリチャー、ピーターサンアンドレ、ナット崎村、ロブセイヤー、マリウススクルテスク、ナイティックシャー、ジャスティンスミス、クリスチャンスタブナー、ジェレミースリエル、ダグタングレン、ポールタージャン、ハネスショフェニグ、フランクリンツェー、ショーンターナー、ポールウォーカー、シェーンウィーデン、スカイラーウッドワード、ザカリー・ゼルトサン。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Michael B. Jones Microsoft",
      "ja": "マイケルB.ジョーンズマイクロソフト"
    },
    {
      "indent": 3,
      "text": "EMail: mbj@microsoft.com\nURI:   http://self-issued.info/",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Dick Hardt Independent",
      "ja": "ディックハート独立"
    },
    {
      "indent": 3,
      "text": "EMail: dick.hardt@gmail.com\nURI:   http://dickhardt.org/",
      "raw": true
    }
  ]
}