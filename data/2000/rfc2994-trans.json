{
  "title": {
    "text": "RFC 2994 - A Description of the MISTY1 Encryption Algorithm",
    "ja": "RFC 2994 - MISTY1暗号化アルゴリズムの説明"
  },
  "number": 2994,
  "created_at": "2024-01-02 15:17:44.092399+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                            H. Ohta\nRequest for Comments: 2994                                     M. Matsui\nCategory: Informational                  Mitsubishi Electric Corporation\n                                                           November 2000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "A Description of the MISTY1 Encryption Algorithm",
      "ja": "MISTY1暗号化アルゴリズムの説明"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモは、インターネットコミュニティに情報を提供します。いかなる種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2000）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes a secret-key cryptosystem MISTY1, which is block cipher with a 128-bit key, a 64-bit block and a variable number of rounds. It documents the algorithm description including key scheduling part and data randomizing part.",
      "ja": "このドキュメントでは、128ビットキー、64ビットブロック、可変数のラウンドを備えたブロック暗号である秘密の暗号システムMisty1について説明します。キースケジューリングパーツやデータのランダム化パーツを含むアルゴリズムの説明を文書化します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document describes a secret-key cryptosystem MISTY1, which is block cipher with a 128-bit key, a 64-bit block and a variable number of rounds. It is designed on the basis of the theory of provable security against differential and linear cryptanalysis, and moreover it realizes high-speed encryption on hardware platforms as well as on software environments. As the result of weighing strength and speed, 8-rounds of MISTY1 is recommended and used in most cases.",
      "ja": "このドキュメントでは、128ビットキー、64ビットブロック、可変数のラウンドを備えたブロック暗号である秘密の暗号システムMisty1について説明します。これは、差動および線形の暗号化に対する証明可能なセキュリティの理論に基づいて設計されており、さらに、ハードウェアプラットフォームとソフトウェア環境で高速暗号化を実現します。重量の強度と速度の結果として、8ラウンドのMISTY1が推奨され、ほとんどの場合に使用されます。"
    },
    {
      "indent": 3,
      "text": "Our implementation shows that MISTY1 with eight rounds can encrypt a data stream in CBC mode at a speed of 57Mbps and 40Mbps on Pentium II/266MHz and PA-7200/120MHz, respectively. For its hardware performance, we have produced a prototype LSI by a process of 0.8- micron CMOS gate-array and confirmed a speed of 512Mbps.",
      "ja": "私たちの実装は、8ラウンドのMISTY1が、それぞれ57Mbpsの速度でCBCモードのデータストリームを、それぞれPentium II/266MHzおよびPA-7200/120MHzで40Mbpsで暗号化できることを示しています。ハードウェアパフォーマンスのために、0.8ミクロンCMOSゲートアレイのプロセスでプロトタイプLSIを生成し、512Mbpsの速度を確認しました。"
    },
    {
      "indent": 0,
      "text": "2. Algorithm Description",
      "section_title": true,
      "ja": "2. アルゴリズムの説明"
    },
    {
      "indent": 3,
      "text": "Algorithm [1] could be divided into two parts, namely \"key scheduling part\" and \"data randomizing part\". Key scheduling part takes a 128- bit input key and produces a 128-bit expanded key. Data randomizing part takes a 64-bit input data and mixes it, namely encryption. If data randomizing part is processed in reverse order, mixed data is transformed to input data, namely decryption.",
      "ja": "アルゴリズム[1]は、「キースケジューリングパーツ」と「データのランダム化パーツ」の2つの部分、つまり「キースケジューリングパーツ」に分割できます。キースケジューリングパーツは128ビット入力キーを取り、128ビットの拡張キーを生成します。データをランダム化する部分は、64ビットの入力データを取り、それを混合します。つまり、暗号化。データランダム化部分が逆順序で処理されると、混合データが入力データ、つまり復号化に変換されます。"
    },
    {
      "indent": 0,
      "text": "2.1 Terminology",
      "section_title": true,
      "ja": "2.1 用語"
    },
    {
      "indent": 3,
      "text": "Some operators are used in this document to describe the algorithm. The operator `+' indicates two's complement addition. The operator `*' indicates multiplication. The operator `/' yields the quotient, and the operator `%' yields the remainder from the division. The operator `&' indicates bitwise AND operation. The operator `|' indicates bitwise inclusive OR operation. The operator `^' indicates bitwise exclusive OR operation. The operator `<<' indicates bitwise left shift operation. The operator `>>' indicates bitwise right shift operation.",
      "ja": "このドキュメントでは、アルゴリズムを説明するために一部の演算子が使用されています。オペレーター「」は、2つの補数追加を示します。演算子「*」は乗算を示します。オペレーター「/」は商を生成し、オペレーター「％」は部門から残りを生みます。オペレーター「＆」は、ビットワイズと操作を示します。オペレーター「|」ビットごとの包括または操作を示します。オペレーター「^」は、ビットワイズの排他的または操作を示します。演算子「<<」は、ビットごとの左シフト操作を示します。演算子 `>> 'は、ビットごとの右シフト操作を示します。"
    },
    {
      "indent": 0,
      "text": "2.2 Key Scheduling Part",
      "section_title": true,
      "ja": "2.2 キースケジューリングパーツ"
    },
    {
      "indent": 3,
      "text": "Key scheduling part consists of the following operations.",
      "ja": "キースケジューリングパーツは、次の操作で構成されています。"
    },
    {
      "indent": 3,
      "text": "for i = 0, ..., 7 do\n    EK[i] = K[i*2]*256 + K[i*2+1];\nfor i = 0, ..., 7 do\nbegin\n    EK[i+ 8] = FI(EK[i], EK[(i+1)%8]);\n    EK[i+16] = EK[i+8] & 0x1ff;\n    EK[i+24] = EK[i+8] >> 9;\nend",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "K is an input key, and each element of K, namely K[i], holds an 8-bit of the key, respectively. EK denotes an expanded key, and each element of EK, namely EK[i], holds a 16-bit of the expanded key. Input data of K[0], ..., K[15] are copied to EK[0], ..., EK[7]. Expanded key is produced from EK[0], ..., EK[7] by using function FI, and stored in EK[8], ..., EK[15]. Function FI is described in the following section.",
      "ja": "kは入力キーであり、kの各要素、すなわちk [i]は、それぞれキーの8ビットを保持しています。EKは拡張されたキーを示し、EKの各要素、すなわちEK [i]は、拡張キーの16ビットを保持します。k [0]、...、k [15]の入力データは、ek [0]、...、ek [7]にコピーされます。拡張キーは、関数Fiを使用してEk [0]、...、Ek [7]から生成され、Ek [8]、...、Ek [15]に保存されます。関数FIについては、次のセクションで説明します。"
    },
    {
      "indent": 0,
      "text": "2.3 Data Randomizing Part",
      "section_title": true,
      "ja": "2.3 データのランダム化パーツ"
    },
    {
      "indent": 3,
      "text": "Data randomizing part uses two kinds of function, which are called function FO and function FL. Function FO calls another function, namely FI. The key expansion part also uses function FI. Function FI uses two S-boxes, namely S7, S9. Each function is described as follows.",
      "ja": "データのランダム化パーツは、関数FOと関数FLと呼ばれる2種類の関数を使用します。関数は、別の関数、すなわちFIを呼び出します。重要な拡張部品は、関数fiも使用します。function fiは、2つのS-Box、つまりS7、S9を使用します。各関数は次のように説明されています。"
    },
    {
      "indent": 3,
      "text": "Function FO takes two parameters. One is a 32-bit width input data, namely FO_IN. The other is an index of EK, namely k. And FO returns a 32-bit width data, namely FO_OUT.",
      "ja": "関数FOは2つのパラメーターを取ります。1つは、32ビット幅の入力データ、つまりFO_INです。もう1つは、EKのインデックス、つまりkです。FOは32ビット幅データ、つまりFO_OUTを返します。"
    },
    {
      "indent": 3,
      "text": "FO(FO_IN, k)\nbegin\n    var t0, t1 as 16-bit integer;\n    t0 = FO_IN >> 16;\n    t1 = FO_IN & 0xffff;\n    t0 = t0 ^ EK[k];\n    t0 = FI(t0, EK[(k+5)%8+8]);\n    t0 = t0 ^ t1;\n    t1 = t1 ^ EK[(k+2)%8];\n    t1 = FI(t1, EK[(k+1)%8+8]);\n    t1 = t1 ^ t0;\n    t0 = t0 ^ EK[(k+7)%8];\n    t0 = FI(t0, EK[(k+3)%8+8]);\n    t0 = t0 ^ t1;\n    t1 = t1 ^ EK[(k+4)%8];\n    FO_OUT = (t1<<16) | t0;\n    return FO_OUT;\nend.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Function FI takes two parameters. One is a 16-bit width input data, namely FI_IN. The other is a part of EK, namely FI_KEY, which is also 16-bit width. And FI returns a 16-bit width data, namely FI_OUT.",
      "ja": "関数fiは2つのパラメーターを取ります。1つは、16ビット幅の入力データ、つまりFI_INです。もう1つはEKの一部、つまりFI_KEYであり、これも16ビット幅です。FIは16ビット幅データ、つまりFI_OUTを返します。"
    },
    {
      "indent": 3,
      "text": "FI(FI_IN, FI_KEY)\nbegin\n    var d9 as 9-bit integer;\n    var d7 as 7-bit integer;\n    d9 = FI_IN >> 7;\n    d7 = FI_IN & 0x7f;\n    d9 = S9TABLE[d9] ^ d7;\n    d7 = S7TABLE[d7] ^ d9;\n    ( d7 = d7 & 0x7f; )\n    d7 = d7 ^ (FI_KEY >> 9);\n    d9 = d9 ^ (FI_KEY & 0x1ff);\n    d9 = S9TABLE[d9] ^ d7;\n    FI_OUT = (d7<<9) | d9;\n    return FI_OUT;\nend.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "S7TABLE and S9TABLE denote the S-boxes S7 and S9 respectively in terms of look up table notation. Here are the description of S7TABLE and S9TABLE in hexadecimal notation.",
      "ja": "S7tableとS9Tableは、テーブル表記を検索するという点でそれぞれS-Boxes S7とS9を示します。S7tableとS9tableの説明は、16進表の説明です。"
    },
    {
      "indent": 3,
      "text": "S7TABLE:\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00: 1b 32 33 5a 3b 10 17 54 5b 1a 72 73 6b 2c 66 49\n10: 1f 24 13 6c 37 2e 3f 4a 5d 0f 40 56 25 51 1c 04\n20: 0b 46 20 0d 7b 35 44 42 2b 1e 41 14 4b 79 15 6f\n30: 0e 55 09 36 74 0c 67 53 28 0a 7e 38 02 07 60 29\n40: 19 12 65 2f 30 39 08 68 5f 78 2a 4c 64 45 75 3d\n50: 59 48 03 57 7c 4f 62 3c 1d 21 5e 27 6a 70 4d 3a\n60: 01 6d 6e 63 18 77 23 05 26 76 00 31 2d 7a 7f 61\n70: 50 22 11 06 47 16 52 4e 71 3e 69 43 34 5c 58 7d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "S9TABLE: 0 1 2 3 4 5 6 7 8 9 a b c d e f 000: 1c3 0cb 153 19f 1e3 0e9 0fb 035 181 0b9 117 1eb 133 009 02d 0d3 010: 0c7 14a 037 07e 0eb 164 193 1d8 0a3 11e 055 02c 01d 1a2 163 118 020: 14b 152 1d2 00f 02b 030 13a 0e5 111 138 18e 063 0e3 0c8 1f4 01b 030: 001 09d 0f8 1a0 16d 1f3 01c 146 07d 0d1 082 1ea 183 12d 0f4 19e 040: 1d3 0dd 1e2 128 1e0 0ec 059 091 011 12f 026 0dc 0b0 18c 10f 1f7 050: 0e7 16c 0b6 0f9 0d8 151 101 14c 103 0b8 154 12b 1ae 017 071 00c 060: 047 058 07f 1a4 134 129 084 15d 19d 1b2 1a3 048 07c 051 1ca 023 070: 13d 1a7 165 03b 042 0da 192 0ce 0c1 06b 09f 1f1 12c 184 0fa 196 080: 1e1 169 17d 031 180 10a 094 1da 186 13e 11c 060 175 1cf 067 119 090: 065 068 099 150 008 007 17c 0b7 024 019 0de 127 0db 0e4 1a9 052 0a0: 109 090 19c 1c1 028 1b3 135 16a 176 0df 1e5 188 0c5 16e 1de 1b1 0b0: 0c3 1df 036 0ee 1ee 0f0 093 049 09a 1b6 069 081 125 00b 05e 0b4 0c0: 149 1c7 174 03e 13b 1b7 08e 1c6 0ae 010 095 1ef 04e 0f2 1fd 085 0d0: 0fd 0f6 0a0 16f 083 08a 156 09b 13c 107 167 098 1d0 1e9 003 1fe 0e0: 0bd 122 089 0d2 18f 012 033 06a 142 0ed 170 11b 0e2 14f 158 131 0f0: 147 05d 113 1cd 079 161 1a5 179 09e 1b4 0cc 022 132 01a 0e8 004 100: 187 1ed 197 039 1bf 1d7 027 18b 0c6 09c 0d0 14e 06c 034 1f2 06e 110: 0ca 025 0ba 191 0fe 013 106 02f 1ad 172 1db 0c0 10b 1d6 0f5 1ec 120: 10d 076 114 1ab 075 10c 1e4 159 054 11f 04b 0c4 1be 0f7 029 0a4 130: 00e 1f0 077 04d 17a 086 08b 0b3 171 0bf 10e 104 097 15b 160 168 140: 0d7 0bb 066 1ce 0fc 092 1c5 06f 016 04a 0a1 139 0af 0f1 190 00a 150: 1aa 143 17b 056 18d 166 0d4 1fb 14d 194 19a 087 1f8 123 0a7 1b8 160: 141 03c 1f9 140 02a 155 11a 1a1 198 0d5 126 1af 061 12e 157 1dc 170: 072 18a 0aa 096 115 0ef 045 07b 08d 145 053 05f 178 0b2 02e 020 180: 1d5 03f 1c9 1e7 1ac 044 038 014 0b1 16b 0ab 0b5 05a 182 1c8 1d4 190: 018 177 064 0cf 06d 100 199 130 15a 005 120 1bb 1bd 0e0 04f 0d6 1a0: 13f 1c4 12a 015 006 0ff 19b 0a6 043 088 050 15f 1e8 121 073 17e 1b0: 0bc 0c2 0c9 173 189 1f5 074 1cc 1e6 1a8 195 01f 041 00d 1ba 032 1c0: 03d 1d1 080 0a8 057 1b9 162 148 0d9 105 062 07a 021 1ff 112 108 1d0: 1c0 0a9 11d 1b0 1a6 0cd 0f3 05c 102 05b 1d9 144 1f6 0ad 0a5 03a 1e0: 1cb 136 17f 046 0e1 01e 1dd 0e6 137 1fa 185 08c 08f 040 1b5 0be 1f0: 078 000 0ac 110 15e 124 002 1bc 0a2 0ea 070 1fc 116 15c 04c 1c2 Function FL takes two parameters. One is a 32-bit data, namely FL_IN. The other is an index of EK, namely k. And FL returns a 32- bit width data, namely FL_OUT.",
      "ja": "S9Table：0 1 2 3 4 5 6 7 8 9 A B C D E F 000：1C3 0CB 153 19F 1E3 0E9 0FB 035 181 0B9 117 1EB 133 009 02D 02D 02D 02D 02D 02D 02D 02D 010：0C7 14A 037 07E 0EB 164 193：14B 152 1D2 00F 02B 030 13A 0E5 111 138 18E 063 0E3 0C8 1F4 01B 030：001 09D 0F8 1A0 16D 1F3 01C 146 07D 0D1 082 1EA 183 12d 0F4 19E 040 018c 10f 1f7 050: 0e7 16c 0b6 0f9 0d8 151 101 14c 103 0b8 154 12b 1ae 017 071 00c 060: 047 058 07f 1a4 134 129 084 15d 19d 1b2 1a3 048 07c 051 1ca 023 070: 13d 1a7 165 03b 042 0da 192 0ce 0c106B 09F 1F1 12C 184 0FA 196 080：1E1 169 17D 031 180 10A 094 1DA 186 13E 11C 060 175 1CF 067 119 090：065 068 099 150 008 007 17C 0B7 024 81B3 135 16A 176 0DF 1E5 188 0C5 16E 1DE 1B1 0B0：0C3 1DF 036 0EE 1EE 0F0 093 049 09A 1B6 069 081 12500B 05E 0B4 0C0：149 1C7 174 0：0fd0f6 0a0 16f 083 08a 156 09b 13c 107 167 098 1d0 1e9 003 1fe 0e0: 0bd 122 089 0d2 18f 012 033 06a 142 0ed 170 11b 0e2 14f 158 131 0f0: 147 05d 113 1cd 079 161 1a5 179 09e 1b4 0cc 022 132 01a 0e8004 100：187 1ed 197 039 1BF 1D7 027 18B 0C6 09C 0D0 14E 06C 034 1F2 06E 110：0CA 025 0BA 191 0FE 013 106 02F 1AD 172 1DB 0C0 10B 1D6 0F5 1EC0c4 1be 0f7 029 0a4 130: 00e 1f0 077 04d 17a 086 08b 0b3 171 0bf 10e 104 097 15b 160 168 140: 0d7 0bb 066 1ce 0fc 092 1c5 06f 016 04a 0a1 139 0af 0f1 190 00a 150: 1aa 143 17b 056 18d 166 0d41FB 14d 194 19a 087 1F8 123 0A7 1B8 160：141 03C 1F9 140 02A 155 11A 1A1 198 0D5 126 1AF 061 12E 157 1DC 170：072 18A 0AA 096 115 0EF 0EF 045 07B1e7 1ac 044 038 014 0b1 16b 0ab 0b5 05a 182 1c8 1d4 190: 018 177 064 0cf 06d 100 199 130 15a 005 120 1bb 1bd 0e0 04f 0d6 1a0: 13f 1c4 12a 015 006 0ff 19b 0a6 043 088 050 15f 1e8 121 073 17e 1b0：0BC 0C2 0C9 173 189 1F5 074 1CC 1E6 1A8 195 01F 041 00D 1BA 032 1C0：03D 1D1 080 0A8 057 1B9 162 148 0D9 105 062 07A 021 1ff 112 144 1F60AD 0A5 03A 1E0：1CB 136 17F 046 0E1 01E 1DD 0E6 137 1FA 185 08C 08F 040 1B5 0BE 1F0：078 000 0AC 110 15E 124 002 1BC 0A2 0EA 070 1FC 116 15C 04C 1C2機能1つは32ビットデータ、つまりFL_INです。もう1つは、EKのインデックス、つまりkです。そして、FLは32ビット幅データ、つまりFL_OUTを返します。"
    },
    {
      "indent": 3,
      "text": "FL(FL_IN, k)\nbegin\n    var d0, d1 as 16-bit integer;\n    d0 = FL_IN >> 16;\n    d1 = FL_IN & 0xffff;\n    if (k is an even number) then\n        d1 = d1 ^ (d0 & EK[k/2]);\n        d0 = d0 ^ (d1 | EK[(k/2+6)%8+8]);\n    else\n        d1 = d1 ^ (d0 & EK[((k-1)/2+2)%8+8]);\n        d0 = d0 ^ (d1 | EK[((k-1)/2+4)%8]);\n    endif\n    FL_OUT = (d0<<16) | d1;\n    return FL_OUT;\nend.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When the algorithm is used for decryption, function FLINV is used instead of function FL.",
      "ja": "アルゴリズムが復号化に使用される場合、関数FLの代わりに関数FLINVが使用されます。"
    },
    {
      "indent": 3,
      "text": "FLINV(FL_IN, k)\nbegin\n    var d0, d1 as 16-bit integer;\n    d0 = FL_IN >> 16;\n    d1 = FL_IN & 0xffff;\n    if (k is an even number) then\n        d0 = d0 ^ (d1 | EK[(k/2+6)%8+8]);\n        d1 = d1 ^ (d0 & EK[k/2]);\n    else\n        d0 = d0 ^ (d1 | EK[((k-1)/2+4)%8]);\n        d1 = d1 ^ (d0 & EK[((k-1)/2+2)%8+8]);\n    endif\n    FL_OUT = (d0<<16) | d1;\n    return FL_OUT;\nend.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In most cases, data randomizing part consists of 8 \"rounds\". Round contains the call of function FO. Additionally, even-number round includes the calls of function FL. After the final round, FLs are called again. The detail description is as follows.",
      "ja": "ほとんどの場合、データランダム化パーツは8回の「ラウンド」で構成されています。ラウンドには、機能のfoの呼び出しが含まれています。さらに、偶数のラウンドには、機能の呼び出しFLが含まれます。最終ラウンドの後、FLSは再び呼び出されます。詳細な説明は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "64-bit plaintext P is divided into the leftmost 32-bit D0 and the rightmost 32-bit D1.",
      "ja": "64ビットプレーンテキストPは、左端の32ビットD0と右端の32ビットD1に分割されます。"
    },
    {
      "indent": 3,
      "text": "// 0 round\nD0 = FL(D0, 0);\nD1 = FL(D1, 1);\nD1 = D1 ^ FO(D0, 0);\n// 1 round\nD0 = D0 ^ FO(D1, 1);\n// 2 round\nD0 = FL(D0, 2);\nD1 = FL(D1, 3);\nD1 = D1 ^ FO(D0, 2);\n// 3 round\nD0 = D0 ^ FO(D1, 3);\n// 4 round\nD0 = FL(D0, 4);\nD1 = FL(D1, 5);\nD1 = D1 ^ FO(D0, 4);\n// 5 round\nD0 = D0 ^ FO(D1, 5);\n// 6 round\nD0 = FL(D0, 6);\nD1 = FL(D1, 7);\nD1 = D1 ^ FO(D0, 6);\n// 7 round\nD0 = D0 ^ FO(D1, 7);\n// final\nD0 = FL(D0, 8);\nD1 = FL(D1, 9);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "64-bit ciphertext C is constructed from D0 and D1 as following operation.",
      "ja": "64ビット暗号文Cは、次の動作としてD0およびD1から構築されます。"
    },
    {
      "indent": 3,
      "text": "C = (D1<<32) | D0;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When data randomizing part is used as decrypting operation, it should be executed in reverse order. The detail description is as follows.",
      "ja": "データランダム化パーツが復号化操作として使用される場合、逆順序で実行する必要があります。詳細な説明は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "D0 = C & 0xffffffff;\nD1 = C >> 32;\nD0 = FLINV(D0, 8);\nD1 = FLINV(D1, 9);\nD0 = D0 ^ FO(D1, 7);\nD1 = D1 ^ FO(D0, 6);\nD0 = FLINV(D0, 6);\nD1 = FLINV(D1, 7);\nD0 = D0 ^ FO(D1, 5);\nD1 = D1 ^ FO(D0, 4);\nD0 = FLINV(D0, 4);\nD1 = FLINV(D1, 5);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "D0 = D0 ^ FO(D1, 3);\nD1 = D1 ^ FO(D0, 2);\nD0 = FLINV(D0, 2);\nD1 = FLINV(D1, 3);\nD0 = D0 ^ FO(D1, 1);\nD1 = D1 ^ FO(D0, 0);\nD0 = FLINV(D0, 0);\nD1 = FLINV(D1, 1);\nP = (D0<<32) | D1;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3. Object Identifier",
      "section_title": true,
      "ja": "3. オブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "The Object Identifier for MISTY1 in Cipher Block Chaining (CBC) mode is as follows:",
      "ja": "暗号ブロックチェーン（CBC）モードのMISTY1のオブジェクト識別子は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "MISTY1-CBC OBJECT IDENTIFIER ::=\n  {iso(1) member-body(2) jisc(392)\n   mitsubishi-electric-corporation(200011) isl(61) security(1)\n   algorithm(1) symmetric-encryption-algorithm(1) misty1-cbc(1)}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "MISTY1-CBC needs Initialization Vector (IV) as like as other algorithms, such as DES-CBC, DES-EDE3-CBC and so on. To determine the value of IV, MISTY1-CBC takes parameter as:",
      "ja": "MISTY1-CBCには、DES-CBC、Des-EDE3-CBCなどの他のアルゴリズムと同様に、初期化ベクトル（IV）が必要です。IVの値を決定するために、MISTY1-CBCは次のようにパラメーターを取ります"
    },
    {
      "indent": 3,
      "text": "MISTY1-CBC Parameter ::= IV",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where IV ::= OCTET STRING -- 8 octets.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When this Object Identifier is used, plaintext is padded before encrypt it. At least 1 padding octet is appended at the end of the plaintext to make the length of the plaintext to the multiple of 8 octets. The value of these octets is as same as the number of appended octets. (e.g., If 5 octets are needed to pad, the value is 0x05.)",
      "ja": "このオブジェクト識別子が使用されると、プレーンテキストが暗号化する前にパッドが付けられます。少なくとも1つのパディングオクテットがプレーンテキストの最後に追加され、プレーンテキストの長さを8オクテットの倍数にします。これらのオクテットの値は、追加されたオクテットの数と同じです。（たとえば、パッドに5オクテットが必要な場合、値は0x05です。）"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The algorithm, which is described in this document, is designed in consideration of the theory of provable security against differential cryptanalysis and linear cryptanalysis [2][3][4]. According to the recent result, when the algorithm consists of 8 rounds, both differential characteristic probability and liner characteristic probability are 2^-140. For reference, probabilities of DES are 2^- 62 and 2^-46, respectively.",
      "ja": "このドキュメントで説明されているアルゴリズムは、微分暗号化と線形暗号化に対する証明可能なセキュリティの理論を考慮して設計されています[2] [3] [4]。最近の結果によると、アルゴリズムが8ラウンドで構成されている場合、差動特性確率とライナー特性確率の両方が2^-140です。参照のために、DESの確率はそれぞれ2^-62と2^-46です。"
    },
    {
      "indent": 0,
      "text": "5. Legal Issues",
      "section_title": true,
      "ja": "5. 法的問題"
    },
    {
      "indent": 3,
      "text": "The algorithm description is applied for a patent in several countries as PCT/JP96/02154. However, the algorithm is freely available for academic (non-profit) use. Additionally, the algorithm can be used for commercial use without paying the patent fee if you contract with Mitsubishi Electric Corporation. For more information, please contact at MISTY@isl.melco.co.jp.",
      "ja": "アルゴリズムの説明は、PCT/JP96/02154として、いくつかの国の特許に適用されます。ただし、アルゴリズムはアカデミック（非営利）の使用に自由に利用できます。さらに、このアルゴリズムは、Mitsubishi Electric Corporationと契約する場合、特許料金を支払うことなく商業用に使用できます。詳細については、misty@isl.melco.co.jpをお問い合わせください。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 3,
      "text": "[1] M. Matsui, \"New Block Encryption Algorithm MISTY\", Fast Software Encryption - 4th International Workshop (FSE'97), LNCS 1267, Springer Verlag, 1997, pp.54-68",
      "ja": "[1] M. Matsui、「新しいブロック暗号化アルゴリズムMisty」、高速ソフトウェア暗号化-4th International Workshop（FSE'97）、LNCS 1267、Springer Verlag、1997、pp.54-68"
    },
    {
      "indent": 3,
      "text": "[2] K. Nyberg and L.R. Knudsen, \"Provable Security Against a Differential Attack\", Journal of Cryptology, Vol.8, No.1, 1995, pp. 27-37",
      "ja": "[2] K.ナイバーグとL.R.Knudsen、「差別的攻撃に対する証明可能なセキュリティ」、Journal of Cryptology、Vol.8、No.1、1995、pp。27-37"
    },
    {
      "indent": 3,
      "text": "[3] K. Nyberg, \"Linear Approximation of Block Ciphers\", Advances in Cryptology - Eurocrypt'94, LNCS 950, Springer Verlag, 1995, pp.439-444",
      "ja": "[3] K. Nyberg、「ブロック暗号の線形近似」、暗号学の進歩-EuroCrypt'94、LNCS 950、Springer Verlag、1995、pp.439-444"
    },
    {
      "indent": 3,
      "text": "[4] M. Matsui, \"New Structure of Block Ciphers with Provable Security Against Differential and Linear Cryptanalysis\", Fast Software Encryption - Third International Workshop, LNCS 1039, Springer Verlag, 1996, pp.205-218",
      "ja": "[4] M. Matsui、「差動および線形暗号化に対する証明可能なセキュリティを備えたブロック暗号の新しい構造」、高速ソフトウェア暗号化 - サードインターナショナルワークショップ、LNCS 1039、Springer Verlag、1996、pp.205-218"
    },
    {
      "indent": 0,
      "text": "7. Authors' Addresses",
      "section_title": true,
      "ja": "7. 著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Hidenori Ohta Mitsubishi Electric Corporation, Information Technology R&D Center 5-1-1 Ofuna, Kamakura, Kanagawa 247-8501, Japan",
      "ja": "Hidenori Mitsubishi Electric Corporation、Information Technology R＆D Center 5-1-1オブオブオブ、Kamakura、Kanagawa 247-8501、日本"
    },
    {
      "indent": 3,
      "text": "Phone: +81-467-41-2183\nFax:   +81-467-41-2185\nEMail: hidenori@iss.isl.melco.co.jp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Mitsuru Matsui Mitsubishi Electric Corporation, Information Technology R&D Center 5-1-1 Ofuna, Kamakura, Kanagawa 247-8501, Japan",
      "ja": "ミツール松井三菱エレクトリックコーポレーション、情報技術R＆Dセンター5-1-1オブオブ、カナガワ247-8501、日本"
    },
    {
      "indent": 3,
      "text": "Phone: +81-467-41-2181\nFax:   +81-467-41-2185\nEMail: matsui@iss.isl.melco.co.jp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix A. Example Data of MISTY1",
      "section_title": true,
      "ja": "付録A. Misty1の例データ"
    },
    {
      "indent": 3,
      "text": "Here is an example ciphertext of MISTY1 when the key and the plaintext are set as following value.",
      "ja": "キーとプレーンテキストが次の値として設定されている場合のMisty1のciphertextの例を以下に示します。"
    },
    {
      "indent": 3,
      "text": "Key: 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff Plaintext: 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Ciphertext: 8b 1d a5 f5 6a b3 d0 7c 04 b6 82 40 b1 3b e9 5d",
      "ja": "キー：00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF PLAINTEXT：01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10 CIPHERTEXT：8B 1D A5 F5 6A B3 D0 7C 04 B6 82 40 40 40 44B1 3B E9 5D"
    },
    {
      "indent": 3,
      "text": "In the above example, because the plaintext has a length of 128-bit, MISTY1 is used two times to each 64-bit, namely ECB mode.",
      "ja": "上記の例では、プレーンテキストの長さは128ビットであるため、Misty1は64ビット、つまりECBモードに2回使用されます。"
    },
    {
      "indent": 3,
      "text": "Following example is ciphertext of MISTY1 in CBC mode.",
      "ja": "次の例は、CBCモードのMisty1のciphertextです。"
    },
    {
      "indent": 3,
      "text": "Key: 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff IV: 01 02 03 04 05 06 07 08 Plaintext: 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Ciphertext: 46 1c 1e 87 9c 18 c2 7f b9 ad f2 d8 0c 89 03 1f",
      "ja": "キー：00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF IV：01 02 03 04 05 06 07 07 08 PLANTEXT：01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10 CIPHERTEXT：46 1C 1C1E 87 9C 18 C2 7F B9 AD F2 D8 0C 89 03 1F"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2000）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があります。また、それについてコメントまたは説明する派生作品、またはその実装を支援することは、いかなる種類の制限なしに、準備、コピー、公開、および部分的に配布される場合があります。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会またはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書と本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}