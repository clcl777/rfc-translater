{
  "title": {
    "text": "RFC 2581 - TCP Congestion Control",
    "ja": "RFC 2581 - TCP混雑制御"
  },
  "number": 2581,
  "created_at": "2024-02-23 13:17:16.161017+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          M. Allman\nRequest for Comments: 2581                  NASA Glenn/Sterling Software\nObsoletes: 2001                                                V. Paxson\nCategory: Standards Track                                   ACIRI / ICSI\n                                                              W. Stevens\n                                                              Consultant\n                                                              April 1999",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "TCP Congestion Control",
      "ja": "TCP混雑制御"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（1999）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines TCP's four intertwined congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery. In addition, the document specifies how TCP should begin transmission after a relatively long idle period, as well as discussing various acknowledgment generation methods.",
      "ja": "このドキュメントでは、TCPの4つの絡み合った混雑制御アルゴリズムを定義します。スロースタート、輻輳回避、迅速な再送信、迅速な回復です。さらに、ドキュメントは、比較的長いアイドル期間後にTCPが送信を開始する方法を指定し、さまざまな承認生成方法について議論します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document specifies four TCP [Pos81] congestion control algorithms: slow start, congestion avoidance, fast retransmit and fast recovery. These algorithms were devised in [Jac88] and [Jac90]. Their use with TCP is standardized in [Bra89].",
      "ja": "このドキュメントは、4つのTCP [POS81]輻輳制御アルゴリズムを指定しています。スロースタート、混雑回避、迅速な再送信、迅速な回復。これらのアルゴリズムは[JAC88]および[JAC90]で考案されました。TCPでのそれらの使用は、[bra89]で標準化されています。"
    },
    {
      "indent": 3,
      "text": "This document is an update of [Ste97]. In addition to specifying the congestion control algorithms, this document specifies what TCP connections should do after a relatively long idle period, as well as specifying and clarifying some of the issues pertaining to TCP ACK generation.",
      "ja": "このドキュメントは[Ste97]の更新です。輻輳制御アルゴリズムの指定に加えて、このドキュメントは、TCP接続が比較的長いアイドル期間後に行うべきことを指定し、TCP ACK生成に関する問題の一部を指定および明確にします。"
    },
    {
      "indent": 3,
      "text": "Note that [Ste94] provides examples of these algorithms in action and [WS95] provides an explanation of the source code for the BSD implementation of these algorithms.",
      "ja": "[STE94]は、これらのアルゴリズムの動作の例を提供し、[WS95]がこれらのアルゴリズムのBSD実装のソースコードの説明を提供することに注意してください。"
    },
    {
      "indent": 3,
      "text": "This document is organized as follows. Section 2 provides various definitions which will be used throughout the document. Section 3 provides a specification of the congestion control algorithms. Section 4 outlines concerns related to the congestion control algorithms and finally, section 5 outlines security considerations.",
      "ja": "このドキュメントは次のように整理されています。セクション2では、ドキュメント全体で使用されるさまざまな定義を提供します。セクション3では、輻輳制御アルゴリズムの仕様を示します。セクション4は、輻輳制御アルゴリズムに関連する懸念の概要を示し、最後にセクション5でセキュリティに関する考慮事項の概要を説明します。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [Bra97].",
      "ja": "「必須」、「そうしない」、「必須」、「必要」、「「しない」、「そうでない」、「そうではない」、「そうでない」、「推奨」、「5月」、および「オプション」は、[bra97]で説明されているように解釈される。"
    },
    {
      "indent": 0,
      "text": "2. Definitions",
      "section_title": true,
      "ja": "2. 定義"
    },
    {
      "indent": 3,
      "text": "This section provides the definition of several terms that will be used throughout the remainder of this document.",
      "ja": "このセクションでは、このドキュメントの残りの部分で使用されるいくつかの用語の定義を提供します。"
    },
    {
      "indent": 3,
      "text": "SEGMENT: A segment is ANY TCP/IP data or acknowledgment packet (or both).",
      "ja": "セグメント：セグメントは、TCP/IPデータまたは確認パケット（またはその両方）です。"
    },
    {
      "indent": 3,
      "text": "SENDER MAXIMUM SEGMENT SIZE (SMSS): The SMSS is the size of the largest segment that the sender can transmit. This value can be based on the maximum transmission unit of the network, the path MTU discovery [MD90] algorithm, RMSS (see next item), or other factors. The size does not include the TCP/IP headers and options.",
      "ja": "送信者の最大セグメントサイズ（SMSS）：SMSSは、送信者が送信できる最大のセグメントのサイズです。この値は、ネットワークの最大送信ユニット、PATH MTU Discovery [MD90]アルゴリズム、RMSS（次のアイテムを参照）、またはその他の要因に基づいています。サイズには、TCP/IPヘッダーとオプションは含まれません。"
    },
    {
      "indent": 3,
      "text": "RECEIVER MAXIMUM SEGMENT SIZE (RMSS): The RMSS is the size of the largest segment the receiver is willing to accept. This is the value specified in the MSS option sent by the receiver during connection startup. Or, if the MSS option is not used, 536 bytes [Bra89]. The size does not include the TCP/IP headers and options.",
      "ja": "受信機の最大セグメントサイズ（RMSS）：RMSSは、受信者が受け入れたい最大セグメントのサイズです。これは、接続スタートアップ中に受信機が送信したMSSオプションで指定された値です。または、MSSオプションを使用していない場合は、536バイト[bra89]。サイズには、TCP/IPヘッダーとオプションは含まれません。"
    },
    {
      "indent": 3,
      "text": "FULL-SIZED SEGMENT: A segment that contains the maximum number of data bytes permitted (i.e., a segment containing SMSS bytes of data).",
      "ja": "フルサイズのセグメント：許可されているデータバイトの最大数を含むセグメント（つまり、SMSSバイトのデータを含むセグメント）。"
    },
    {
      "indent": 3,
      "text": "RECEIVER WINDOW (rwnd) The most recently advertised receiver window.",
      "ja": "レシーバーウィンドウ（RWND）最近宣伝されたレシーバーウィンドウ。"
    },
    {
      "indent": 3,
      "text": "CONGESTION WINDOW (cwnd): A TCP state variable that limits the amount of data a TCP can send. At any given time, a TCP MUST NOT send data with a sequence number higher than the sum of the highest acknowledged sequence number and the minimum of cwnd and rwnd.",
      "ja": "うっ血ウィンドウ（CWND）：TCPが送信できるデータの量を制限するTCP状態変数。いつでも、TCPは、最高の認識されたシーケンス数と最小CWNDおよびRWNDの合計よりも高いシーケンス番号を持つデータを送信してはなりません。"
    },
    {
      "indent": 3,
      "text": "INITIAL WINDOW (IW): The initial window is the size of the sender's congestion window after the three-way handshake is completed.",
      "ja": "初期ウィンドウ（IW）：最初のウィンドウは、3方向の握手が完了した後の送信者の輻輳ウィンドウのサイズです。"
    },
    {
      "indent": 3,
      "text": "LOSS WINDOW (LW): The loss window is the size of the congestion window after a TCP sender detects loss using its retransmission timer.",
      "ja": "損失ウィンドウ（LW）：損失ウィンドウは、TCP送信者が再送信タイマーを使用して損失を検出した後の輻輳ウィンドウのサイズです。"
    },
    {
      "indent": 3,
      "text": "RESTART WINDOW (RW): The restart window is the size of the congestion window after a TCP restarts transmission after an idle period (if the slow start algorithm is used; see section 4.1 for more discussion).",
      "ja": "再起動ウィンドウ（RW）：再起動ウィンドウは、TCPがアイドル期間後に再起動した後の輻輳ウィンドウのサイズです（遅いスタートアルゴリズムを使用する場合。詳細についてはセクション4.1を参照）。"
    },
    {
      "indent": 3,
      "text": "FLIGHT SIZE: The amount of data that has been sent but not yet acknowledged.",
      "ja": "飛行サイズ：送信されたがまだ認められていないデータの量。"
    },
    {
      "indent": 0,
      "text": "3. Congestion Control Algorithms",
      "section_title": true,
      "ja": "3. 混雑制御アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section defines the four congestion control algorithms: slow start, congestion avoidance, fast retransmit and fast recovery, developed in [Jac88] and [Jac90]. In some situations it may be beneficial for a TCP sender to be more conservative than the algorithms allow, however a TCP MUST NOT be more aggressive than the following algorithms allow (that is, MUST NOT send data when the value of cwnd computed by the following algorithms would not allow the data to be sent).",
      "ja": "このセクションでは、[Jac88]および[Jac90]で開発された4つの輻輳制御アルゴリズム：スロースタート、輻輳回避、速い再送信、高速回復を定義します。状況によっては、TCP送信者がアルゴリズムが許可するよりも保守的であることが有益であるかもしれませんが、TCPは次のアルゴリズムが許すよりも積極的であってはなりません（つまり、次のCWNDの値が次のCWNDの値を送信してはいけません。アルゴリズムでは、データの送信を許可しません）。"
    },
    {
      "indent": 0,
      "text": "3.1 Slow Start and Congestion Avoidance",
      "section_title": true,
      "ja": "3.1 スロースタートと混雑回避"
    },
    {
      "indent": 3,
      "text": "The slow start and congestion avoidance algorithms MUST be used by a TCP sender to control the amount of outstanding data being injected into the network. To implement these algorithms, two variables are added to the TCP per-connection state. The congestion window (cwnd) is a sender-side limit on the amount of data the sender can transmit into the network before receiving an acknowledgment (ACK), while the receiver's advertised window (rwnd) is a receiver-side limit on the amount of outstanding data. The minimum of cwnd and rwnd governs data transmission.",
      "ja": "スロースタートおよび輻輳回避アルゴリズムは、ネットワークに注入される未解決のデータの量を制御するために、TCP送信者が使用する必要があります。これらのアルゴリズムを実装するために、2つの変数が接続ごとにTCPに追加されます。うっ血ウィンドウ（CWND）は、送信者が確認する前にネットワークに送信できるデータの量（ACK）の送信者側の制限です。一方優れたデータ。CWNDおよびRWNDの最小はデータ送信を管理します。"
    },
    {
      "indent": 3,
      "text": "Another state variable, the slow start threshold (ssthresh), is used to determine whether the slow start or congestion avoidance algorithm is used to control data transmission, as discussed below.",
      "ja": "別の状態変数であるスロースタートしきい値（SSthresh）を使用して、以下で説明するように、データ送信を制御するためにスロースタートまたは輻輳回避アルゴリズムを使用するかどうかを判断します。"
    },
    {
      "indent": 3,
      "text": "Beginning transmission into a network with unknown conditions requires TCP to slowly probe the network to determine the available capacity, in order to avoid congesting the network with an inappropriately large burst of data. The slow start algorithm is used for this purpose at the beginning of a transfer, or after repairing loss detected by the retransmission timer.",
      "ja": "不明な条件を持つネットワークへの送信を開始するには、TCPがネットワークをゆっくりとプローブして利用可能な容量を決定する必要があります。スロースタートアルゴリズムは、転送の開始時、または再送信タイマーによって検出された損失を修復した後、この目的に使用されます。"
    },
    {
      "indent": 3,
      "text": "IW, the initial value of cwnd, MUST be less than or equal to 2*SMSS bytes and MUST NOT be more than 2 segments.",
      "ja": "IW、CWNDの初期値は、2*SMSSバイト以下でなければならず、2つ以上のセグメントである必要があります。"
    },
    {
      "indent": 3,
      "text": "We note that a non-standard, experimental TCP extension allows that a TCP MAY use a larger initial window (IW), as defined in equation 1 [AFP98]:",
      "ja": "非標準の実験的TCP拡張により、式1 [AFP98]で定義されているように、TCPがより大きな初期ウィンドウ（IW）を使用できることができることに注意してください。"
    },
    {
      "indent": 6,
      "text": "IW = min (4*SMSS, max (2*SMSS, 4380 bytes))           (1)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With this extension, a TCP sender MAY use a 3 or 4 segment initial window, provided the combined size of the segments does not exceed 4380 bytes. We do NOT allow this change as part of the standard defined by this document. However, we include discussion of (1) in the remainder of this document as a guideline for those experimenting with the change, rather than conforming to the present standards for TCP congestion control.",
      "ja": "この拡張機能を使用すると、TCP送信者は、セグメントの合計サイズが4380バイトを超えない場合、3または4セグメントの初期ウィンドウを使用できます。このドキュメントで定義された標準の一部として、この変更は許可されていません。ただし、TCP輻輳制御の現在の基準に準拠するのではなく、この文書の残りの文書の残りの文書のガイドラインとしてのガイドラインとしての議論を含めます。"
    },
    {
      "indent": 3,
      "text": "The initial value of ssthresh MAY be arbitrarily high (for example, some implementations use the size of the advertised window), but it may be reduced in response to congestion. The slow start algorithm is used when cwnd < ssthresh, while the congestion avoidance algorithm is used when cwnd > ssthresh. When cwnd and ssthresh are equal the sender may use either slow start or congestion avoidance.",
      "ja": "SSthreshの初期値は任意に高い場合があります（たとえば、一部の実装では広告ウィンドウのサイズを使用します）が、混雑に応じて削減される場合があります。cwnd <ssthreshの場合はスロースタートアルゴリズムが使用されますが、cwnd> ssthreshの場合は輻輳回避アルゴリズムが使用されます。CWNDとSSTHRESHが等しい場合、送信者はスロースタートまたは輻輳回避のいずれかを使用する場合があります。"
    },
    {
      "indent": 3,
      "text": "During slow start, a TCP increments cwnd by at most SMSS bytes for each ACK received that acknowledges new data. Slow start ends when cwnd exceeds ssthresh (or, optionally, when it reaches it, as noted above) or when congestion is observed.",
      "ja": "スロースタート中、TCPは、新しいデータを認める各ACKのほとんどのSMSSバイトでCWNDを増加させます。cwndがssthreshを超えた場合（または、上記のように、それが到達したとき）、または輻輳が観察されたときに、スロースタートが終了します。"
    },
    {
      "indent": 3,
      "text": "During congestion avoidance, cwnd is incremented by 1 full-sized segment per round-trip time (RTT). Congestion avoidance continues until congestion is detected. One formula commonly used to update cwnd during congestion avoidance is given in equation 2:",
      "ja": "混雑回避の間、CWNDは往復時間（RTT）ごとに1つのフルサイズのセグメントによって増加します。混雑の回避は、輻輳が検出されるまで続きます。混雑回避中にCWNDを更新するために一般的に使用される1つの式は、式2に示されています。"
    },
    {
      "indent": 6,
      "text": "cwnd += SMSS*SMSS/cwnd                     (2)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "This adjustment is executed on every incoming non-duplicate ACK. Equation (2) provides an acceptable approximation to the underlying principle of increasing cwnd by 1 full-sized segment per RTT. (Note that for a connection in which the receiver acknowledges every data segment, (2) proves slightly more aggressive than 1 segment per RTT, and for a receiver acknowledging every-other packet, (2) is less aggressive.) Implementation Note: Since integer arithmetic is usually used in TCP implementations, the formula given in equation 2 can fail to increase cwnd when the congestion window is very large (larger than SMSS*SMSS). If the above formula yields 0, the result SHOULD be rounded up to 1 byte.",
      "ja": "この調整は、すべての着信非重複ACKで実行されます。式（2）は、RTTごとに1つのフルサイズのセグメントを増加させるという根本原理の許容可能な近似を提供します。（レシーバーがすべてのデータセグメントを認めている接続の場合、（2）RTTごとに1セグメントよりもわずかに攻撃的であることを証明し、他のパケットを認める受信機の場合、（2）積極的ではありません。）整数算術は通常、TCP実装で使用され、式2に与えられた式は、輻輳ウィンドウが非常に大きい場合（SMSS*SMSSよりも大きい）場合、CWNDの増加に失敗する可能性があります。上記の式が0を生成する場合、結果は1バイトまで丸められる必要があります。"
    },
    {
      "indent": 3,
      "text": "Implementation Note: older implementations have an additional additive constant on the right-hand side of equation (2). This is incorrect and can actually lead to diminished performance [PAD+98].",
      "ja": "実装注：古い実装には、式（2）の右側に追加の追加定数があります。これは正しくなく、実際にパフォーマンスの低下につながる可能性があります[PAD 98]。"
    },
    {
      "indent": 3,
      "text": "Another acceptable way to increase cwnd during congestion avoidance is to count the number of bytes that have been acknowledged by ACKs for new data. (A drawback of this implementation is that it requires maintaining an additional state variable.) When the number of bytes acknowledged reaches cwnd, then cwnd can be incremented by up to SMSS bytes. Note that during congestion avoidance, cwnd MUST NOT be increased by more than the larger of either 1 full-sized segment per RTT, or the value computed using equation 2.",
      "ja": "混雑回避中にCWNDを増やすもう1つの許容可能な方法は、新しいデータのACKによって認められたバイト数をカウントすることです。（この実装の欠点は、追加の状態変数を維持する必要があることです。）認識されているバイト数がCWNDに到達した場合、CWNDはSMSSバイトまで増分することができます。混雑回避中に、CWNDは、RTTごとに1つのフルサイズのセグメントのいずれか、または式2を使用して計算された値のいずれかを超えて増加してはならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Implementation Note: some implementations maintain cwnd in units of bytes, while others in units of full-sized segments. The latter will find equation (2) difficult to use, and may prefer to use the counting approach discussed in the previous paragraph.",
      "ja": "実装注：いくつかの実装は、バイトの単位でCWNDを維持し、他の実装はフルサイズのセグメントの単位で維持しています。後者は式（2）を使用するのが難しく、前の段落で説明したカウントアプローチを使用することを好む場合があります。"
    },
    {
      "indent": 3,
      "text": "When a TCP sender detects segment loss using the retransmission timer, the value of ssthresh MUST be set to no more than the value given in equation 3:",
      "ja": "TCP送信者が再送信タイマーを使用してセグメントの損失を検出する場合、SSTHRESHの値は、式3に与えられた値にすぎないように設定する必要があります。"
    },
    {
      "indent": 6,
      "text": "ssthresh = max (FlightSize / 2, 2*SMSS)            (3)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As discussed above, FlightSize is the amount of outstanding data in the network.",
      "ja": "上記で説明したように、Flight -Sizeはネットワーク内の未解決のデータの量です。"
    },
    {
      "indent": 3,
      "text": "Implementation Note: an easy mistake to make is to simply use cwnd, rather than FlightSize, which in some implementations may incidentally increase well beyond rwnd.",
      "ja": "実装注：簡単な間違いは、フライトサイズではなくCWNDを単純に使用することです。これは、いくつかの実装では偶然にRWNDをはるかに超えて増加する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Furthermore, upon a timeout cwnd MUST be set to no more than the loss window, LW, which equals 1 full-sized segment (regardless of the value of IW). Therefore, after retransmitting the dropped segment the TCP sender uses the slow start algorithm to increase the window from 1 full-sized segment to the new value of ssthresh, at which point congestion avoidance again takes over.",
      "ja": "さらに、タイムアウト時には、CWNDを1つのフルサイズのセグメントに等しい損失ウィンドウLWにすぎないように設定する必要があります（IWの値に関係なく）。したがって、ドロップされたセグメントを再送信した後、TCP送信者はスロースタートアルゴリズムを使用して、ウィンドウを1つのフルサイズのセグメントからSSthreshの新しい値に増やし、その時点で混雑回避が再び引き継ぎます。"
    },
    {
      "indent": 0,
      "text": "3.2 Fast Retransmit/Fast Recovery",
      "section_title": true,
      "ja": "3.2 高速再送信/高速回復"
    },
    {
      "indent": 3,
      "text": "A TCP receiver SHOULD send an immediate duplicate ACK when an out-of-order segment arrives. The purpose of this ACK is to inform the sender that a segment was received out-of-order and which sequence number is expected. From the sender's perspective, duplicate ACKs can be caused by a number of network problems. First, they can be caused by dropped segments. In this case, all segments after the dropped segment will trigger duplicate ACKs. Second, duplicate ACKs can be caused by the re-ordering of data segments by the network (not a rare event along some network paths [Pax97]). Finally, duplicate ACKs can be caused by replication of ACK or data segments by the network. In addition, a TCP receiver SHOULD send an immediate ACK when the incoming segment fills in all or part of a gap in the sequence space. This will generate more timely information for a sender recovering from a loss through a retransmission timeout, a fast retransmit, or an experimental loss recovery algorithm, such as NewReno [FH98].",
      "ja": "TCPレシーバーは、注文外セグメントが到着したときに、すぐに重複するACKを送信する必要があります。このACKの目的は、セグメントが注文外で受信され、どのシーケンス番号が予想されるかを送信者に通知することです。送信者の観点からは、重複するAcksは、多くのネットワークの問題によって引き起こされる可能性があります。まず、それらはドロップされたセグメントによって引き起こされる可能性があります。この場合、ドロップされたセグメント後のすべてのセグメントは、Acksの重複を引き起こします。第二に、重複するAckは、ネットワークによるデータセグメントの再注文によって引き起こされる可能性があります（一部のネットワークパスに沿ったまれなイベントではありません[Pax97]）。最後に、重複するACKは、ネットワークによるACKまたはデータセグメントの複製によって引き起こされる可能性があります。さらに、TCPレシーバーは、着信セグメントがシーケンススペースのギャップのすべてまたは一部を埋めるときに即時ACKを送信する必要があります。これにより、再送信タイムアウト、高速な再送信、またはNewreno [FH98]などの実験的損失回復アルゴリズムを通じて、損失から回復する送信者のためのよりタイムリーな情報が生成されます。"
    },
    {
      "indent": 3,
      "text": "The TCP sender SHOULD use the \"fast retransmit\" algorithm to detect and repair loss, based on incoming duplicate ACKs. The fast retransmit algorithm uses the arrival of 3 duplicate ACKs (4 identical ACKs without the arrival of any other intervening packets) as an indication that a segment has been lost. After receiving 3 duplicate ACKs, TCP performs a retransmission of what appears to be the missing segment, without waiting for the retransmission timer to expire.",
      "ja": "TCP送信者は、着信の重複ACKに基づいて、「高速再送信」アルゴリズムを使用して損失を検出および修復する必要があります。高速再送信アルゴリズムは、セグメントが失われたことを示すために、3つの重複ACK（他の介在パケットの到着なしに4つの同一のACK）の到着を使用します。3つの重複したACKを受け取った後、TCPは、再送信タイマーが期限切れになるのを待つことなく、欠落しているセグメントのように見えるものの再送信を実行します。"
    },
    {
      "indent": 3,
      "text": "After the fast retransmit algorithm sends what appears to be the missing segment, the \"fast recovery\" algorithm governs the transmission of new data until a non-duplicate ACK arrives. The reason for not performing slow start is that the receipt of the duplicate ACKs not only indicates that a segment has been lost, but also that segments are most likely leaving the network (although a massive segment duplication by the network can invalidate this conclusion). In other words, since the receiver can only generate a duplicate ACK when a segment has arrived, that segment has left the network and is in the receiver's buffer, so we know it is no longer consuming network resources. Furthermore, since the ACK \"clock\" [Jac88] is preserved, the TCP sender can continue to transmit new segments (although transmission must continue using a reduced cwnd).",
      "ja": "高速再送信アルゴリズムが欠落しているセグメントのように見えるものを送信した後、「高速回復」アルゴリズムは、非複雑なACKが到着するまで新しいデータの送信を管理します。スロースタートを実行しない理由は、重複ACKの受領がセグメントが失われたことを示すだけでなく、セグメントがネットワークを離れる可能性が最も高いことです（ネットワークによる大規模なセグメントの複製はこの結論を無効にする可能性があります）。言い換えれば、セグメントが到着したときにレシーバーは重複したACKを生成できるため、そのセグメントはネットワークを離れ、レシーバーのバッファーにあるため、ネットワークリソースを消費しなくなったことがわかります。さらに、ACK「クロック」[JAC88]が保存されているため、TCP送信者は新しいセグメントを引き続き送信できます（ただし、伝送はCWNDを減らし続ける必要があります）。"
    },
    {
      "indent": 3,
      "text": "The fast retransmit and fast recovery algorithms are usually implemented together as follows.",
      "ja": "通常、高速再送信および高速回復アルゴリズムは、次のように一緒に実装されます。"
    },
    {
      "indent": 3,
      "text": "1. When the third duplicate ACK is received, set ssthresh to no more than the value given in equation 3.",
      "ja": "1. 3番目の複製ACKを受信したら、式3に与えられた値を超えてSSThreshを設定します。"
    },
    {
      "indent": 3,
      "text": "2. Retransmit the lost segment and set cwnd to ssthresh plus 3*SMSS. This artificially \"inflates\" the congestion window by the number of segments (three) that have left the network and which the receiver has buffered.",
      "ja": "2. 失われたセグメントを再送信し、CWNDをSSTHRESH Plus 3*SMSSに設定します。これは、ネットワークを離れて受信機がバッファリングしたセグメントの数（3）だけで、輻輳ウィンドウを人為的に「膨らませる」。"
    },
    {
      "indent": 3,
      "text": "3. For each additional duplicate ACK received, increment cwnd by SMSS. This artificially inflates the congestion window in order to reflect the additional segment that has left the network.",
      "ja": "3. 受信した追加の複製ACKごとに、SMSSによってCWNDを増加させます。これにより、ネットワークを去った追加セグメントを反映するために、混雑ウィンドウを人為的に膨らませます。"
    },
    {
      "indent": 3,
      "text": "4. Transmit a segment, if allowed by the new value of cwnd and the receiver's advertised window.",
      "ja": "4. CWNDの新しい値とレシーバーの宣伝されたウィンドウで許可されている場合、セグメントを送信します。"
    },
    {
      "indent": 3,
      "text": "5. When the next ACK arrives that acknowledges new data, set cwnd to ssthresh (the value set in step 1). This is termed \"deflating\" the window.",
      "ja": "5. 新しいデータを認める次のACKが到着すると、CWNDをSSThreshに設定します（ステップ1に設定された値）。これは、ウィンドウを「デフレ」と呼びます。"
    },
    {
      "indent": 7,
      "text": "This ACK should be the acknowledgment elicited by the retransmission from step 1, one RTT after the retransmission (though it may arrive sooner in the presence of significant out-of-order delivery of data segments at the receiver). Additionally, this ACK should acknowledge all the intermediate segments sent between the lost segment and the receipt of the third duplicate ACK, if none of these were lost.",
      "ja": "このACKは、再送信後のRTT 1つのRTTからの再送信によって引き出される承認である必要があります（ただし、受信者でのデータセグメントの大幅なオーダーアウト外配信の存在下で早く到着する可能性があります）。さらに、このACKは、失われたセグメントと3番目の重複ACKの受領の間に送信されるすべての中間セグメントを認める必要があります。"
    },
    {
      "indent": 3,
      "text": "Note: This algorithm is known to generally not recover very efficiently from multiple losses in a single flight of packets [FF96]. One proposed set of modifications to address this problem can be found in [FH98].",
      "ja": "注：このアルゴリズムは、一般に、単一のパケットフライトで複数の損失からあまり効率的に回復しないことが知られています[FF96]。この問題に対処するための1つの提案された修正セットは、[FH98]にあります。"
    },
    {
      "indent": 0,
      "text": "4. Additional Considerations",
      "section_title": true,
      "ja": "4. 追加の考慮事項"
    },
    {
      "indent": 0,
      "text": "4.1 Re-starting Idle Connections",
      "section_title": true,
      "ja": "4.1 アイドル接続の再起動"
    },
    {
      "indent": 3,
      "text": "A known problem with the TCP congestion control algorithms described above is that they allow a potentially inappropriate burst of traffic to be transmitted after TCP has been idle for a relatively long period of time. After an idle period, TCP cannot use the ACK clock to strobe new segments into the network, as all the ACKs have drained from the network. Therefore, as specified above, TCP can potentially send a cwnd-size line-rate burst into the network after an idle period.",
      "ja": "上記のTCP混雑制御アルゴリズムの既知の問題は、TCPが比較的長い間アイドル状態になった後にトラフィックの不適切な潜在的なバーストを送信できることです。アイドル期間の後、TCPはACKクロックを使用して、すべてのACKがネットワークから排出されたため、新しいセグメントをネットワークにストロボで使用できません。したがって、上記で指定したように、TCPはアイドル期間後にCWNDサイズのラインレートバーがネットワークにバーストされる可能性があります。"
    },
    {
      "indent": 3,
      "text": "[Jac88] recommends that a TCP use slow start to restart transmission after a relatively long idle period. Slow start serves to restart the ACK clock, just as it does at the beginning of a transfer. This mechanism has been widely deployed in the following manner. When TCP has not received a segment for more than one retransmission timeout, cwnd is reduced to the value of the restart window (RW) before transmission begins.",
      "ja": "[JAC88]は、TCPが比較的長いアイドル期間の後にゆっくりとスタートして送信を再起動することを推奨しています。スロースタートは、転送の開始時と同じように、ACKクロックを再起動するのに役立ちます。このメカニズムは、次の方法で広く展開されています。TCPが複数の再送信タイムアウトのセグメントを受信していない場合、CWNDは送信が開始される前に再起動ウィンドウ（RW）の値に縮小されます。"
    },
    {
      "indent": 3,
      "text": "For the purposes of this standard, we define RW = IW.",
      "ja": "この標準の目的のために、rw = iwを定義します。"
    },
    {
      "indent": 3,
      "text": "We note that the non-standard experimental extension to TCP defined in [AFP98] defines RW = min(IW, cwnd), with the definition of IW adjusted per equation (1) above.",
      "ja": "[AFP98]で定義されているTCPの非標準の実験的拡張は、RW = MIN（IW、CWND）を定義し、上記の式（1）ごとに調整されたIWの定義とともに定義することに注意してください。"
    },
    {
      "indent": 3,
      "text": "Using the last time a segment was received to determine whether or not to decrease cwnd fails to deflate cwnd in the common case of persistent HTTP connections [HTH98]. In this case, a WWW server receives a request before transmitting data to the WWW browser. The reception of the request makes the test for an idle connection fail, and allows the TCP to begin transmission with a possibly inappropriately large cwnd.",
      "ja": "最後にセグメントを使用して、CWNDを減少させるかどうかを判断するためにセグメントが受信された場合、永続的なHTTP接続の一般的なケースでCWNDの収縮に失敗しました[HTH98]。この場合、WWWサーバーは、データをWWWブラウザーに送信する前にリクエストを受信します。リクエストの受信により、アイドル接続のテストが失敗し、TCPが不適切に大きなCWNDで送信を開始できます。"
    },
    {
      "indent": 3,
      "text": "Therefore, a TCP SHOULD set cwnd to no more than RW before beginning transmission if the TCP has not sent data in an interval exceeding the retransmission timeout.",
      "ja": "したがって、TCPが再送信タイムアウトを超える間隔でデータを送信していない場合、TCPは伝送を開始する前にCWNDをRW以下に設定する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.2 Generating Acknowledgments",
      "section_title": true,
      "ja": "4.2 謝辞を生成します"
    },
    {
      "indent": 3,
      "text": "The delayed ACK algorithm specified in [Bra89] SHOULD be used by a TCP receiver. When used, a TCP receiver MUST NOT excessively delay acknowledgments. Specifically, an ACK SHOULD be generated for at least every second full-sized segment, and MUST be generated within 500 ms of the arrival of the first unacknowledged packet.",
      "ja": "[BRA89]で指定された遅延ACKアルゴリズムは、TCPレシーバーが使用する必要があります。使用する場合、TCPレシーバーは承認を過度に遅らせてはなりません。具体的には、少なくとも2秒ごとのフルサイズのセグメントでACKを生成する必要があり、最初の未溶接パケットの到着から500ミリ秒以内に生成する必要があります。"
    },
    {
      "indent": 3,
      "text": "The requirement that an ACK \"SHOULD\" be generated for at least every second full-sized segment is listed in [Bra89] in one place as a SHOULD and another as a MUST. Here we unambiguously state it is a SHOULD. We also emphasize that this is a SHOULD, meaning that an implementor should indeed only deviate from this requirement after careful consideration of the implications. See the discussion of \"Stretch ACK violation\" in [PAD+98] and the references therein for a discussion of the possible performance problems with generating ACKs less frequently than every second full-sized segment.",
      "ja": "少なくとも2秒ごとのフルサイズのセグメントでACKを「 \"が生成する必要がある」という要件は、[bra89]にある場所で、ある場所に、別の場所で必須としてリストされています。ここでは、それがすべきであると明確に述べています。また、これは必要であることを強調します。つまり、実装者は実際にこの要件を慎重に検討した後にのみこの要件から逸脱する必要があります。[PAD 98]の「Stretch ACK違反」の議論と、毎秒フルサイズのセグメントよりもACKを生成する頻度が低い場合の可能なパフォーマンスの問題の議論については、その参照を参照してください。"
    },
    {
      "indent": 3,
      "text": "In some cases, the sender and receiver may not agree on what constitutes a full-sized segment. An implementation is deemed to comply with this requirement if it sends at least one acknowledgment every time it receives 2*RMSS bytes of new data from the sender, where RMSS is the Maximum Segment Size specified by the receiver to the sender (or the default value of 536 bytes, per [Bra89], if the receiver does not specify an MSS option during connection establishment). The sender may be forced to use a segment size less than RMSS due to the maximum transmission unit (MTU), the path MTU discovery algorithm or other factors. For instance, consider the case when the receiver announces an RMSS of X bytes but the sender ends up using a segment size of Y bytes (Y < X) due to path MTU discovery (or the sender's MTU size). The receiver will generate stretch ACKs if it waits for 2*X bytes to arrive before an ACK is sent. Clearly this will take more than 2 segments of size Y bytes. Therefore, while a specific algorithm is not defined, it is desirable for receivers to attempt to prevent this situation, for example by acknowledging at least every second segment, regardless of size. Finally, we repeat that an ACK MUST NOT be delayed for more than 500 ms waiting on a second full-sized segment to arrive.",
      "ja": "場合によっては、送信者とレシーバーは、フルサイズのセグメントを構成するものに同意しない場合があります。実装は、送信者から2*RMSSバイトの新しいデータを受信するたびに少なくとも1つの確認を送信する場合、この要件に準拠するとみなされます。[BRA89]ごとに、536バイトの、受信機が接続確立中にMSSオプションを指定しない場合）。送信者は、最大透過ユニット（MTU）、PATH MTUディスカバリーアルゴリズム、またはその他の要因により、RMSより少ないセグメントサイズを使用することを余儀なくされる場合があります。たとえば、受信者がXバイトのRMSを発表したが、送信者は、PATH MTUディスカバリー（または送信者のMTUサイズ）のためにYバイト（Y <X）のセグメントサイズ（Y <X）を使用する場合を考慮してください。受信機は、ACKが送信される前に2*xバイトが到着するのを待つ場合、ストレッチアクックを生成します。明らかに、これにはサイズYバイトの2つ以上のセグメントが必要です。したがって、特定のアルゴリズムは定義されていませんが、サイズに関係なく、少なくとも2秒ごとのセグメントを認めることにより、受信機がこの状況を防止しようとすることが望ましいです。最後に、2番目のフルサイズのセグメントが到着するのを待って500ミリ秒以上遅延してはならないことを繰り返します。"
    },
    {
      "indent": 3,
      "text": "Out-of-order data segments SHOULD be acknowledged immediately, in order to accelerate loss recovery. To trigger the fast retransmit algorithm, the receiver SHOULD send an immediate duplicate ACK when it receives a data segment above a gap in the sequence space. To provide feedback to senders recovering from losses, the receiver SHOULD send an immediate ACK when it receives a data segment that fills in all or part of a gap in the sequence space.",
      "ja": "損失の回復を加速するために、秩序外のデータセグメントはすぐに確認する必要があります。高速再送信アルゴリズムをトリガーするには、受信者は、シーケンス空間のギャップの上にデータセグメントを受信したときに、即時の複製ACKを送信する必要があります。損失から回復する送信者にフィードバックを提供するために、受信者は、シーケンススペースのギャップのすべてまたは一部を埋めるデータセグメントを受信したときに、すぐにACKを送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "A TCP receiver MUST NOT generate more than one ACK for every incoming segment, other than to update the offered window as the receiving application consumes new data [page 42, Pos81][Cla82].",
      "ja": "TCPレシーバーは、受信アプリケーションが新しいデータを消費するため、提供されたウィンドウを更新する以外に、着信セグメントごとに複数のACKを生成してはなりません[Page 42、POS81] [CLA82]。"
    },
    {
      "indent": 0,
      "text": "4.3 Loss Recovery Mechanisms",
      "section_title": true,
      "ja": "4.3 損失回復メカニズム"
    },
    {
      "indent": 3,
      "text": "A number of loss recovery algorithms that augment fast retransmit and fast recovery have been suggested by TCP researchers. While some of these algorithms are based on the TCP selective acknowledgment (SACK) option [MMFR96], such as [FF96,MM96a,MM96b], others do not require SACKs [Hoe96,FF96,FH98]. The non-SACK algorithms use \"partial acknowledgments\" (ACKs which cover new data, but not all the data outstanding when loss was detected) to trigger retransmissions. While this document does not standardize any of the specific algorithms that may improve fast retransmit/fast recovery, these enhanced algorithms are implicitly allowed, as long as they follow the general principles of the basic four algorithms outlined above.",
      "ja": "TCP研究者は、急速な再送信と迅速な回復を強化する多くの損失回復アルゴリズムが提案されています。これらのアルゴリズムの一部は、[FF96、MM96A、MM96B]などのTCP選択的確認（SACK）オプション[MMFR96]に基づいていますが、他のものは袋[Hoe96、FF96、FH98]を必要としません。非サックアルゴリズムは、「部分的な承認」（新しいデータをカバーするACKを使用しますが、損失が検出されたときにすべてのデータを発行するわけではありません）を使用して、再送信をトリガーします。このドキュメントは、高速再送信/高速回復を改善する可能性のある特定のアルゴリズムのいずれも標準化されていませんが、これらの強化されたアルゴリズムは、上記の基本的な4つのアルゴリズムの一般原則に従う限り、暗黙的に許可されています。"
    },
    {
      "indent": 3,
      "text": "Therefore, when the first loss in a window of data is detected, ssthresh MUST be set to no more than the value given by equation (3). Second, until all lost segments in the window of data in question are repaired, the number of segments transmitted in each RTT MUST be no more than half the number of outstanding segments when the loss was detected. Finally, after all loss in the given window of segments has been successfully retransmitted, cwnd MUST be set to no more than ssthresh and congestion avoidance MUST be used to further increase cwnd. Loss in two successive windows of data, or the loss of a retransmission, should be taken as two indications of congestion and, therefore, cwnd (and ssthresh) MUST be lowered twice in this case.",
      "ja": "したがって、データのウィンドウで最初の損失が検出された場合、ssthreshは式（3）で与えられる値にすぎないように設定する必要があります。第二に、問題のデータの窓にあるすべての失われたセグメントが修復されるまで、各RTTに送信されるセグメントの数は、損失が検出されたときに発行済みセグメントの半分以下でなければなりません。最後に、特定のセグメントのウィンドウでのすべての損失が正常に再送信された後、CWNDはCWNDをさらに増加させるためにSSTHRESHを使用して使用する必要があります。データの2つの連続した窓の損失、または再送信の損失は、この場合、CWND（およびSSthresh）を2回下げる必要があります。"
    },
    {
      "indent": 3,
      "text": "The algorithms outlined in [Hoe96,FF96,MM96a,MM6b] follow the principles of the basic four congestion control algorithms outlined in this document.",
      "ja": "[hoe96、ff96、mm96a、mm6b]で概説されているアルゴリズムは、このドキュメントで概説されている基本的な4つの混雑制御アルゴリズムの原理に従います。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This document requires a TCP to diminish its sending rate in the presence of retransmission timeouts and the arrival of duplicate acknowledgments. An attacker can therefore impair the performance of a TCP connection by either causing data packets or their acknowledgments to be lost, or by forging excessive duplicate acknowledgments. Causing two congestion control events back-to-back will often cut ssthresh to its minimum value of 2*SMSS, causing the connection to immediately enter the slower-performing congestion avoidance phase.",
      "ja": "このドキュメントでは、TCPが再送信のタイムアウトの存在下でその送信率を低下させ、重複謝辞の到着を必要とします。したがって、攻撃者は、データパケットまたはその謝辞を失うか、過度の重複謝辞を偽造することにより、TCP接続のパフォーマンスを損なう可能性があります。2つの混雑制御イベントを連続させると、SSthreshが2*SMSSの最小値に削減されることが多く、接続がすぐにパフォーマンスの低い混雑回避フェーズにすぐに入ります。"
    },
    {
      "indent": 3,
      "text": "The Internet to a considerable degree relies on the correct implementation of these algorithms in order to preserve network stability and avoid congestion collapse. An attacker could cause TCP endpoints to respond more aggressively in the face of congestion by forging excessive duplicate acknowledgments or excessive acknowledgments for new data. Conceivably, such an attack could drive a portion of the network into congestion collapse.",
      "ja": "インターネットは、ネットワークの安定性を維持し、渋滞の崩壊を避けるために、これらのアルゴリズムの正しい実装にかなり依存しています。攻撃者は、TCPエンドポイントが、過度の重複謝辞または新しいデータの過度の謝辞を築くことにより、混雑に直面してより積極的に応答する可能性があります。おそらく、そのような攻撃はネットワークの一部を渋滞の崩壊に駆り立てる可能性があります。"
    },
    {
      "indent": 0,
      "text": "6. Changes Relative to RFC 2001",
      "section_title": true,
      "ja": "6. RFC 2001に関連する変更"
    },
    {
      "indent": 3,
      "text": "This document has been extensively rewritten editorially and it is not feasible to itemize the list of changes between the two documents. The intention of this document is not to change any of the recommendations given in RFC 2001, but to further clarify cases that were not discussed in detail in 2001. Specifically, this document suggests what TCP connections should do after a relatively long idle period, as well as specifying and clarifying some of the issues pertaining to TCP ACK generation. Finally, the allowable upper bound for the initial congestion window has also been raised from one to two segments.",
      "ja": "このドキュメントは編集上広範囲に書き直されており、2つのドキュメント間の変更のリストを項目化することは不可能です。このドキュメントの意図は、RFC 2001に記載されている推奨事項を変更することではなく、2001年に詳細に説明されていないケースをさらに明確にすることです。具体的には、このドキュメントは、比較的長いアイドル期間の後にTCP接続がすべきことを示唆しています。同様に、TCP ACK生成に関連する問題の一部を指定および明確にします。最後に、最初の輻輳ウィンドウの許容上の上限も1つから2つのセグメントから上昇しました。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The four algorithms that are described were developed by Van Jacobson.",
      "ja": "説明されている4つのアルゴリズムは、Van Jacobsonによって開発されました。"
    },
    {
      "indent": 3,
      "text": "Some of the text from this document is taken from \"TCP/IP Illustrated, Volume 1: The Protocols\" by W. Richard Stevens (Addison-Wesley, 1994) and \"TCP/IP Illustrated, Volume 2: The Implementation\" by Gary R. Wright and W. Richard Stevens (Addison-Wesley, 1995). This material is used with the permission of Addison-Wesley.",
      "ja": "このドキュメントのテキストの一部は、W。RichardStevens（Addison-Wesley、1994）および「TCP/IP Illustrated、Volume 2：The Enformation」による「TCP/IP Illustrated、Volume 1：The Protocols」からGary Rに掲載されています。。ライトとW.リチャード・スティーブンス（アディソン・ウェスリー、1995）。この素材は、Addison-Wesleyの許可を得て使用されます。"
    },
    {
      "indent": 3,
      "text": "Neal Cardwell, Sally Floyd, Craig Partridge and Joe Touch contributed a number of helpful suggestions.",
      "ja": "Neal Cardwell、Sally Floyd、Craig Partridge、Joe Touchは、多くの有益な提案に貢献しました。"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "参考文献"
    },
    {
      "indent": 3,
      "text": "[AFP98] Allman, M., Floyd, S. and C. Partridge, \"Increasing TCP's Initial Window Size, RFC 2414, September 1998.",
      "ja": "[AFP98] Allman、M.、Floyd、S。、およびC. Partridge、「TCPの初期ウィンドウサイズの増加、RFC 2414、1998年9月。"
    },
    {
      "indent": 3,
      "text": "[Bra89] Braden, R., \"Requirements for Internet Hosts -- Communication Layers\", STD 3, RFC 1122, October 1989.",
      "ja": "[BRA89] Braden、R。、「インターネットホストの要件 - 通信層」、STD 3、RFC 1122、1989年10月。"
    },
    {
      "indent": 3,
      "text": "[Bra97] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[Bra97] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[Cla82] Clark, D., \"Window and Acknowledgment Strategy in TCP\", RFC 813, July 1982.",
      "ja": "[CLA82] Clark、D。、「TCPのウィンドウと承認戦略」、RFC 813、1982年7月。"
    },
    {
      "indent": 3,
      "text": "[FF96] Fall, K. and S. Floyd, \"Simulation-based Comparisons of Tahoe, Reno and SACK TCP\", Computer Communication Review, July 1996. ftp://ftp.ee.lbl.gov/papers/sacks.ps.Z.",
      "ja": "[FF96] Fall、K。およびS. Floyd、「Tahoe、RenoおよびSack TCPのシミュレーションベースの比較」、コンピューターコミュニケーションレビュー、1996年7月。ftp：//ftp.ee.lbl.gov/papers/sacks.ps.Z。"
    },
    {
      "indent": 3,
      "text": "[FH98] Floyd, S. and T. Henderson, \"The NewReno Modification to TCP's Fast Recovery Algorithm\", RFC 2582, April 1999.",
      "ja": "[FH98] Floyd、S。およびT. Henderson、「TCPの高速回復アルゴリズムへのNewreno修正」、RFC 2582、1999年4月。"
    },
    {
      "indent": 3,
      "text": "[Flo94] Floyd, S., \"TCP and Successive Fast Retransmits. Technical report\", October 1994. ftp://ftp.ee.lbl.gov/papers/fastretrans.ps.",
      "ja": "[Flo94] Floyd、S。、「TCPおよび連続した高速再送信。技術レポート」、1994年10月。ftp：//ftp.ee.lbl.gov/papers/fastretrans.ps。"
    },
    {
      "indent": 3,
      "text": "[Hoe96] Hoe, J., \"Improving the Start-up Behavior of a Congestion Control Scheme for TCP\", In ACM SIGCOMM, August 1996.",
      "ja": "[Hoe96] Hoe、J。、「TCPの混雑制御スキームのスタートアップ動作の改善」、ACM Sigcomm、1996年8月。"
    },
    {
      "indent": 3,
      "text": "[HTH98] Hughes, A., Touch, J. and J. Heidemann, \"Issues in TCP Slow-Start Restart After Idle\", Work in Progress.",
      "ja": "[HTH98] Hughes、A.、Touch、J。およびJ. Heidemann、「アイドル後のTCPスロースタート再起動の問題」、進行中の作業。"
    },
    {
      "indent": 3,
      "text": "[Jac88] Jacobson, V., \"Congestion Avoidance and Control\", Computer Communication Review, vol. 18, no. 4, pp. 314-329, Aug. 1988. ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.",
      "ja": "[Jac88] Jacobson、V。、「混雑の回避と管理」、コンピューターコミュニケーションレビュー、Vol。18、いいえ。4、pp。314-329、1988年8月。ftp：//ftp.ee.lbl.gov/papers/congavoid.ps.z。"
    },
    {
      "indent": 3,
      "text": "[Jac90] Jacobson, V., \"Modified TCP Congestion Avoidance Algorithm\", end2end-interest mailing list, April 30, 1990. ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail.",
      "ja": "[JAC90] Jacobson、V。、「修正されたTCP混雑回避アルゴリズム」、End2end-Interestメーリングリスト、1990年4月30日。ftp：//ftp.isi.edu/end2end/end2end-interest-1990.mail。"
    },
    {
      "indent": 3,
      "text": "[MD90] Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191, November 1990.",
      "ja": "[MD90] Mogul、J。およびS. Deering、「Path MTU Discovery」、RFC 1191、1990年11月。"
    },
    {
      "indent": 3,
      "text": "[MM96a] Mathis, M. and J. Mahdavi, \"Forward Acknowledgment: Refining TCP Congestion Control\", Proceedings of SIGCOMM'96, August, 1996, Stanford, CA. Available fromhttp://www.psc.edu/networking/papers/papers.html",
      "ja": "[MM96A] Mathis、M。およびJ. Mahdavi、「フォワード認識：TCP混雑制御の改良」、Sigcomm'96の議事録、1996年8月、カリフォルニア州スタンフォードhttp：//www.psc.edu/networking/papers/papers.htmlから入手可能"
    },
    {
      "indent": 3,
      "text": "[MM96b] Mathis, M. and J. Mahdavi, \"TCP Rate-Halving with Bounding Parameters\", Technical report. Available from http://www.psc.edu/networking/papers/FACKnotes/current.",
      "ja": "[MM96B] Mathis、M。およびJ. Mahdavi、「境界パラメーターを備えたTCPレートハービング」、テクニカルレポート。http://www.psc.edu/networking/papers/facknotes/currentから入手できます。"
    },
    {
      "indent": 3,
      "text": "[MMFR96] Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP Selective Acknowledgement Options\", RFC 2018, October 1996.",
      "ja": "[MMFR96] Mathis、M.、Mahdavi、J.、Floyd、S。、およびA. Romanow、「TCP選択的承認オプション」、RFC 2018、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[PAD+98] Paxson, V., Allman, M., Dawson, S., Fenner, W., Griner, J., Heavens, I., Lahey, K., Semke, J. and B. Volz, \"Known TCP Implementation Problems\", RFC 2525, March 1999.",
      "ja": "[Pad 98] Paxson、V.、Allman、M.、Dawson、S.、Fenner、W.、Griner、J.、Heavens、I.、Lahey、K.、Semke、J. and B. Volz、 \"TCP実装の問題」、RFC 2525、1999年3月。"
    },
    {
      "indent": 3,
      "text": "[Pax97] Paxson, V., \"End-to-End Internet Packet Dynamics\", Proceedings of SIGCOMM '97, Cannes, France, Sep. 1997.",
      "ja": "[Pax97] Paxson、V。、「エンドツーエンドのインターネットパケットダイナミクス」、Sigcomm '97の議事録、カンヌ、フランス、1997年9月。"
    },
    {
      "indent": 3,
      "text": "[Pos81] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, September 1981.",
      "ja": "[POS81] Postel、J。、「トランスミッションコントロールプロトコル」、STD 7、RFC 793、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[Ste94] Stevens, W., \"TCP/IP Illustrated, Volume 1: The Protocols\", Addison-Wesley, 1994.",
      "ja": "[Ste94] Stevens、W。、「TCP/IP Illustrated、Volume 1：The Protocols」、Addison-Wesley、1994。"
    },
    {
      "indent": 3,
      "text": "[Ste97] Stevens, W., \"TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms\", RFC 2001, January 1997.",
      "ja": "[Ste97] Stevens、W。、「TCPスロースタート、輻輳回避、高速再送信、および高速回復アルゴリズム」、RFC 2001、1997年1月。"
    },
    {
      "indent": 3,
      "text": "[WS95] Wright, G. and W. Stevens, \"TCP/IP Illustrated, Volume 2: The Implementation\", Addison-Wesley, 1995.",
      "ja": "[WS95] Wright、G。and W. Stevens、「TCP/IP Illustrated、Volume 2：The Information」、Addison-Wesley、1995。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Mark Allman NASA Glenn Research Center/Sterling Software Lewis Field 21000 Brookpark Rd. MS 54-2 Cleveland, OH 44135 216-433-6586",
      "ja": "マークオールマンナサグレンリサーチセンター/スターリングソフトウェアルイスフィールド21000 Brookpark Rd。MS 54-2クリーブランド、OH 44135 216-433-6586"
    },
    {
      "indent": 3,
      "text": "EMail: mallman@grc.nasa.gov\nhttp://roland.grc.nasa.gov/~mallman",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Vern Paxson ACIRI / ICSI 1947 Center Street Suite 600 Berkeley, CA 94704-1198",
      "ja": "Vern Paxson Aciri / Icsi 1947 Center Street Suite 600 Berkeley、CA 94704-1198"
    },
    {
      "indent": 3,
      "text": "Phone: +1 510/642-4274 x302\nEMail: vern@aciri.org",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "W. Richard Stevens 1202 E. Paseo del Zorro Tucson, AZ 85718 520-297-9416",
      "ja": "W.リチャードスティーブンス1202 E. Paseo Del Zorro Tucson、AZ 85718 520-297-9416"
    },
    {
      "indent": 3,
      "text": "EMail: rstevens@kohala.com\nhttp://www.kohala.com/~rstevens",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（1999）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があります。また、それについてコメントまたは説明する派生作品、またはその実装を支援することは、いかなる種類の制限なしに、準備、コピー、公開、および部分的に配布される場合があります。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会またはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書と本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    }
  ]
}