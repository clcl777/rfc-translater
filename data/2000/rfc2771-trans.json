{
  "title": {
    "text": "RFC 2771 - An Abstract API for Multicast Address Allocation",
    "ja": "RFC 2771 - マルチキャストアドレス割り当ての抽象API"
  },
  "number": 2771,
  "created_at": "2024-01-30 11:17:35.474453+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                     R. Finlayson\nRequest for Comments: 2771                                    LIVE.COM\nCategory: Informational                                  February 2000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "An Abstract API for Multicast Address Allocation",
      "ja": "マルチキャストアドレス割り当ての抽象API"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモは、インターネットコミュニティに情報を提供します。いかなる種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2000）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes the \"abstract service interface\" for the dynamic multicast address allocation service, as seen by applications. While it does not describe a concrete API (i.e., for a specific programming language), it describes - in abstract terms - the semantics of this service, including the guarantees that it makes to applications.",
      "ja": "このドキュメントでは、アプリケーションで見られるように、動的マルチキャストアドレス割り当てサービスの「抽象サービスインターフェイス」について説明します。具体的なAPI（つまり、特定のプログラミング言語の場合）を説明していませんが、抽象的な用語では、アプリケーションを保証する保証を含む、このサービスのセマンティクスを説明しています。"
    },
    {
      "indent": 3,
      "text": "Additional documents (not necessarily products of the IETF) would describe concrete APIs for this service.",
      "ja": "追加のドキュメント（必ずしもIETFの製品ではない）では、このサービスのコンクリートAPIを説明します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Applications are the customers of a multicast address allocation service, so a definition of this service should include not only the inter-node network protocols that are used to implement it, but also the 'protocol' that applications use to access the service. While APIs (\"application programming interfaces\") for specific programming languages (or operating systems) are outside the domain of the IETF, it is appropriate for us to define - in abstract terms - the semantic interface that this service presents to applications. Specific APIs would then be based upon this abstract service interface.",
      "ja": "アプリケーションはマルチキャストアドレス割り当てサービスの顧客であるため、このサービスの定義には、それを実装するために使用されるノード間ネットワークプロトコルだけでなく、アプリケーションがサービスへのアクセスに使用する「プロトコル」も含める必要があります。特定のプログラミング言語（またはオペレーティングシステム）のAPI（「アプリケーションプログラミングインターフェイス」）はIETFのドメインの外側にありますが、このサービスがアプリケーションに提示するセマンティックインターフェイスを定義することが適切です。特定のAPIは、この抽象サービスインターフェイスに基づいています。"
    },
    {
      "indent": 3,
      "text": "Note that it is possible to implement the multicast address allocation service in at least two different ways. The first (and perhaps most common) way is for end nodes to allocate addresses by communicating with a separate \"Address Allocation Server\" node, using the \"Host to Address Allocation Server\" network protocol (MADCAP) [1][7]. Alternatively, an \"Address Allocation Server\" implementation might be co-located (along with one or more applications) on an end node, in which case some other, internal, mechanism might be used to access the server. In either case, however, the abstract service interface (and, presumably, any specific APIs) would remain the same.",
      "ja": "少なくとも2つの異なる方法でマルチキャストアドレス割り当てサービスを実装できることに注意してください。最初の（そしておそらく最も一般的な）方法は、「ホスト」ネットワークプロトコル（MADCAP）[1] [7]を使用して、個別の「アドレス割り当てサーバー」ノードと通信することにより、エンドノードを割り当てることです。あるいは、「アドレス割り当てサーバー」の実装は、エンドノードで（1つ以上のアプリケーションとともに）共同住宅化される場合があります。ただし、どちらの場合でも、抽象サービスインターフェイス（およびおそらく特定のAPI）は同じままです。"
    },
    {
      "indent": 3,
      "text": "The remainder of this document describes the abstract interface.",
      "ja": "このドキュメントの残りの部分は、抽象インターフェイスについて説明しています。"
    },
    {
      "indent": 3,
      "text": "Note that this interface is intended only for the allocation of dynamic multicast addresses, as used by the traditional multicast service model [2]. Future multicast service models might allocate or assign multicast addresses in other ways, but this is outside the scope of this document.",
      "ja": "このインターフェイスは、従来のマルチキャストサービスモデル[2]で使用される動的マルチキャストアドレスの割り当てのみを目的としていることに注意してください。将来のマルチキャストサービスモデルは、他の方法でマルチキャストアドレスを割り当てるか割り当てますが、これはこのドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "2. Abstract Data Types",
      "section_title": true,
      "ja": "2. 抽象データ型"
    },
    {
      "indent": 3,
      "text": "The interface described below uses the following abstract data types:",
      "ja": "以下に説明するインターフェイスは、次の抽象データ型を使用しています。"
    },
    {
      "indent": 3,
      "text": "- AddressFamily: e.g., IPv4 or IPv6",
      "ja": "- addressfamily：たとえば、IPv4またはIPv6"
    },
    {
      "indent": 3,
      "text": "- MulticastAddress: An actual multicast address (i.e., that could subsequently be used as the destination of a datagram)",
      "ja": "- MultiCastAddress：実際のマルチキャストアドレス（つまり、それはその後、データグラムの宛先として使用できます）"
    },
    {
      "indent": 3,
      "text": "- MulticastAddressSet: A set of \"MulticastAddress\"es",
      "ja": "- MultiCastAddressset：「MulticaStAddress」esのセット"
    },
    {
      "indent": 3,
      "text": "- LanguageTag: The code for a (human) language, as defined in [4]",
      "ja": "- LanguageTag：[4]で定義されている（人間）言語のコード"
    },
    {
      "indent": 3,
      "text": "- Scope: An \"administrative scope\" [3] from which multicast addresses are to be allocated. Each scope is a \"MulticastAddressSet\", with an associated set of (character-string) names - indexed by \"LanguageTag\". (Each language tag has at most one corresponding name, per scope.) For each scope, a (language tag, name) pair may be defined to be the 'default' name for this scope. (See the section \"Querying the name of a scope\" below.)",
      "ja": "- 範囲：マルチキャストアドレスを割り当てる「管理範囲」[3]。各スコープは「MulticaStAddressSet」であり、「Languagetag」でインデックス付けされた（文字弦）名前の関連付けセットがあります。（各言語タグには、範囲ごとに最大1つの対応する名前があります。）各スコープで、（言語タグ、名前）ペアは、このスコープの「デフォルト」名と定義される場合があります。（以下のスコープの名前のクエリ」セクションを参照してください。）"
    },
    {
      "indent": 13,
      "text": "(An implementation of this abstract data type might also include other information, such as a default TTL for the scope.)",
      "ja": "（この抽象データ型の実装には、スコープのデフォルトのTTLなど、他の情報も含まれる場合があります。）"
    },
    {
      "indent": 3,
      "text": "- Time: An (absolute) event time. This is used for specifying the \"lifetime\" of multicast addresses: the period of time during which allocated multicast addresses are guaranteed to be available. (It is also used to specify the desired start time for an \"advance allocation\".) Note that a concrete API might prefer to specify some of these times as relative times (i.e., relative to the current time-of-day), rather than absolute time. (Relative times have the advantage of not requiring clock synchronization.)",
      "ja": "- 時間：（絶対的な）イベント時間。これは、マルチキャストアドレスの「寿命」を指定するために使用されます。その期間の割り当てられたマルチキャストアドレスが利用可能になることが保証されています。（「アドバンス割り当て」の目的の開始時間を指定するためにも使用されます。）コンクリートAPIは、これらの時間の一部を相対的な時間（つまり、現在の時間と比較して）として指定することを好むかもしれません。絶対時間よりも。（相対的な時間には、時計の同期を必要としないという利点があります。）"
    },
    {
      "indent": 3,
      "text": "- Lease: A compound data type that describes the result of a (successful) multicast address allocation. It consists of:",
      "ja": "- リース：（成功した）マルチキャストアドレスの割り当ての結果を説明する複合データ型。それは次のとおりです。"
    },
    {
      "indent": 13,
      "text": "- [MulticastAddressSet] The set of addresses that were allocated;",
      "ja": "- [MultiCastAddressset]割り当てられたアドレスのセット。"
    },
    {
      "indent": 13,
      "text": "- [AddressFamily] The address family of these addresses",
      "ja": "- [アドレスファミリー]これらのアドレスの住所ファミリ"
    },
    {
      "indent": 13,
      "text": "- [Time] The lifetime of these addresses (the same for each address)",
      "ja": "- [時間]これらのアドレスの寿命（各アドレスについて同じ）"
    },
    {
      "indent": 13,
      "text": "- [Time] The \"start time\" of the allocation. (See the discussion of \"advance allocation\" below.) (A concrete API would likely also include a MADCAP \"Lease Identifier\" [1].)",
      "ja": "- [時間]割り当ての「開始時間」。（以下の「事前配分」の説明を参照してください。）（具体的なAPIには、MadCap「リース識別子」も含まれる可能性があります[1]。）"
    },
    {
      "indent": 3,
      "text": "- NestingRelationship: A binary data type that describes whether or not two scopes nest. Two scopes nest if traffic sent sent to a multicast group within one scope could be seen by all hosts present within the other scope were they to join the multicast group within the first scope. This value would be \"False\" for overlapping scopes where only some (or none) of the hosts within the second scope could see traffic sent to an address due to the presence of an administratively scoped boundary. In cases where the first and second scopes are topologically identical this value would be \"True.\"",
      "ja": "- NestingRelationship：2つのスコープが巣を作るかどうかを説明するバイナリデータ型。1つのスコープ内のマルチキャストグループに送信されたトラフィックが、最初の範囲内でマルチキャストグループに参加する場合、他のスコープ内に存在するすべてのホストがトラフィックを送信した場合、2つのスコープネストが巣を作ることができます。この値は、2番目のスコープ内のホストのうちの一部（またはなし）のみが、管理上範囲の境界の存在により住所に送信されるトラフィックを見ることができる、重複するスコープの「fals」になります。最初のスコープと2番目のスコープがトポロジーに同一である場合、この値は「真」になります。"
    },
    {
      "indent": 3,
      "text": "- Status: A result code.",
      "ja": "- ステータス：結果コード。"
    },
    {
      "indent": 0,
      "text": "3. The Abstract Interface",
      "section_title": true,
      "ja": "3. 抽象インターフェイス"
    },
    {
      "indent": 0,
      "text": "3.1 Allocating multicast addresses:",
      "ja": "3.1 マルチキャストアドレスの割り当て："
    },
    {
      "indent": 3,
      "text": "alloc_multicast_addr(in AddressFamily family, in Scope scope, in Integer minDesiredAddresses, in Integer maxDesiredAddresses, in Time minDesiredStartTime, in Time maxDesiredStartTime, in Time minDesiredLifetime, in Time maxDesiredLifetime, out Lease multicastAddressSetLease, out Status status)",
      "ja": "alloc_multicast_addr（アドレスファミリーファミリー、スコープスコープ、整数のマインドサイドドレス、整数の最大装備、時間内に、時間内に、時間内に、時間内に、マルチカッスドレスセットを測定します。"
    },
    {
      "indent": 3,
      "text": "This operation attempts to allocate a set of multicast addresses (the size of this set is in the range [minDesiredAddresses, maxDesiredAddresses]) within the given address family and scope, and within a given range of desired lifetimes. (\"minDesiredStartTime\" and \"maxDesiredStartTime\" are used to specify \"advance allocation\"; this is described in more detail below.)",
      "ja": "この操作は、一連のマルチキャストアドレスを割り当てようとします（このセットのサイズは、範囲[MindesiredDdresses、MaxDesiredDresses]）、特定のアドレスファミリとスコープ内、および所定の寿命の範囲内で範囲にあります）。（「MindesiredStartTime」および「MaxDesiredStartTime」は、「事前配分」を指定するために使用されます。これについては以下で詳しく説明しています。）"
    },
    {
      "indent": 3,
      "text": "If the address allocation succeeds, the result is returned in \"multicastAddressSetLease\" (with \"status\" = OK).",
      "ja": "アドレスの割り当てが成功した場合、結果は「MulticastAddressSetLease」（「ステータス」= OK）で返されます。"
    },
    {
      "indent": 3,
      "text": "During the lifetime of this lease, the allocation service will make a \"best-effort\" attempt to not allocate any of these addresses to others. (However, once the lease's lifetime has expired, any of its addresses can be allocated to others.)",
      "ja": "このリースの存続期間中、割り当てサービスは、これらの住所のいずれも他の住所に割り当てられない「最高の」試みを試みます。（ただし、リースの寿命が切れると、その住所はいずれも他の人に割り当てることができます。）"
    },
    {
      "indent": 3,
      "text": "Multicast addresses are allocated for a limited lifetime. An application may attempt to extend this lifetime, but this operation may fail. Therefore, an application must be prepared for the possibility it will not be able to use the same addresses for as long as it desires. In particular, the application must be prepared to either quit early (because its original multicast address assignments have expired), or, alternatively, to occasionally 'renumber' its multicast addresses (in some application or higher-level-protocol dependent way), by making a new allocation. However, if an application needs to consider 'renumbering', it will always know this in advance, at the time it acquired its current address(es) - by checking the lifetime in the returned lease. An application will never need to be notified asynchronously of the need to 'renumber'.",
      "ja": "マルチキャストアドレスは、限られた寿命にわたって割り当てられます。アプリケーションはこの寿命を延長しようとするかもしれませんが、この操作が失敗する可能性があります。したがって、アプリケーションは、望む限り同じアドレスを使用できない可能性について準備する必要があります。特に、アプリケーションは、早期に終了するために準備する必要があります（元のマルチキャストアドレスの割り当てが期限切れになったため）、あるいはマルチキャストアドレス（一部のアプリケーションまたは高レベルのプロトコルに依存する方法で）を「変更」することによって、新しい割り当てを行う。ただし、アプリケーションが「変更」を検討する必要がある場合、返されたリースで寿命をチェックすることにより、現在の住所（ES）を取得した時点で、これを事前に常に知っています。アプリケーションは、「名前を変更する」必要性を非同期に通知する必要はありません。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 9,
      "text": "- bad address family - bad scope - bad desired number of addresses (e.g., max < min) - bad desired lifetimes (e.g., max < min) - errors with the two \"start time\" parameters (see \"Advance allocation\" below) - no addresses can be allocated (for the requested parameters)",
      "ja": "- 悪いアドレスファミリ - 悪い範囲 - 悪いアドレスの数（例：最大<分） - 悪い希望の寿命（例：最大<分） -  2つの「開始時刻」パラメーター（以下の「事前割り当て」を参照）のエラー - いいえ - いいえアドレスを割り当てることができます（要求されたパラメーター用）"
    },
    {
      "indent": 3,
      "text": "An allocation attempt can also fail with a result \"status\" code of TRY_LATER, indicating that the requested allocation cannot be made at this time, but that it might succeed if the caller retries the attempt at some future time. (This future time is returned in the \"start time\" field of the",
      "ja": "また、Try_Laterの結果「ステータス」コードで割り当ての試行が失敗する可能性があります。これは、この時点で要求された割り当てが行われないことを示していますが、発信者が将来の試みを取得した場合に成功する可能性があります。（この将来の時間は、の「開始時間」フィールドで返されます"
    },
    {
      "indent": 3,
      "text": "\"multicastAddressSetLease\"; the other parts of this lease are undefined.)",
      "ja": "「MultiCastAddressSetLease」;このリースの他の部分は未定義です。）"
    },
    {
      "indent": 3,
      "text": "Note that a concrete (i.e., programming language-specific) API for multicast address allocation will probably include additional, specialized variants of this general allocation operation. For instance, it may include separate operations for:",
      "ja": "マルチキャストアドレスの割り当て用のコンクリート（つまり、言語固有のプログラミング言語固有の）APIには、おそらくこの一般的な割り当て操作の追加の特殊なバリアントが含まれることに注意してください。たとえば、以下の個別の操作が含まれる場合があります。"
    },
    {
      "indent": 11,
      "text": "- allocating only a single address (i.e., minDesiredAddresses = maxDesiredAddresses = 1); - (attempting to) allocate an address with a single, fixed lifetime (i.e., minDesiredLifetime = maxDesiredLifetime); - (attempting to) allocate an address for immediate use (i.e., minDesiredStartTime = maxDesiredStartTime = 'now')",
      "ja": "- 単一のアドレスのみを割り当てる（つまり、MindEsiredAddresses = maxdesiredDdresses = 1）; - （試行）単一の固定寿命（つまり、MindEsiredLifetime = maxdesiredLifetime）でアドレスを割り当てる）; - （試み）即時使用のためにアドレスを割り当てる（つまり、MindesiredStartTime = maxdesiredStartTime = 'Now'）"
    },
    {
      "indent": 0,
      "text": "3.2 Changing multicast addresses' lifetime:",
      "ja": "3.2 マルチキャストアドレスのライフタイムの変更："
    },
    {
      "indent": 4,
      "text": "change_multicast_addr_lifetime(in Lease multicastAddressSetLease, in Time minDesiredLifetime, in Time maxDesiredLifetime, out Time lifetime)",
      "ja": "Change_multicast_addr_lifetime（リース中のマルチカスタドレスセットレアーゼ、時間内に、時間内に最大lifeTime、out time lifetime）"
    },
    {
      "indent": 3,
      "text": "This operation attempts to change the lifetime of previously allocated multicast addresses. Unless an error occurs, it returns the new lifetime (which might remain unchanged).",
      "ja": "この操作は、以前に割り当てられたマルチキャストアドレスの寿命を変更しようとします。エラーが発生しない限り、新しい生涯を返します（変化しない可能性があります）。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 11,
      "text": "- bad address family - bad durations (e.g., max < min)",
      "ja": "- 悪い住所ファミリー - 悪い期間（例：最大<min）"
    },
    {
      "indent": 11,
      "text": "- the addresses' lifetime could not be changed (and the existing lifetime was not in the requested range [minDesiredLifetime,maxDesiredLifetime]) - the addresses were not ones that we had allocated (see section 5.9) - or they have already expired",
      "ja": "- アドレスの寿命を変更することはできませんでした（そして既存の寿命は要求された範囲にありませんでした[MindesiredLifetime、MaxdesiredLifetime]） - アドレスは私たちが割り当てたものではありませんでした（セクション5.9を参照）、またはすでに期限切れになっています"
    },
    {
      "indent": 0,
      "text": "3.3 Deallocating multicast addresses:",
      "ja": "3.3 マルチキャストアドレスの取引："
    },
    {
      "indent": 3,
      "text": "deallocate_multicast_addr(in Lease multicastAddressSetLease) This operation attempts to deallocate previously allocated multicast addresses.",
      "ja": "deallocate_multicast_addr（リースMulticastAddressSetLease）この操作は、以前に割り当てられたマルチキャストアドレスを扱います。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 11,
      "text": "- bad address family - the addresses were not ones that we had allocated (or they have already expired)",
      "ja": "- 悪い住所ファミリ - アドレスは、私たちが割り当てたものではありませんでした（またはすでに期限切れになっています）"
    },
    {
      "indent": 0,
      "text": "3.4 Querying the set of usable multicast address scopes:",
      "ja": "3.4 使用可能なマルチキャストアドレススコープのセットの照会："
    },
    {
      "indent": 4,
      "text": "get_multicast_addr_scopes(in AddressFamily family, out \"set of\" Scope)",
      "ja": "get_multicast_addr_scopes（addressfamily family、out \"set of\" scope）"
    },
    {
      "indent": 3,
      "text": "This operation returns the set of administrative multicast address scopes that are defined for this node.",
      "ja": "この操作は、このノードで定義されている管理マルチキャストアドレススコープのセットを返します。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 11,
      "text": "- bad address family",
      "ja": "- 悪いアドレスファミリー"
    },
    {
      "indent": 0,
      "text": "3.5 Querying the name of a scope:",
      "ja": "3.5 スコープの名前のクエリ："
    },
    {
      "indent": 4,
      "text": "get_scope_name(in Scope scope, in LanguageTag language, out String name, out LanguageTag languageForName)",
      "ja": "get_scope_name（スコープスコープ、languageTag言語、文字列名、outlangageTag言語forname）"
    },
    {
      "indent": 3,
      "text": "This operation returns a character-string name for a given scope. If the scope has a name in the specified \"language\", then this name (and language) is returned. Otherwise, the scope's default (language, name) pair is returned.",
      "ja": "この操作は、特定のスコープの文字弦名を返します。スコープに指定された「言語」に名前がある場合、この名前（および言語）が返されます。それ以外の場合、スコープのデフォルト（言語、名前）ペアが返されます。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 11,
      "text": "- bad scope.",
      "ja": "- 悪い範囲。"
    },
    {
      "indent": 0,
      "text": "3.6 Querying the nesting state of known usable multicast address scopes:",
      "ja": "3.6 既知の使用可能なマルチキャストアドレススコープのネスト状態の照会："
    },
    {
      "indent": 4,
      "text": "get_scope_nesting_state(in \"set of\" Scope, out \"matrix of\" NestingRelationship)",
      "ja": "get_scope_nesting_state（ \"scope、out\" \"nestingrationshipのマトリックスのセット）"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 7,
      "text": "- bad scope. - nesting state undetermined at this time.",
      "ja": "- 悪い範囲。 - 現時点では未定のネスト状態。"
    },
    {
      "indent": 3,
      "text": "This operation would return a matrix that shows the current nesting relationships between the supplied set of scopes which would have previously been supplied via the get_multicast_addr_scopes(...) function.",
      "ja": "この操作は、get_multicast_addr_scopes（...）関数を介して以前に提供されていたであろう一連のスコープ間の現在のネスティング関係を示すマトリックスを返します。"
    },
    {
      "indent": 0,
      "text": "3.7 Querying the set of scopes that a given scope is known to nest inside:",
      "ja": "3.7 特定のスコープが内部にネストされることが知られているスコープのセットを照会します。"
    },
    {
      "indent": 4,
      "text": "get_larger_scopes(in Scope, out \"set of\" Scope)",
      "ja": "get_larger_scopes（スコープでは、 \"set of\" scope）"
    },
    {
      "indent": 3,
      "text": "This operation returns the set of administrative multicast address scopes that are known to encompass the supplied Scope.",
      "ja": "この操作は、供給された範囲を含むことが知られている管理マルチキャストアドレススコープのセットを返します。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 7,
      "text": "- bad scope. - nesting state undetermined at this time.",
      "ja": "- 悪い範囲。 - 現時点では未定のネスト状態。"
    },
    {
      "indent": 0,
      "text": "3.8 Querying the set of scopes that are known to nest inside a given scope:",
      "ja": "3.8 特定のスコープ内にネストすることが知られている一連のスコープを照会します。"
    },
    {
      "indent": 4,
      "text": "get_smaller_scopes(in Scope, out \"set of\" Scope)",
      "ja": "get_smaller_scopes（スコープでは、 \"scope of\" scope）"
    },
    {
      "indent": 3,
      "text": "This operation returns the set of administrative multicast address scopes that are known to nest inside the supplied Scope (NB this would include those scopes that are topologically identical to the supplied scope).",
      "ja": "この操作は、供給されたスコープ内にネストすることが知られている管理マルチキャストアドレススコープのセットを返します（これには、供給されたスコープとトポロジカルに同一のスコープが含まれます）。"
    },
    {
      "indent": 3,
      "text": "Possible errors:",
      "ja": "可能なエラー："
    },
    {
      "indent": 7,
      "text": "- bad scope. - nesting state undetermined at this time.",
      "ja": "- 悪い範囲。 - 現時点では未定のネスト状態。"
    },
    {
      "indent": 0,
      "text": "3.9 Note: The decision as to who is allowed to deallocate (or change the lifetime of) a previously allocated multicast address set lease is implementation-specific, and depends upon the security policy of the host system. Thus it is not specified in this abstract API. One possible starting point, however, is the following:",
      "ja": "3.9 注：以前に割り当てられたマルチキャストアドレスセットリースが実装固有であり、ホストシステムのセキュリティポリシーに依存するかについて、誰が扱いを許可されている（または寿命を変更する）ことを決定します。したがって、この抽象APIでは指定されていません。ただし、可能な出発点の1つは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "A previously allocated multicast address can be deallocated (or have its lifetime queried or changed) by the same \"principal\", and on the same node, as that which originally allocated it. (\"principal\" might, for example, be a \"user\" in the host operating system.)",
      "ja": "以前に割り当てられたマルチキャストアドレスは、同じ「プリンシパル」と同じノードで、元々割り当てられたものと同じノードで扱い（またはその寿命のクエリまたは変更を）扱うことができます。（たとえば、「プリンシパル」は、ホストオペレーティングシステムの「ユーザー」になる可能性があります。）"
    },
    {
      "indent": 0,
      "text": "3.10 Advance allocation",
      "section_title": true,
      "ja": "3.10 事前割り当て"
    },
    {
      "indent": 6,
      "text": "By specifying \"minDesiredStartTime = maxDesiredStartTime = 'now'\", the address allocation operation - \"alloc_multicast_addr\" - described above can be used to request a set of multicast addresses that can be used *immediately* (and until their lifetime expires). During this whole time, the addresses are not available for allocation to others.",
      "ja": "「MindesiredStartTime = maxDesiredStartTime = 'now'」を指定することにより、アドレス割り当て操作 - 「alloc_multicast_addr」 - を使用して、 *すぐに *（および生涯の期限が切れるまで） *使用できるマルチキャストアドレスのセットを要求できます。この間、アドレスは他の人への割り当てには利用できません。"
    },
    {
      "indent": 6,
      "text": "It is also possible - using the \"minDesiredStartTime\" and \"maxDesiredStartTime\" parameters - to allocate multicast addresses *in advance* - i.e., so that they have a future \"start time\" as well as an expiration time. Before the start time, the multicast addresses may be allocated to others.",
      "ja": "また、「MindesiredStartTime」と「MaxDesiredStartTime」パラメーターを使用して、マルチキャストアドレス *を事前に割り当てることも可能です。開始時間の前に、マルチキャストアドレスが他のアドレスに割り当てられる場合があります。"
    },
    {
      "indent": 6,
      "text": "Advance allocation is convenient for allocating addresses for events that begin far in the future - e.g., several weeks or months away. Without advance allocation, it would be necessary to allocate addresses for a long period of time - even when it will not be used. Such a request would not only be a wasteful use of the multicast address space, but it may also be difficult to implement (especially since address allocations are expected to remain valid in spite of topology changes).",
      "ja": "事前の割り当ては、将来的にははるかに始まるイベントのアドレスを割り当てるのに便利です。たとえば、数週間または数ヶ月先です。アドバンスの割り当てがなければ、それが使用されない場合でも、アドレスを長期間配分する必要があります。このようなリクエストは、マルチキャストアドレススペースの無駄な使用であるだけでなく、実装することも困難な場合があります（特に、トポロジの変更にもかかわらず、住所の割り当ては有効であると予想されるため）。"
    },
    {
      "indent": 6,
      "text": "Advance allocation requests can produce the following errors (in addition to those defined earlier):",
      "ja": "アドバンス割り当てリクエストは、次のエラーを生成できます（前述のエラーに加えて）："
    },
    {
      "indent": 6,
      "text": "- bad start time durations (e.g., max < min) - requested start times conflict with requested lifetimes (i.e., min start time > max lifetime)",
      "ja": "- 悪い開始時間（例：max <min） - 要求された寿命との要求された開始時間の競合（つまり、最小開始時間>最大生涯）"
    },
    {
      "indent": 3,
      "text": "The following operation is also defined:",
      "ja": "次の操作も定義されています。"
    },
    {
      "indent": 6,
      "text": "change_multicast_addr_start_time(in Lease multicastAddressSetLease, in Time minDesiredStartTime, in Time maxDesiredStartTime, out Time startTime)",
      "ja": "change_multicast_addr_start_time（lease in lease multicastaddresssetlease、in time mindesired -starttime、time maxdesiredstarttime、out time starttime）"
    },
    {
      "indent": 6,
      "text": "This operation attempts to change the start time of previously allocated multicast addresses. Unless an error occurs, it returns the new start time (which might remain unchanged).",
      "ja": "この操作は、以前に割り当てられたマルチキャストアドレスの開始時間を変更しようとします。エラーが発生しない限り、新しい開始時間を返します（変更されていない場合があります）。"
    },
    {
      "indent": 6,
      "text": "Possible errors: the same as \"change_multicast_addr_lifetime\"",
      "ja": "可能なエラー：「change_multicast_addr_lifetime」と同じ"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "As noted in section 5.9 above, each implementation of this abstract API should define a security policy that specifies when (and by whom) previously allocated multicast addresses can be deallocated (or queried, or have their lifetime changed).",
      "ja": "上記のセクション5.9で述べたように、この抽象APIの各実装は、以前に割り当てられたマルチキャストアドレスを扱い（または照会するか、寿命を変更した）ことをいつ（および誰によって）割り当てたかを指定するセキュリティポリシーを定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "Because multicast addresses are a finite resource, there is a potential for a \"denial of service\" attack by allocating a large number of multicast addresses without deallocating them. Preventing such an attack, however, is not the role of the API, but rather by the underlying MAAS (\"Multicast Address Allocation Server(s)\" [6]).",
      "ja": "マルチキャストアドレスは有限リソースであるため、多くのマルチキャストアドレスを扱うことなく割り当てることにより、「サービスの拒否」攻撃の可能性があります。ただし、このような攻撃を防ぐことは、APIの役割ではなく、基礎となるMAAS（「マルチキャストアドレス割り当てサーバー」[6]）によるものです。"
    },
    {
      "indent": 0,
      "text": "5. Acknowledgements",
      "section_title": true,
      "ja": "5. 謝辞"
    },
    {
      "indent": 3,
      "text": "Many thanks to other participants in the \"MALLOC\" working group - in particular Steve Hanna, Dave Thaler, Roger Kermode, and Pavlin Radoslavov - for their valuable comments.",
      "ja": "「Malloc」ワーキンググループの他の参加者、特にSteve Hanna、Dave Thaler、Roger Kermode、およびPavlin Radoslavovに感謝します。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 3,
      "text": "[1] Hanna, S., Patel, B. and M. Shah, \"Multicast Address Dynamic Client Allocation Protocol (MADCAP)\", RFC 2730, December 1999.",
      "ja": "[1] Hanna、S.、Patel、B。およびM. Shah、「マルチキャストアドレスダイナミッククライアント割り当てプロトコル（MADCAP）」、RFC 2730、1999年12月。"
    },
    {
      "indent": 3,
      "text": "[2] Deering, S., \"Host Extensions for IP Multicasting\", STD 5, RFC 1112, August 1989.",
      "ja": "[2] Deering、S。、「IPマルチキャストのホスト拡張」、STD 5、RFC 1112、1989年8月。"
    },
    {
      "indent": 3,
      "text": "[3] Meyer, D., \"Administratively Scoped IP Multicast\", BCP 23, RFC 2365, July, 1998.",
      "ja": "[3] Meyer、D。、「管理上スコープIPマルチキャスト」、BCP 23、RFC 2365、1998年7月。"
    },
    {
      "indent": 3,
      "text": "[4] Alvestrand, H., \"Tags for the Identification of Languages\", RFC 1766, March 1995.",
      "ja": "[4] Alvestrand、H。、「言語の識別のためのタグ」、RFC 1766、1995年3月。"
    },
    {
      "indent": 3,
      "text": "[5] Handley, M. and V. Jacobson, \"SDP: Session Description Protocol\", RFC 2327, April 1998.",
      "ja": "[5] Handley、M。and V. Jacobson、「SDP：セッション説明プロトコル」、RFC 2327、1998年4月。"
    },
    {
      "indent": 3,
      "text": "[6] Estrin, D., Handley, M. and D. Thaler, \"The Internet Multicast Address Allocation Architecture\", Work in Progress.",
      "ja": "[6] Estrin、D.、Handley、M。and D. Thaler、「インターネットマルチキャストアドレスの割り当てアーキテクチャ」、進行中の作業。"
    },
    {
      "indent": 3,
      "text": "[7] Kermode, R., \"MADCAP Multicast Scope Nesting State Option\", Work in Progress.",
      "ja": "[7] Kermode、R。、「Madcap Multicast Scope Nesting State Option」、進行中の作業。"
    },
    {
      "indent": 0,
      "text": "7. Author's Address",
      "section_title": true,
      "ja": "7. 著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Ross Finlayson, Live Networks, Inc. (LIVE.COM)",
      "ja": "Ross Finlayson、Live Networks、Inc。（live.com）"
    },
    {
      "indent": 3,
      "text": "EMail: finlayson@live.com\nWWW: http://www.live.com/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "8. Full Copyright Statement",
      "section_title": true,
      "ja": "8. 完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2000）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があります。また、それについてコメントまたは説明する派生作品、またはその実装を支援することは、いかなる種類の制限なしに、準備、コピー、公開、および部分的に配布される場合があります。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会またはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントと本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}