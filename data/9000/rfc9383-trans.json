{
  "title": {
    "text": "RFC 9383 - SPAKE2+, an Augmented Password-Authenticated Key Exchange (PAKE) Protocol",
    "ja": "RFC 9383 - Spake2、拡張されたパスワードを認識したキーエクスチェンジ（ペイク）プロトコル"
  },
  "number": 9383,
  "created_at": "2024-03-13 09:52:02.761330+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                        T. Taubert\nRequest for Comments: 9383                                    Apple Inc.\nCategory: Informational                                       C. A. Wood\nISSN: 2070-1721                                           September 2023",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "SPAKE2+, an Augmented Password-Authenticated Key Exchange (PAKE) Protocol",
      "title": true,
      "section_title": true,
      "ja": "Spake2、拡張されたパスワードを認識したキーエクスチェンジ（ペイク）プロトコル"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "section_title": true,
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes SPAKE2+, a Password-Authenticated Key Exchange (PAKE) protocol run between two parties for deriving a strong shared key with no risk of disclosing the password. SPAKE2+ is an augmented PAKE protocol, as only one party has knowledge of the password. This method is simple to implement, compatible with any prime-order group, and computationally efficient.",
      "ja": "このドキュメントでは、パスワードを開示するリスクなしに強力な共有キーを導き出すために、2つのパーティ間でパスワードを認識したキーエクスチェンジ（PAKE）プロトコルを実行するSpake2について説明します。Spake2は、パスワードの知識を持っているのは1人の当事者だけなので、拡張されたPakeプロトコルです。この方法は、実装が簡単で、任意のプライムオーダーグループと互換性があり、計算上効率的です。"
    },
    {
      "indent": 3,
      "text": "This document was produced outside of the IETF and IRTF and represents the opinions of the authors. Publication of this document as an RFC in the Independent Submissions Stream does not imply endorsement of SPAKE2+ by the IETF or IRTF.",
      "ja": "この文書は、IETFとIRTFの外で作成され、著者の意見を表しています。独立した提出ストリームでのRFCとしてのこのドキュメントの公開は、IETFまたはIRTFによるSPAKE2の承認を意味するものではありません。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "section_title": true,
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントは、インターネット標準の追跡仕様ではありません。情報目的で公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "これは、他のRFCストリームとは無関係に、RFCシリーズへの貢献です。RFCエディターは、このドキュメントの裁量でこのドキュメントを公開することを選択しており、実装または展開に対する価値について声明を発表しません。RFCエディターによって公開されることが承認されたドキュメントは、インターネット標準のレベルの候補者ではありません。RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9383.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそれに関するフィードバックを提供する方法に関する情報は、https：//www.rfc-editor.org/info/rfc9383で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "section_title": true,
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2023 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2023 IETF Trustおよび文書著者として特定された人。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（https://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "section_title": true,
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n2.  Requirements Notation\n3.  Definition of SPAKE2+\n  3.1.  Protocol Overview\n  3.2.  Offline Registration\n  3.3.  Online Authentication\n  3.4.  Key Schedule and Key Confirmation\n4.  Ciphersuites\n5.  IANA Considerations\n6.  Security Considerations\n7.  References\n  7.1.  Normative References\n  7.2.  Informative References\nAppendix A.  Protocol Flow\n  A.1.  Prover\n  A.2.  Verifier\n  A.3.  Transcript Computation\n  A.4.  Key Schedule Computation\n  A.5.  Protocol Run\nAppendix B.  Algorithm Used for Point Generation\nAppendix C.  Test Vectors\nAcknowledgements\nAuthors' Addresses",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document describes SPAKE2+, a Password-Authenticated Key Exchange (PAKE) protocol run between two parties for deriving a strong shared key with no risk of disclosing the password. SPAKE2+ is an augmented PAKE protocol, as only one party makes direct use of the password during the execution of the protocol. The other party only needs a record corresponding to the first party's registration at the time of the protocol execution instead of the password. This record can be computed once, during an offline registration phase. The party using the password directly would typically be a client and would act as a Prover, while the other party would be a server and would act as a Verifier.",
      "ja": "このドキュメントでは、パスワードを開示するリスクなしに強力な共有キーを導き出すために、2つのパーティ間でパスワードを認識したキーエクスチェンジ（PAKE）プロトコルを実行するSpake2について説明します。Spake2は、プロトコルの実行中にパスワードを直接使用するのは、1つの当事者だけがパスワードを使用するため、拡張されたPakeプロトコルです。相手は、パスワードの代わりにプロトコルの実行時に最初の当事者の登録に対応するレコードのみを必要とします。このレコードは、オフライン登録フェーズ中に1回計算できます。パスワードを直接使用している当事者は通常、クライアントであり、得点者として機能しますが、他の当事者はサーバーであり、検証剤として機能します。"
    },
    {
      "indent": 3,
      "text": "The protocol is augmented in the sense that it provides some resilience against the compromise or extraction of the registration record. The design of the protocol forces the adversary to recover the password from the record to successfully execute the protocol. Hence, this protocol can be advantageously combined with a salted Password Hashing Function to increase the cost of the recovery and slow down attacks. The record cannot be used directly to successfully run the protocol as a Prover, making this protocol more robust than balanced PAKEs, which don't benefit from Password Hashing Functions to the same extent.",
      "ja": "このプロトコルは、登録記録の妥協または抽出に対してある程度の回復力を提供するという意味で補強されています。プロトコルの設計により、敵はレコードからパスワードを回復するように強制され、プロトコルを正常に実行します。したがって、このプロトコルは、塩漬けのパスワードハッシュ関数と有利に組み合わせることで、回復のコストを増加させ、攻撃を遅くすることができます。レコードは、プロトコルをプローバーとして正常に実行するために直接使用することはできません。このプロトコルは、パスワードハッシュ機能の恩恵を同じ程度に恩恵を受けることはできません。"
    },
    {
      "indent": 3,
      "text": "This augmented property is especially valuable in scenarios where the execution of the protocol is constrained and the adversary cannot query the salt of the Password Hashing Function ahead of the attack. For example, a constraint may be when physical proximity through a local network is required or when a first authentication factor is required for initiation of the protocol.",
      "ja": "この拡張された特性は、プロトコルの実行が制約され、敵が攻撃の前にパスワードハッシュ機能の塩を照会できないシナリオでは特に価値があります。たとえば、ローカルネットワークを介した物理的な近接性が必要な場合、またはプロトコルの開始に最初の認証係数が必要な場合に制約があります。"
    },
    {
      "indent": 3,
      "text": "This document has content split out from a related document, [RFC9382], which specifies SPAKE2. SPAKE2 is a symmetric PAKE protocol, where both parties have knowledge of the password. SPAKE2+ is the asymmetric or augmented version of SPAKE2, wherein only one party has knowledge of the password. SPAKE2+ is specified separately in this document because the use cases for symmetric and augmented PAKEs are different and therefore warrant different technical specifications. Neither SPAKE2 nor SPAKE2+ was selected as the result of the Crypto Forum Research Group (CFRG) PAKE selection competition. However, this password-based key exchange protocol appears in [TDH] and is proven secure in [SPAKE2P-Analysis]. It is compatible with any prime-order group and relies only on group operations, making it simple and computationally efficient. Thus, it was felt that publication was beneficial to make the protocol available for wider consideration.",
      "ja": "このドキュメントには、Spake2を指定する関連ドキュメント[RFC9382]からコンテンツが分割されています。Spake2は対称的なPakeプロトコルであり、両当事者はパスワードの知識を持っています。Spake2は、Spake2の非対称バージョンまたは拡張バージョンであり、パスワードの知識を持っているのは1人の当事者だけです。SPAKE2は、対称的および拡張されたペークのユースケースが異なるため、技術的な仕様が異なるため、このドキュメントで個別に指定されています。Crypto Forum Research Group（CFRG）Pake Selection Competitionの結果として、Spake2もSpake2も選択されませんでした。ただし、このパスワードベースのキーエクスチェンジプロトコルは[TDH]に表示され、[Spake2p-Analysis]で安全であることが証明されています。プライムオーダーグループと互換性があり、グループ操作のみに依存しているため、シンプルで計算効率が高くなります。したがって、出版物は、プロトコルをより広く検討できるようにすることが有益であると感じられました。"
    },
    {
      "indent": 3,
      "text": "This document was produced outside of the IETF and IRTF and represents the opinions of the authors. Publication of this document as an RFC in the Independent Submissions Stream does not imply endorsement of SPAKE2+ by the IETF or IRTF.",
      "ja": "この文書は、IETFとIRTFの外で作成され、著者の意見を表しています。独立した提出ストリームでのRFCとしてのこのドキュメントの公開は、IETFまたはIRTFによるSPAKE2の承認を意味するものではありません。"
    },
    {
      "indent": 0,
      "text": "2. Requirements Notation",
      "section_title": true,
      "ja": "2. 要件表記"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Definition of SPAKE2+",
      "section_title": true,
      "ja": "3. Spake2の定義"
    },
    {
      "indent": 3,
      "text": "Let G be a group in which the computational Diffie-Hellman (CDH) problem is hard. Suppose G has order p*h where p is a large prime; h will be called the cofactor. Let I be the unit element in G, e.g., the point at infinity if G is an elliptic curve group. We denote the operations in the group additively. We assume that there is a representation of elements of G as byte strings: common choices would be SEC 1 uncompressed or compressed [SEC1] for elliptic curve groups or big-endian integers of a fixed (per-group) length for prime field DH. We fix a generator P of the (large) prime-order subgroup of G. P is specified in the document defining the group, and so we do not repeat it here.",
      "ja": "gを、計算diffie-hellman（cdh）の問題が難しいグループとします。gが順序p*hを持っていると仮定します。ここで、pは大きな素数です。Hは補因子と呼ばれます。Gが楕円曲線グループである場合、Iの単位要素、たとえば無限のポイントとします。グループ内の操作を追加します。gの要素がバイト文字列として表現されていると仮定します。一般的な選択は、楕円曲線グループの場合、またはプライムフィールドDHの固定（グループごとの）長さのビッグエンディアン整数の場合は1秒未圧縮または圧縮[SEC1]になります。G. Pの（大規模な）プライムオーダーサブグループの発電機Pを修正します。Pは、グループを定義するドキュメントで指定されているため、ここでは繰り返されません。"
    },
    {
      "indent": 3,
      "text": "|| denotes concatenation of strings. We also let len(S) denote the length of a string in bytes, represented as an eight-byte little-endian number. Finally, let nil represent an empty string, i.e., len(nil) = 0.",
      "ja": "||文字列の連結を示します。また、Len（s）は、8バイトの小さなエンディアン数として表されるバイト内の文字列の長さを示すこともできます。最後に、空の文字列、つまりlen（nil）= 0を表します。"
    },
    {
      "indent": 3,
      "text": "KDF is a key derivation function that takes as input a salt, input keying material (IKM), info string, and derived key length L to derive a cryptographic key of length L. MAC is a Message Authentication Code algorithm that takes a secret key and message as input to produce an output. Let Hash be a hash function from arbitrary strings to bit strings of a fixed length. Common choices for Hash are SHA256 or SHA512 [RFC6234]. Section 4 specifies variants of KDF, MAC, and Hash suitable for use with the protocols contained herein.",
      "ja": "KDFは、入力として塩、入力キーイング材料（IKM）、情報文字列、および派生キーの長さlを導き出すキー導出関数であり、長さの暗号化キーを導き出すことができます。出力を生成するための入力としてのメッセージ。ハッシュを任意の文字列から固定長のビット文字列までハッシュ関数とします。ハッシュの一般的な選択は、SHA256またはSHA512 [RFC6234]です。セクション4では、ここに含まれるプロトコルでの使用に適したKDF、Mac、およびハッシュのバリアントを指定します。"
    },
    {
      "indent": 3,
      "text": "Let there be two parties, a Prover and a Verifier. Their identities, denoted as idProver and idVerifier, may also have digital representations such as Media Access Control addresses or other names (hostnames, usernames, etc.). The parties may share additional data (the context) separate from their identities, which they may want to include in the protocol transcript. One example of additional data is a list of supported protocol versions if SPAKE2+ were used in a higher-level protocol that negotiates the use of a particular PAKE. Another example is the inclusion of the application name. Including these data points would ensure that both parties agree upon the same set of supported protocols and therefore prevents downgrade and cross-protocol attacks. Specification of precise context values is out of scope for this document.",
      "ja": "プーバーと検証者の2つのパーティーがあります。IdproverおよびIdverifierとして示されるそのアイデンティティには、メディアアクセス制御アドレスやその他の名前（ホスト名、ユーザー名など）などのデジタル表現もあります。当事者は、追加データ（コンテキスト）をアイデンティティとは別に共有できます。これは、プロトコルトランスクリプトに含めたい場合があります。追加のデータの1つの例は、特定のPakeの使用を交渉する高レベルのプロトコルでSpake2が使用された場合、サポートされているプロトコルバージョンのリストです。別の例は、アプリケーション名を含めることです。これらのデータポイントを含めることで、両当事者が同じサポートされているプロトコルのセットに同意することを保証するため、ダウングレードおよびクロスプロトコール攻撃を防ぎます。正確なコンテキスト値の仕様は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "3.1. Protocol Overview",
      "section_title": true,
      "ja": "3.1. プロトコルの概要"
    },
    {
      "indent": 3,
      "text": "SPAKE2+ is a two-round protocol that establishes a shared secret with an additional round for key confirmation. Prior to invocation, both parties are provisioned with information such as the input password needed to run the protocol. The registration phase may include communicating identities, protocol version, and other parameters related to the registration record; see Section 3.2 for details.",
      "ja": "Spake2は、主要な確認のために追加のラウンドで共有秘密を確立する2ラウンドのプロトコルです。呼び出しの前に、両当事者には、プロトコルを実行するために必要な入力パスワードなどの情報がプロビジョニングされます。登録段階には、登録記録に関連するその他のパラメーターの伝達が含まれる場合があります。詳細については、セクション3.2を参照してください。"
    },
    {
      "indent": 3,
      "text": "During the first round, the Prover sends a public share, shareP, to the Verifier, which in turn responds with its own public share, shareV. Both parties then derive a shared secret used to produce encryption and authentication keys. The latter are used during the second round for key confirmation. (Section 3.4 details the key derivation and confirmation steps.) In particular, the Verifier sends a key confirmation message, confirmV, to the Prover, which in turn responds with its own key confirmation message, confirmP. (Note that shareV and confirmV MAY be sent in the same message.) Both parties MUST NOT consider the protocol complete prior to receipt and validation of these key confirmation messages.",
      "ja": "最初のラウンドで、ProverはVerifierに公開シェア、Sharepを送信します。両当事者は、暗号化と認証キーを作成するために使用される共有秘密を導き出します。後者は、キー確認のために第2ラウンド中に使用されます。（セクション3.4では、キーの派生と確認の手順について詳しく説明しています。）特に、検証者は主要な確認メッセージ、CONDICHVをProverに送信します。（ShareVとConfismVは同じメッセージで送信される場合があることに注意してください。）両当事者は、これらの重要な確認メッセージの受領と検証の前に完了したプロトコルを考慮してはなりません。"
    },
    {
      "indent": 3,
      "text": "A sample trace is shown below.",
      "ja": "サンプルトレースを以下に示します。"
    },
    {
      "indent": 3,
      "text": "                 Prover                     Verifier\n\n                   |        (registration)     |\n                   |<- - - - - - - - - - - - ->|\n                   |                           |\n                   |   (set up the protocol)   |\n(compute shareP)   |            shareP         |\n                   |-------------------------->|\n                   |            shareV         | (compute shareV)\n                   |<--------------------------|\n                   |                           |\n                   |       (derive secrets)    | (compute confirmV)\n                   |           confirmV        |\n                   |<--------------------------|\n(compute confirmP) |           confirmP        |\n                   |-------------------------->|",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.2. Offline Registration",
      "section_title": true,
      "ja": "3.2. オフライン登録"
    },
    {
      "indent": 3,
      "text": "The registration phase computes the values w0 and w1, as well as the registration record L=w1*P.  w0 and w1 are derived by hashing the password pw with the identities of the two participants.  w0 and the record L are then shared with the Verifier and stored as part of the registration record associated with the Prover. The Prover SHOULD derive w0 and w1 from the password before the protocol begins. Both w0 and w1 are derived using a function with range [0, p-1], which is modeled as a random oracle in [SPAKE2P-Analysis].",
      "ja": "登録フェーズは、値w0とw1、および登録記録l = w1*pを計算します。W0とW1は、2人の参加者のIDを使用してパスワードPWをハッシュすることにより導出されます。W0とレコードLは、検証剤と共有され、プローバーに関連付けられた登録レコードの一部として保存されます。Proverは、プロトコルが開始される前に、パスワードからW0とW1を導き出す必要があります。W0とW1の両方は、[0、p-1]の範囲[0、p-1]の関数を使用して導出されます。これは、[Spake2p分析]のランダムオラクルとしてモデル化されます。"
    },
    {
      "indent": 3,
      "text": "The registration phase also produces two random elements, M and N, in the prime-order subgroup of G. The algorithm for selecting M and N is defined in Appendix B. Importantly, this algorithm chooses M and N such that their discrete logs are not known. Precomputed values for M and N are listed in Section 4 for each group. Applications MAY use different M and N values, provided they are computed, e.g., using different input seeds to the algorithm in Appendix B, as random elements for which the discrete log is unknown.",
      "ja": "登録フェーズでは、Gのプライムオーダーサブグループに2つのランダムな要素MとNを生成します。MおよびNを選択するためのアルゴリズムは付録Bで定義されています。知られています。MおよびNの事前計算値は、各グループのセクション4にリストされています。アプリケーションは、個別のログが不明であるランダム要素として、付録Bのアルゴリズムに異なる入力シードを使用して計算されている場合、異なるMおよびn値を使用する場合があります。"
    },
    {
      "indent": 3,
      "text": "Applications using this specification MUST define the method used to compute w0 and w1. For example, it may be necessary to carry out various forms of normalization of the password before hashing [RFC8265]. This section contains requirements and default recommendations for computing w0 and w1.",
      "ja": "この仕様を使用するアプリケーションは、W0とW1を計算するために使用される方法を定義する必要があります。たとえば、ハッシュする前にパスワードのさまざまな形式の正規化を実行する必要がある場合があります[RFC8265]。このセクションには、W0とW1を計算するための要件とデフォルトの推奨事項が含まれています。"
    },
    {
      "indent": 3,
      "text": "The RECOMMENDED method for generating w0 and w1 is via a Password-Based Key Derivation Function (PBKDF), which is a function designed to slow down brute-force attackers. Brute-force resistance may be obtained through various computation hardness parameters such as memory or CPU cycles and are typically configurable. The scrypt [RFC7914] function and the Argon2id [RFC9106] function are common examples of PBKDFs. Absent an application-specific profile, RECOMMENDED parameters (N, r, p) for scrypt are (32768,8,1), and RECOMMENDED parameters for Argon2id are in Section 4 of [RFC9106].",
      "ja": "W0とW1を生成するための推奨される方法は、パスワードベースのキー派生関数（PBKDF）を介して行われます。これは、ブルートフォース攻撃者を遅くするために設計された関数です。ブルートフォース抵抗は、メモリやCPUサイクルなどのさまざまな計算硬度パラメーターを介して取得でき、通常は構成可能です。Scrypt [RFC7914]関数とArgon2ID [RFC9106]関数は、PBKDFの一般的な例です。アプリケーション固有のプロファイルがない場合、Scryptの推奨パラメーター（N、R、P）は（32768,8,1）であり、Argon2IDの推奨パラメーターは[RFC9106]のセクション4にあります。"
    },
    {
      "indent": 3,
      "text": "Each half of the output of the PBKDF will be interpreted as an integer and reduced modulo p. To control bias, each half must be of length at least ceil(log2(p)) + k bits, with k >= 64. Reducing such integers mod p gives bias at most 2^-k for any p; this bias is negligible for any k >= 64.",
      "ja": "PBKDFの出力の各半分は、整数と縮小係数として解釈されます。バイアスを制御するには、各半分は少なくとも天井（log2（p））kビットで、k> = 64でなければなりません。そのような整数mod pを減らすと、任意のpに対して最大2^-kでバイアスが得られます。このバイアスは、K> = 64では無視できます。"
    },
    {
      "indent": 3,
      "text": "The minimum total output length of the PBKDF then is 2 * (ceil(log2(p)) + k) bits. For example, given the prime order of the P-256 curve, the output of the PBKDF SHOULD be at least 640 bits or 80 bytes.",
      "ja": "PBKDFの最小合計出力長は、2 *（ceil（log2（p））k）ビットです。たとえば、P-256曲線の一次順序を考えると、PBKDFの出力は少なくとも640ビットまたは80バイトでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Given a PBKDF, password pw, and identities idProver and idVerifier, the RECOMMENDED method for computing w0 and w1 is as follows:",
      "ja": "PBKDF、パスワードPW、およびIDProverおよびIdverifierのIDが与えられた場合、W0とW1を計算するための推奨される方法は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "w0s || w1s = PBKDF(len(pw) || pw ||\n                   len(idProver) || idProver ||\n                   len(idVerifier) || idVerifier)\nw0 = w0s mod p\nw1 = w1s mod p",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "If an identity is unknown at the time of computing w0s or w1s, its length is given as zero and the identity itself is represented as an empty octet string. If both idProver and idVerifier are unknown, then their lengths are given as zero and both identities will be represented as empty octet strings.  idProver and idVerifier are included in the transcript TT as part of the protocol flow.",
      "ja": "W0SまたはW1Sの計算時にアイデンティティが不明な場合、その長さはゼロとして与えられ、アイデンティティ自体は空のオクテット文字列として表されます。idproverとidverifierの両方が不明の場合、それらの長さはゼロとして与えられ、両方のアイデンティティが空のオクテット文字列として表されます。IDProverとIdverifierは、プロトコルフローの一部としてトランスクリプトTTに含まれています。"
    },
    {
      "indent": 0,
      "text": "3.3. Online Authentication",
      "section_title": true,
      "ja": "3.3. オンライン認証"
    },
    {
      "indent": 3,
      "text": "The online SPAKE2+ protocol runs between the Prover and Verifier to produce a single shared secret upon completion. To begin, the Prover selects x uniformly at random from the integers in [0, p-1], computes the public share shareP=X, and transmits it to the Verifier.",
      "ja": "オンラインSpake2プロトコルは、ProverとVerifierの間を実行して、完了時に単一の共有秘密を作成します。開始するために、Proverは[0、P-1]の整数からランダムに均一にxを選択し、public Share sharep = xを計算し、検証剤に送信します。"
    },
    {
      "indent": 3,
      "text": "x <- [0, p-1]\nX = x*P + w0*M",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Upon receipt of X, the Verifier checks the received element for group membership and aborts if X is not in the large prime-order subgroup of G; see Section 6 for details. The Verifier then selects y uniformly at random from the integers in [0, p-1], computes the public share shareV=Y, and transmits it to the Prover. Upon receipt of Y, the Prover checks the received element for group membership and aborts if Y is not in the large prime-order subgroup of G.",
      "ja": "xを受け取ると、検証剤はグループメンバーシップの受信要素をチェックし、xがGの大規模なプライムオーダーサブグループにない場合は中止します。詳細については、セクション6を参照してください。次に、検証剤は[0、p-1]の整数からランダムに均一にyを選択し、public share sharev = yを計算し、プロバーに送信します。Yを受け取ると、Proverはグループメンバーシップの受信要素をチェックし、Gの大規模なプライムオーダーサブグループにyがない場合、中止します。"
    },
    {
      "indent": 3,
      "text": "y <- [0, p-1]\nY = y*P + w0*N",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Both participants compute Z and V; Z and V are then shared as common values. The Prover computes:",
      "ja": "両方の参加者がZとVを計算します。zとvは共通の値として共有されます。プロバーは計算します："
    },
    {
      "indent": 3,
      "text": "Z = h*x*(Y - w0*N)\nV = h*w1*(Y - w0*N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The Verifier computes:",
      "ja": "Verifierは計算します："
    },
    {
      "indent": 3,
      "text": "Z = h*y*(X - w0*M)\nV = h*y*L",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The multiplication by the cofactor h prevents small subgroup confinement attacks. All proofs of security hold even if the discrete log of the fixed group element N is known to the adversary. In particular, one MAY set N=I, i.e., set N to the unit element in G.",
      "ja": "補因子Hによる乗算は、小さなサブグループ閉じ込め攻撃を防ぎます。固定グループ要素nの離散ログが敵に知られている場合でも、セキュリティのすべての証明は保持されます。特に、n = i、つまりnをGのユニット要素に設定することができます。"
    },
    {
      "indent": 3,
      "text": "It is essential that both Z and V be used in combination with the transcript to derive the keying material. The protocol transcript encoding is shown below.",
      "ja": "ZとVの両方を転写産物と組み合わせて使用して、キーイング材料を導出することが不可欠です。プロトコル転写産物エンコーディングを以下に示します。"
    },
    {
      "indent": 3,
      "text": "TT = len(Context) || Context\n  || len(idProver) || idProver\n  || len(idVerifier) || idVerifier\n  || len(M) || M\n  || len(N) || N\n  || len(shareP) || shareP\n  || len(shareV) || shareV\n  || len(Z) || Z\n  || len(V) || V\n  || len(w0) || w0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Context is an application-specific customization string shared between both parties and MUST precede the remaining transcript. It might contain the name and version number of the higher-level protocol, or simply the name and version number of the application. The context MAY include additional data such as the chosen ciphersuite and PBKDF parameters like the iteration count or salt. The context and its length prefix MAY be omitted.",
      "ja": "コンテキストは、両方の当事者間で共有されるアプリケーション固有のカスタマイズ文字列であり、残りのトランスクリプトに先行する必要があります。高レベルのプロトコルの名前とバージョン番号、または単にアプリケーションの名前とバージョン番号が含まれる場合があります。コンテキストには、選択した暗号化や反復カウントや塩などのPBKDFパラメーターなどの追加データが含まれる場合があります。コンテキストとその長さのプレフィックスは省略できます。"
    },
    {
      "indent": 3,
      "text": "If an identity is absent, its length is given as zero and the identity itself is represented as an empty octet string. If both identities are absent, then their lengths are given as zero and both are represented as empty octet strings. In applications where identities are not implicit, idProver and idVerifier SHOULD always be non-empty. Otherwise, the protocol risks unknown key-share attacks (discussion of unknown key-share attacks in a specific protocol is given in [RFC8844]).",
      "ja": "アイデンティティがない場合、その長さはゼロとして与えられ、アイデンティティ自体は空のオクテット文字列として表されます。両方のアイデンティティがない場合、その長さはゼロとして与えられ、両方が空のオクテット弦として表されます。アイデンティティが暗黙的ではないアプリケーションでは、idproverとidverifierは常に空ではない必要があります。それ以外の場合、プロトコルは未知のキーシェア攻撃をリスクリスクします（特定のプロトコルにおける未知のキーシェア攻撃の議論は[RFC8844]に記載されています）。"
    },
    {
      "indent": 3,
      "text": "Upon completion of this protocol, both parties compute shared secrets K_main, K_shared, K_confirmP, and K_confirmV as specified in Section 3.4. The Verifier MUST send a key confirmation message, confirmV, to the Prover so both parties can confirm that they agree upon these shared secrets. After receipt and verification of the Verifier's confirmation message, the Prover MUST respond with its confirmation message. The Verifier MUST NOT send application data to the Prover until it has received and verified the confirmation message. Key confirmation verification requires recomputation of confirmP or confirmV and checking for equality against the data that was received.",
      "ja": "このプロトコルが完了すると、セクション3.4で指定されているように、両当事者は共有シークレットK_Main、K_Shared、K_ConfirmP、およびK_ConfiRMVを計算しました。検証者は、主要な確認メッセージ、CONDICHVをProverに送信する必要があり、両当事者がこれらの共有された秘密に同意することを確認できるようにしなければなりません。Verifierの確認メッセージの受領と検証後、Proverは確認メッセージで応答する必要があります。検証者は、確認メッセージを受信および検証するまで、アプリケーションデータをProverに送信してはなりません。主要な確認検証には、CONDIMPまたはCONDIMEVの再計算と、受信したデータに対する平等をチェックする必要があります。"
    },
    {
      "indent": 0,
      "text": "3.4. Key Schedule and Key Confirmation",
      "section_title": true,
      "ja": "3.4. キースケジュールとキー確認"
    },
    {
      "indent": 3,
      "text": "The protocol transcript TT, as defined in Section 3.3, is unique and secret to the participants. Both parties use TT to derive the shared symmetric secret K_main from the protocol. The length of K_main is equal to the length of the digest output, e.g., 256 bits for Hash() = SHA-256. The confirmation keys K_confirmP and K_confirmV, as well as the shared key K_shared, are derived from K_main.",
      "ja": "セクション3.3で定義されているプロトコル転写TTは、参加者にとってユニークで秘密です。両当事者はTTを使用して、プロトコルから共有対称シークレットk_mainを導き出します。k_mainの長さは、ダイジェスト出力の長さ（たとえば、hash（）= sha-256の256ビットに等しくなります。確認キーK_CONFIRMPおよびK_CONFIRMV、および共有キーK_Sharedは、K_Mainから派生しています。"
    },
    {
      "indent": 3,
      "text": "K_main = Hash(TT)\nK_confirmP || K_confirmV = KDF(nil, K_main, \"ConfirmationKeys\")\nK_shared = KDF(nil, K_main, \"SharedKey\")",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Neither K_main nor its derived confirmation keys are used for anything except key derivation and confirmation and MUST be discarded after the protocol execution. Applications MAY derive additional keys from K_shared as needed.",
      "ja": "K_mainもその派生した確認キーも、キーの派生と確認以外のすべてに使用されず、プロトコルの実行後に破棄する必要があります。アプリケーションは、必要に応じてk_sharedから追加のキーを導き出すことができます。"
    },
    {
      "indent": 3,
      "text": "The length of each confirmation key is dependent on the MAC function of the chosen ciphersuite. For HMAC, the RECOMMENDED key length is equal to the output length of the digest output, e.g., 256 bits for Hash() = SHA-256. For CMAC-AES, each confirmation key MUST be of length k, where k is the chosen AES key size, e.g., 128 bits for CMAC-AES-128.",
      "ja": "各確認キーの長さは、選択したCiphersuiteのMAC関数に依存します。HMACの場合、推奨されるキー長は、ダイジェスト出力の出力長に等しくなります。たとえば、hash（）= sha-256の256ビット。CMAC-AESの場合、各確認キーは長さkでなければなりません。ここで、Kは選択されたAESキーサイズ、たとえばCMAC-AES-128の128ビットです。"
    },
    {
      "indent": 3,
      "text": "Both endpoints MUST employ a MAC that produces pseudorandom tags for key confirmation. K_confirmP and K_confirmV are symmetric keys used to compute tags confirmP and confirmV over the public key shares received from the other peer earlier.",
      "ja": "両方のエンドポイントは、キー確認のために擬似ランダムタグを生成するMACを使用する必要があります。K_CONFIRMPおよびK_CONFIRMVは、以前に他のピアから受け取った公開キーの株式を介してタグCONDICEPとCONDICHVを計算するために使用される対称キーです。"
    },
    {
      "indent": 3,
      "text": "confirmP = MAC(K_confirmP, shareV)\nconfirmV = MAC(K_confirmV, shareP)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Once key confirmation is complete, applications MAY use K_shared as an authenticated shared secret as needed. For example, applications MAY derive one or more keys and nonces from K_shared, for use with Authenticated Encryption with Associated Data (AEAD) and subsequent application data encryption.",
      "ja": "重要な確認が完了すると、アプリケーションは必要に応じて認証された共有秘密としてK_Sharedを使用する場合があります。たとえば、アプリケーションは、関連データ（AEAD）およびその後のアプリケーションデータ暗号化を使用した認証された暗号化で使用するために、K_Sharedから1つまたは複数のキーとNonceを導き出すことができます。"
    },
    {
      "indent": 0,
      "text": "4. Ciphersuites",
      "section_title": true,
      "ja": "4. ciphersuites"
    },
    {
      "indent": 3,
      "text": "This section documents SPAKE2+ ciphersuite configurations. A ciphersuite indicates a group, cryptographic hash algorithm, and pair of KDF and MAC functions, e.g., P256-SHA256-HKDF-HMAC-SHA256. This ciphersuite indicates a SPAKE2+ protocol instance over P-256 that uses SHA256 along with HKDF [RFC5869] and HMAC [RFC2104] for G, Hash, KDF, and MAC functions, respectively. Since the choice of PBKDF, its parameters for computing w0 and w1, and the distribution of w0 and w1 do not affect interoperability, the PBKDF is not included as part of the ciphersuite.",
      "ja": "このセクションでは、Spake2 ciphersuite構成を文書化します。ciphersuiteは、グループ、暗号化ハッシュアルゴリズム、およびKDFおよびMAC関数のペア、たとえばP256-SHA256-HKDF-HMAC-SHA256を示します。このciphersuiteは、それぞれG、ハッシュ、KDF、およびMAC機能にHKDF [RFC5869]およびHMAC [RFC2104]とともにSHA256を使用するP-256を超えるSPAKE2プロトコルインスタンスを示しています。PBKDFの選択は、W0とW1を計算するためのパラメーター、およびW0とW1の分布が相互運用性に影響しないため、PBKDFはCiphersuiteの一部として含まれていません。"
    },
    {
      "indent": 3,
      "text": "If no MAC algorithm is used in the key confirmation phase, its respective column in Table 1 can be ignored and the ciphersuite name will contain no MAC identifier.",
      "ja": "キー確認フェーズでMACアルゴリズムが使用されていない場合、表1のそれぞれの列を無視でき、Ciphersuite名にはMac Identifierが含まれません。"
    },
    {
      "indent": 2,
      "text": "  +==============+==================+=============+==============+\n  | G            |       Hash       |     KDF     |     MAC      |\n  +==============+==================+=============+==============+\n  | P-256        | SHA256 [RFC6234] | HKDF-SHA256 | HMAC-SHA256  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | P-256        | SHA512 [RFC6234] | HKDF-SHA512 | HMAC-SHA512  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | P-384        | SHA256 [RFC6234] | HKDF-SHA256 | HMAC-SHA256  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | P-384        | SHA512 [RFC6234] | HKDF-SHA512 | HMAC-SHA512  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | P-521        | SHA512 [RFC6234] | HKDF-SHA512 | HMAC-SHA512  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | edwards25519 | SHA256 [RFC6234] | HKDF-SHA256 | HMAC-SHA256  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | edwards448   | SHA512 [RFC6234] | HKDF-SHA512 | HMAC-SHA512  |\n  |              |                  |  [RFC5869]  |  [RFC2104]   |\n  +--------------+------------------+-------------+--------------+\n  | P-256        | SHA256 [RFC6234] | HKDF-SHA256 | CMAC-AES-128 |\n  |              |                  |  [RFC5869]  |  [RFC4493]   |\n  +--------------+------------------+-------------+--------------+\n  | P-256        | SHA512 [RFC6234] | HKDF-SHA512 | CMAC-AES-128 |\n  |              |                  |  [RFC5869]  |  [RFC4493]   |\n  +--------------+------------------+-------------+--------------+\n\n                              Table 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following points represent permissible point generation seeds for the groups listed in Table 1, using the algorithm presented in Appendix B. These byte strings are compressed points as in [SEC1] for curves from [SEC1] and [RFC8032]. Note that these values are identical to those used in the companion SPAKE2 specification [RFC9382].",
      "ja": "次の点は、付録Bに示されているアルゴリズムを使用して、表1にリストされているグループの許容点発電シードを表しています。これらのバイト文字列は、[SEC1]および[RFC8032]の曲線の[SEC1]のように圧縮点です。これらの値は、Companion Spake2仕様[RFC9382]で使用される値と同一であることに注意してください。"
    },
    {
      "indent": 3,
      "text": "For P-256:",
      "ja": "P-256の場合："
    },
    {
      "indent": 3,
      "text": "M =\n02886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa12f\nseed: 1.2.840.10045.3.1.7 point generation seed (M)\n\nN =\n03d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4f98baa1292b49\nseed: 1.2.840.10045.3.1.7 point generation seed (N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For P-384:",
      "ja": "P-384の場合："
    },
    {
      "indent": 3,
      "text": "M =\n030ff0895ae5ebf6187080a82d82b42e2765e3b2f8749c7e05eba366434b363d3dc\n36f15314739074d2eb8613fceec2853\nseed: 1.3.132.0.34 point generation seed (M)\n\nN =\n02c72cf2e390853a1c1c4ad816a62fd15824f56078918f43f922ca21518f9c543bb\n252c5490214cf9aa3f0baab4b665c10\nseed: 1.3.132.0.34 point generation seed (N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For P-521:",
      "ja": "P-521の場合："
    },
    {
      "indent": 3,
      "text": "M =\n02003f06f38131b2ba2600791e82488e8d20ab889af753a41806c5db18d37d85608\ncfae06b82e4a72cd744c719193562a653ea1f119eef9356907edc9b56979962d7aa\nseed: 1.3.132.0.35 point generation seed (M)\n\nN =\n0200c7924b9ec017f3094562894336a53c50167ba8c5963876880542bc669e494b25\n32d76c5b53dfb349fdf69154b9e0048c58a42e8ed04cef052a3bc349d95575cd25\nseed: 1.3.132.0.35 point generation seed (N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For edwards25519:",
      "ja": "Edwards25519の場合："
    },
    {
      "indent": 3,
      "text": "M =\nd048032c6ea0b6d697ddc2e86bda85a33adac920f1bf18e1b0c6d166a5cecdaf\nseed: edwards25519 point generation seed (M)\n\nN =\nd3bfb518f44f3430f29d0c92af503865a1ed3281dc69b35dd868ba85f886c4ab\nseed: edwards25519 point generation seed (N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For edwards448:",
      "ja": "Edwards448の場合："
    },
    {
      "indent": 3,
      "text": "M =\nb6221038a775ecd007a4e4dde39fd76ae91d3cf0cc92be8f0c2fa6d6b66f9a12\n942f5a92646109152292464f3e63d354701c7848d9fc3b8880\nseed: edwards448 point generation seed (M)\n\nN =\n6034c65b66e4cd7a49b0edec3e3c9ccc4588afd8cf324e29f0a84a072531c4db\nf97ff9af195ed714a689251f08f8e06e2d1f24a0ffc0146600\nseed: edwards448 point generation seed (N)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document has no IANA actions.",
      "ja": "このドキュメントにはIANAアクションがありません。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "SPAKE2+ appears in [TDH] and is proven secure in [SPAKE2P-Analysis].",
      "ja": "Spake2は[TDH]に表示され、[Spake2p-analysis]で安全であることが証明されています。"
    },
    {
      "indent": 3,
      "text": "The ephemeral randomness used by the Prover and Verifier MUST be generated using a cryptographically secure Pseudorandom Number Generator (PRNG).",
      "ja": "ProverおよびVerifierが使用する短命ランダム性は、暗号化された擬似ランダム番号ジェネレーター（PRNG）を使用して生成する必要があります。"
    },
    {
      "indent": 3,
      "text": "Elements received from a peer MUST be checked for group membership: failure to properly deserialize and validate group elements can lead to attacks. An endpoint MUST abort the protocol if any received public value is not a member of the large prime-order subgroup of G. Multiplication of a public value V by the cofactor h will yield the identity element I whenever V is an element of a small-order subgroup. Consequently, the Prover and Verifier MUST abort the protocol upon receiving any value V such that V*h = I. Failure to do so may lead to subgroup confinement attacks.",
      "ja": "ピアから受け取った要素は、グループメンバーシップをチェックする必要があります。グループ要素を適切にゆったりと検証しないと、攻撃につながる可能性があります。受信した公共値がGの大規模なプライムオーダーサブグループのメンバーではない場合、エンドポイントはプロトコルを中止する必要があります。Vが小型の要素である場合、補因子Hによる公共価値vの乗算vはアイデンティティ要素iを生成します。サブグループを注文します。その結果、ProverとVerifierは、V*H = Iのような値Vを受信するとプロトコルを中止する必要があります。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7. 参考文献"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n           Hashing for Message Authentication\", RFC 2104,\n           DOI 10.17487/RFC2104, February 1997,\n           <https://www.rfc-editor.org/info/rfc2104>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\n           DOI 10.17487/RFC2119, March 1997,\n           <https://www.rfc-editor.org/info/rfc2119>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC4493]  Song, JH., Poovendran, R., Lee, J., and T. Iwata, \"The\n           AES-CMAC Algorithm\", RFC 4493, DOI 10.17487/RFC4493, June\n           2006, <https://www.rfc-editor.org/info/rfc4493>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n           \"Elliptic Curve Cryptography Subject Public Key\n           Information\", RFC 5480, DOI 10.17487/RFC5480, March 2009,\n           <https://www.rfc-editor.org/info/rfc5480>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC5869]  Krawczyk, H. and P. Eronen, \"HMAC-based Extract-and-Expand\n           Key Derivation Function (HKDF)\", RFC 5869,\n           DOI 10.17487/RFC5869, May 2010,\n           <https://www.rfc-editor.org/info/rfc5869>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n           (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n           DOI 10.17487/RFC6234, May 2011,\n           <https://www.rfc-editor.org/info/rfc6234>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8032]  Josefsson, S. and I. Liusvaara, \"Edwards-Curve Digital\n           Signature Algorithm (EdDSA)\", RFC 8032,\n           DOI 10.17487/RFC8032, January 2017,\n           <https://www.rfc-editor.org/info/rfc8032>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n           2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n           May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8265]  Saint-Andre, P. and A. Melnikov, \"Preparation,\n           Enforcement, and Comparison of Internationalized Strings\n           Representing Usernames and Passwords\", RFC 8265,\n           DOI 10.17487/RFC8265, October 2017,\n           <https://www.rfc-editor.org/info/rfc8265>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9382]  Ladd, W., \"SPAKE2, a Password-Authenticated Key Exchange\",\n           RFC 9382, DOI 10.17487/RFC9382, September 2023,\n           <https://www.rfc-editor.org/info/rfc9382>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[SEC1]     Standards for Efficient Cryptography Group, \"SEC 1:\n           Elliptic Curve Cryptography\", version 2.0, May 2009,\n           <https://secg.org/sec1-v2.pdf>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[SPAKE2P-Analysis]\n           Shoup, V., \"Security analysis of SPAKE2+\", March 2020,\n           <https://eprint.iacr.org/2020/313.pdf>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[TDH]      Cash, D., Kiltz, E., and V. Shoup, \"The Twin-Diffie\n           Hellman Problem and Applications\", EUROCRYPT 2008, Lecture\n           Notes in Computer Science, Volume 4965, pages 127-145,\n           Springer-Verlag, Berlin, Germany,\n           DOI 10.1007/978-3-540-78967-3_8, April 2008,\n           <https://doi.org/10.1007/978-3-540-78967-3_8>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC7914]  Percival, C. and S. Josefsson, \"The scrypt Password-Based\n           Key Derivation Function\", RFC 7914, DOI 10.17487/RFC7914,\n           August 2016, <https://www.rfc-editor.org/info/rfc7914>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8844]  Thomson, M. and E. Rescorla, \"Unknown Key-Share Attacks on\n           Uses of TLS with the Session Description Protocol (SDP)\",\n           RFC 8844, DOI 10.17487/RFC8844, January 2021,\n           <https://www.rfc-editor.org/info/rfc8844>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9106]  Biryukov, A., Dinu, D., Khovratovich, D., and S.\n           Josefsson, \"Argon2 Memory-Hard Function for Password\n           Hashing and Proof-of-Work Applications\", RFC 9106,\n           DOI 10.17487/RFC9106, September 2021,\n           <https://www.rfc-editor.org/info/rfc9106>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix A. Protocol Flow",
      "section_title": true,
      "ja": "付録A. プロトコルフロー"
    },
    {
      "indent": 3,
      "text": "This section describes the flow of the SPAKE2+ protocol, including computations and mandatory checks performed by the Prover and Verifier. The constants M, N, P, p, and h are defined by the chosen ciphersuite.",
      "ja": "このセクションでは、Spake2プロトコルの流れについて説明します。これには、Prover and Verifierが実行する計算と必須チェックについて説明します。定数m、n、p、p、およびhは、選択した暗号化されたものによって定義されます。"
    },
    {
      "indent": 0,
      "text": "A.1. Prover",
      "section_title": true,
      "ja": "A.1. プローバー"
    },
    {
      "indent": 3,
      "text": "The Prover implements two functions, ProverInit and ProverFinish, which are described below.",
      "ja": "Proverは、以下で説明する2つの機能、ProverinitとProverfinishを実装しています。"
    },
    {
      "indent": 3,
      "text": "def ProverInit(w0):\n   // Compute Prover key share\n   x <- [0, p-1]\n   X = x*P + w0*M\n   return (x, X)\n\ndef ProverFinish(w0, w1, x, Y):\n   if not_in_subgroup(Y):\n      raise \"invalid input\"\n\n   // Compute shared values\n   Z = h*x*(Y - w0*N)\n   V = h*w1*(Y - w0*N)\n\n   return (Y, Z, V)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2. Verifier",
      "section_title": true,
      "ja": "A.2. 検証剤"
    },
    {
      "indent": 3,
      "text": "The Verifier implements a single function, VerifierFinish, which is described below.",
      "ja": "検証器は、以下で説明する単一の関数、Verifierfinishを実装します。"
    },
    {
      "indent": 3,
      "text": "def VerifierFinish(w0, L, X):\n   if not_in_subgroup(X):\n      raise \"invalid input\"\n\n   // Compute Verifier key share\n   y <- [0, p-1]\n   Y = y*P + w0*N\n\n   // Compute shared values\n   Z = h*y*(X - w0*M)\n   V = h*y*L\n\n   return (Z, V)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.3. Transcript Computation",
      "section_title": true,
      "ja": "A.3. 転写計算"
    },
    {
      "indent": 3,
      "text": "Both the Prover and the Verifier share the same function to compute the protocol transcript, ComputeTranscript, which is described below.",
      "ja": "ProverとVerifierの両方が同じ関数を共有して、以下で説明するプロトコル転写産物であるComputetranscriptを計算します。"
    },
    {
      "indent": 3,
      "text": "def ComputeTranscript(Context, idProver, idVerifier,\n                      shareP, shareV, Z, V, w0):\n   TT = len(Context) || Context\n     || len(idProver) || idProver\n     || len(idVerifier) || idVerifier\n     || len(M) || M\n     || len(N) || N\n     || len(shareP) || shareP\n     || len(shareV) || shareV\n     || len(Z) || Z\n     || len(V) || V\n     || len(w0) || w0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.4. Key Schedule Computation",
      "section_title": true,
      "ja": "A.4. キースケジュールの計算"
    },
    {
      "indent": 3,
      "text": "Both the Prover and the Verifier share the same function to compute the key schedule, ComputeKeySchedule, which is described below.",
      "ja": "ProverとVerifierの両方が同じ関数を共有して、キースケジュールであるComputeKeyscheduleを計算します。これについては、以下に説明します。"
    },
    {
      "indent": 3,
      "text": "def ComputeKeySchedule(TT):\n   K_main = Hash(TT)\n   K_confirmP || K_confirmV = KDF(nil, K_main, \"ConfirmationKeys\")\n   K_shared = KDF(nil, K_main, \"SharedKey\")\n   return K_confirmP, K_confirmV, K_shared",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.5. Protocol Run",
      "section_title": true,
      "ja": "A.5. プロトコル実行"
    },
    {
      "indent": 3,
      "text": "A full SPAKE2+ protocol run initiated by the Prover will look as follows, where Transmit and Receive are shorthand for sending and receiving a message to the peer:",
      "ja": "Proverによって開始された完全なSpake2プロトコルの実行は次のように見えます。ここでは、送信と受信は、ピアにメッセージを送信および受信するための速記です。"
    },
    {
      "indent": 3,
      "text": "Prover(Context, idProver, idVerifier, w0, w1):\n   (x, X) = ProverInit(w0)\n   Transmit(X)\n   Y = Receive()\n   (Z, V) = ProverFinish(w0, w1, x, Y)\n   TT = ComputeTranscript(Context, idProver, idVerifier, X, Y,\n                          Z, V, w0)\n   (K_confirmP, K_confirmV, K_shared) = ComputeKeySchedule(TT)\n   expected_confirmV = MAC(K_confirmV, X)\n   confirmV = Receive()\n   if not_equal_constant_time(expected_confirmV, confirmV):\n      raise \"invalid confirmation message\"\n\n   confirmP = MAC(K_confirmP, Y)\n   Transmit(confirmP)\n\n   return K_shared\n\nVerifier(Context, idProver, idVerifier, w0, L):\n   X = Receive()\n   (Y, Z, V) = VerifierFinish(w0, L, X)\n   Transmit(Y)\n   TT = ComputeTranscript(Context, idProver, idVerifier, X, Y,\n                          Z, V, w0)\n   (K_confirmP, K_confirmV, K_shared) = ComputeKeySchedule(TT)\n   confirmV = MAC(K_confirmV, X)\n   Transmit(confirmV)\n\n   expected_confirmP = MAC(K_confirmP, Y)\n   confirmP = Receive()\n   if not_equal_constant_time(expected_confirmP, confirmP):\n      raise \"invalid confirmation message\"\n\n   return K_shared",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. Algorithm Used for Point Generation",
      "section_title": true,
      "ja": "付録B. ポイント生成に使用されるアルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section describes the algorithm that was used to generate the points M and N in Table 1 (Section 4). This algorithm produces M and N such that they are indistinguishable from two random points in the prime-order subgroup of G, where the discrete log of these points is unknown. See [SPAKE2P-Analysis] for additional details on this requirement.",
      "ja": "このセクションでは、表1（セクション4）でポイントmとnを生成するために使用されたアルゴリズムについて説明します。このアルゴリズムは、Gのプライムオーダーサブグループの2つのランダムポイントと区別できないようにMとNを生成し、これらの点の離散ログが不明です。この要件の詳細については、[Spake2p-Analysis]を参照してください。"
    },
    {
      "indent": 3,
      "text": "For each curve in Table 1, we construct a string using the curve OID from [RFC5480] (as an ASCII string) or its name, combined with the needed constant -- for instance, \"1.3.132.0.35 point generation seed (M)\" for P-521. This string is turned into a series of blocks by hashing with SHA256, and hashing that output again to generate the next 32 bytes, and so on. This pattern is repeated for each group and value, with the string modified appropriately.",
      "ja": "表1の各曲線について、[RFC5480]（ASCII文字列として）またはその名前からの曲線oidを使用して文字列を構築します。たとえば、必要な定数と組み合わせて、「1.3.132.0.35ポイント生成シード（m）「P-521の場合。この文字列は、SHA256でハッシュすることにより、一連のブロックに変わり、その出力を再度ハッシュして次の32バイトを生成するなどです。このパターンは、各グループと値で繰り返され、文字列は適切に変更されています。"
    },
    {
      "indent": 3,
      "text": "A byte string of length equal to that of an encoded group element is constructed by concatenating as many blocks as are required, starting from the first block, and truncating to the desired length. The byte string is then formatted as required for the group. In the case of Weierstrass curves, we take the desired length as the length for representing a compressed point (Section 2.3.4 of [SEC1]) and use the low-order bit of the first byte as the sign bit. In order to obtain the correct format, the value of the first byte is set to 0x02 or 0x03 (clearing the first six bits and setting the seventh bit), leaving the sign bit as it was in the byte string constructed by concatenating hash blocks. For the curves described in [RFC8032], a different procedure is used. For edwards448, the 57-byte input has the least-significant 7 bits of the last byte set to zero, and for edwards25519, the 32-byte input is not modified. For both of the curves described in [RFC8032], the (modified) input is then interpreted as the representation of the group element. If this interpretation yields a valid group element with the correct order (p), the (modified) byte string is the output. Otherwise, the initial hash block is discarded and a new byte string constructed from the remaining hash blocks. The procedure for constructing a byte string of the appropriate length, formatting it as required for the curve, and checking to see if it is a valid point of the correct order is repeated until a valid element is found.",
      "ja": "エンコードされたグループ要素の長さに等しい長さの文字列は、最初のブロックから始まり、目的の長さに切り取るだけで、必要な数のブロックを連結することによって構築されます。次に、グループに必要に応じてバイト文字列がフォーマットされます。WeierStrass曲線の場合、圧縮ポイント（[SEC1]のセクション2.3.4）を表すための長さとして目的の長さを取り、最初のバイトの低次ビットを記号ビットとして使用します。正しい形式を取得するために、最初のバイトの値は0x02または0x03に設定され（最初の6ビットをクリアして7ビットを設定）、ハッシュブロックを連結して構築されたバイト文字列にサインビットを残します。[RFC8032]で説明されている曲線には、別の手順が使用されます。Edwards448の場合、57バイトの入力には、最後のバイトがゼロに設定されていない7ビットが最も重要ではない7ビットがあり、Edwards25519の場合、32バイトの入力は変更されません。[RFC8032]で説明されている両方の曲線について、（変更された）入力はグループ要素の表現として解釈されます。この解釈が正しい順序（p）を使用して有効なグループ要素を生成する場合、（変更された）バイト文字列は出力です。それ以外の場合、最初のハッシュブロックが破棄され、残りのハッシュブロックから構築された新しいバイト文字列が作成されます。適切な長さのバイト文字列を構築し、曲線に必要に応じてフォーマットし、正しい順序の有効なポイントであるかどうかを確認する手順が、有効な要素が見つかるまで繰り返されます。"
    },
    {
      "indent": 3,
      "text": "The following Python snippet generates the above points, assuming an elliptic curve implementation following the interface of Edwards25519Point.stdbase() and Edwards448Point.stdbase() in Appendix A of [RFC8032]:",
      "ja": "[RFC8032]の付録Aのedwards25519point.stdbase（）およびedwards448point.stdbase（）のインターフェイスに従って、楕円曲線の実装を想定して、次のPythonスニペットが上記のポイントを生成します。"
    },
    {
      "indent": 3,
      "text": "def iterated_hash(seed, n):\n  h = seed\n  for i in range(n):\n    h = hashlib.sha256(h).digest()\n  return h\n\ndef bighash(seed, start, sz):\n  n = -(-sz // 32)\n  hashes = [iterated_hash(seed, i) for i in range(start, start + n)]\n  return b''.join(hashes)[:sz]\n\ndef canon_pointstr(ecname, s):\n  if ecname == 'edwards25519':\n    return s\n  elif ecname == 'edwards448':\n    return s[:-1] + bytes([s[-1] & 0x80])\n  else:\n    return bytes([(s[0] & 1) | 2]) + s[1:]\n\ndef gen_point(seed, ecname, ec):\n  for i in range(1, 1000):\n    hval = bighash(seed, i, len(ec.encode()))\n    pointstr = canon_pointstr(ecname, hval)\n    try:\n      p = ec.decode(pointstr)\n      if p != ec.zero_elem() and p * p.l() == ec.zero_elem():\n        return pointstr, i\n    except Exception:\n      pass",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix C. Test Vectors",
      "section_title": true,
      "ja": "付録C. テストベクトル"
    },
    {
      "indent": 3,
      "text": "This section contains various test vectors for SPAKE2+. (The choice of PBKDF is omitted, and values for w0 and w1 are provided directly.) All points are encoded using the uncompressed format, i.e., with a 0x04 octet prefix, specified in [SEC1].  idProver and idVerifier identity strings are provided in the protocol invocation.",
      "ja": "このセクションには、SPAKE2用のさまざまなテストベクトルが含まれています。（PBKDFの選択は省略され、W0とW1の値は直接提供されます。）すべてのポイントは、[SEC1]で指定された0x04 Octetプレフィックスを使用して、非圧縮形式を使用してエンコードされます。IDProverおよびIdverifierのID文字列は、プロトコルの呼び出しで提供されます。"
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P256-SHA256-HKDF-SHA256-HMAC-SHA256 Test Vectors\n']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0xbb8e1bbcf3c48f62c08db243652ae55d3e5586053fca77102994f23ad9549\n1b3\nw1 = 0x7e945f34d78785b8a3ef44d0df5a1a97d6b3b460409a345ca7830387a74b1\ndba\nL = 0x04eb7c9db3d9a9eb1f8adab81b5794c1f13ae3e225efbe91ea487425854c7f\nc00f00bfedcbd09b2400142d40a14f2064ef31dfaa903b91d1faea7093d835966efd\nx = 0xd1232c8e8693d02368976c174e2088851b8365d0d79a9eee709c6a05a2fad5\n39\nshareP = 0x04ef3bd051bf78a2234ec0df197f7828060fe9856503579bb17330090\n42c15c0c1de127727f418b5966afadfdd95a6e4591d171056b333dab97a79c7193e3\n41727\ny = 0x717a72348a182085109c8d3917d6c43d59b224dc6a7fc4f0483232fa6516d8\nb3\nshareV = 0x04c0f65da0d11927bdf5d560c69e1d7d939a05b0e88291887d679fcad\nea75810fb5cc1ca7494db39e82ff2f50665255d76173e09986ab46742c798a9a6843\n7b048\nZ = 0x04bbfce7dd7f277819c8da21544afb7964705569bdf12fb92aa388059408d5\n0091a0c5f1d3127f56813b5337f9e4e67e2ca633117a4fbd559946ab474356c41839\nV = 0x0458bf27c6bca011c9ce1930e8984a797a3419797b936629a5a937cf2f11c8\nb9514b82b993da8a46e664f23db7c01edc87faa530db01c2ee405230b18997f16b68\nTT = 0x38000000000000005350414b45322b2d503235362d5348413235362d484b4\n4462d5348413235362d484d41432d534841323536205465737420566563746f72730\n600000000000000636c69656e7406000000000000007365727665724100000000000\n00004886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa12\nf5ff355163e43ce224e0b0e65ff02ac8e5c7be09419c785e0ca547d55a12e2d20410\n000000000000004d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4f9\n8baa1292b4907d60aa6bfade45008a636337f5168c64d9bd36034808cd564490b1e6\n56edbe7410000000000000004ef3bd051bf78a2234ec0df197f7828060fe98565035\n79bb1733009042c15c0c1de127727f418b5966afadfdd95a6e4591d171056b333dab\n97a79c7193e341727410000000000000004c0f65da0d11927bdf5d560c69e1d7d939\na05b0e88291887d679fcadea75810fb5cc1ca7494db39e82ff2f50665255d76173e0\n9986ab46742c798a9a68437b048410000000000000004bbfce7dd7f277819c8da215\n44afb7964705569bdf12fb92aa388059408d50091a0c5f1d3127f56813b5337f9e4e\n67e2ca633117a4fbd559946ab474356c4183941000000000000000458bf27c6bca01\n1c9ce1930e8984a797a3419797b936629a5a937cf2f11c8b9514b82b993da8a46e66\n4f23db7c01edc87faa530db01c2ee405230b18997f16b682000000000000000bb8e1\nbbcf3c48f62c08db243652ae55d3e5586053fca77102994f23ad95491b3\nK_main = 0x4c59e1ccf2cfb961aa31bd9434478a1089b56cd11542f53d3576fb6c2\na438a29\nK_confirmP = 0x871ae3f7b78445e34438fb284504240239031c39d80ac23eb5ab9\nbe5ad6db58a\nK_confirmV = 0xccd53c7c1fa37b64a462b40db8be101cedcf838950162902054e6\n44b400f1680\nHMAC(K_confirmP, shareV) = 0x926cc713504b9b4d76c9162ded04b5493e89109\nf6d89462cd33adc46fda27527\nHMAC(K_confirmV, shareP) = 0x9747bcc4f8fe9f63defee53ac9b07876d907d55\n047e6ff2def2e7529089d3e68\nK_shared = 0x0c5f8ccd1413423a54f6c1fb26ff01534a87f893779c6e68666d772\nbfd91f3e7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P256-SHA512-HKDF-SHA512-HMAC-SHA512 Test Vectors\n']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0x1cc5207d6e34b8f7828206fb64b86aa9c712bc952abf251bb9f5856b24d8c\n8cc\nw1 = 0x4279649e62532b01dc27d2ed39100ba350518fb969672061a01edce752d0e\n672\nL = 0x043a348ad475d2200d46df876f1eb2e136056da31dafff52cc7762bf3be84d\ne0097c4e69b0b9321326af1f0af4a14561a9c7b640cb5afd6822d14cb34830fc4511\nx = 0xb586ab83f175c1a2b56b6a1b6a283523f88a9befcf11e22efb48e2ee1fe69a\n23\nshareP = 0x04a7928c4b47f6b8657a5b8ebcb6f1bd266192e152fb9745a4180c946\n57a2f323b4d50d536c0325cdb0ec42c9bd8db8d7af3ff6dc85edb4b5365375c62e09\ndef4a\ny = 0xac1fb828f041782d452ea9cc00c3fa34a55fa8f7f98c04be45a3d607b092d4\n41\nshareV = 0x04498c29e37dbd53ebf8db76679901d90c6be3af57f46ac3025b32420\n839f0489c6c3b6bf5ddc8ecbc3d7c83d0891ad814a00ad23eba13197c9d96a5b1027\n5e35d\nZ = 0x04a81e31be54283cee81bf7bdc877764b6b2ac6a399f1176380aac8a82172c\n18051aa17dfcf438896ad253f53b52cd45ec2c7399488a919bcfcfecc0261cbf5284\nV = 0x04de0a53f96cbe4abcd31c1e0a23ea6f169c162dc5a007393c8fcddd2abd5d\n518bb2d9734b1d2dfce3fd916e991ab9dc3a2760d439c083eb39b65408857d2bb4aa\nTT = 0x38000000000000005350414b45322b2d503235362d5348413531322d484b4\n4462d5348413531322d484d41432d534841353132205465737420566563746f72730\n600000000000000636c69656e7406000000000000007365727665724100000000000\n00004886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa12\nf5ff355163e43ce224e0b0e65ff02ac8e5c7be09419c785e0ca547d55a12e2d20410\n000000000000004d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4f9\n8baa1292b4907d60aa6bfade45008a636337f5168c64d9bd36034808cd564490b1e6\n56edbe7410000000000000004a7928c4b47f6b8657a5b8ebcb6f1bd266192e152fb9\n745a4180c94657a2f323b4d50d536c0325cdb0ec42c9bd8db8d7af3ff6dc85edb4b5\n365375c62e09def4a410000000000000004498c29e37dbd53ebf8db76679901d90c6\nbe3af57f46ac3025b32420839f0489c6c3b6bf5ddc8ecbc3d7c83d0891ad814a00ad\n23eba13197c9d96a5b10275e35d410000000000000004a81e31be54283cee81bf7bd\nc877764b6b2ac6a399f1176380aac8a82172c18051aa17dfcf438896ad253f53b52c\nd45ec2c7399488a919bcfcfecc0261cbf5284410000000000000004de0a53f96cbe4\nabcd31c1e0a23ea6f169c162dc5a007393c8fcddd2abd5d518bb2d9734b1d2dfce3f\nd916e991ab9dc3a2760d439c083eb39b65408857d2bb4aa20000000000000001cc52\n07d6e34b8f7828206fb64b86aa9c712bc952abf251bb9f5856b24d8c8cc\nK_main = 0x527613439c279a375c116342a4216a8d92441d2fe1921dd1e60f140b2\n855916ccac7db4dbf22bd56e344a8cd506d08949bde1e9d83c24d68ff4246458dc14\n288\nK_confirmP = 0x0aa129d7b82067c2a9607677c9c4fdedc1cd7cfed9ff72c54c0ae\nbb2b1a8aa915b96834b2986725c6040852ceaafbb17d638a715198f795654eac89bf\n0739878\nK_confirmV = 0xa1f1038de30a8c12d43d06c27d362daa9699249e941faa2d5cbc5\n9a9683bf42aed9537818245677fdb54b5274506542994f4a83455f6d7b3af5ec017f\naa58f61\nHMAC(K_confirmP, shareV) = 0x6b2469b56cf8ac3f94a8d0b533380ea6b3d0f46\nb3e12ee82550d49e129c2412728c9437a64ee5f80c8cdc5e8a30faa0a6deb8a52513\n46ba81bb6fc955b2304fc\nHMAC(K_confirmV, shareP) = 0x154174fc278a935e290b3352ba877e179fa9281\nc0a76928faea703c72d383b267511a5cf084cb07147efece94e3cfd91944e7baab85\n6858fbebc087167b0f409\nK_shared = 0x11887659d9e002f34fa6cc270d33570f001b2a3fc0522b643c07327\nd09a4a9f47aab85813d13c585b53adf5ac9de5707114848f3dc31a4045f69a2cc197\n2b098",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P384-SHA256-HKDF-SHA256-HMAC-SHA256 Test Vectors\n']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0x097a61cbb1cee72bb654be96d80f46e0e3531151003903b572fc193f23377\n2c23c22228884a0d5447d0ab49a656ce1d2\nw1 = 0x18772816140e6c3c3938a693c600b2191118a34c7956e1f1cd5b0d519b56e\na5858060966cfaf27679c9182129949e74f\nL = 0x04f27dd5384d6b9beb4c5022c94b1978d632779e1d3abe458611e734a529d0\n04e25053398e5dc9eeaa4ffa59743ca7ddbc0e7ce69155295cb2b846da83ee6a4449\n0dd8e96bb0b0f6645281bfd978dd5f6836561ea0d8b2c045ff04cef2e5873d2c\nx = 0x2f1bdbeda162ff2beba0293d3cd3ae95f663c53663378c7e18ee8f56a4a48b\n00d31ce0ef43606548da485058f12e8e73\nshareP = 0x049fb0404ca7ce71fb85d3aaa8fd05fa054affac996135bc245149be0\n9571e43e2bf76e00d6d52ac452b8224f6b9da31420a4f5e214b377546daad4d61da5\nca0cfdea59a5a92ebdb6b42da5d14663b8d1f9eb97050139ab89788e0ada27b048fc\nf\ny = 0xbbcaf02404a16ed4fa73b183f703a8d969386f3d34f5e98b3a904e760512f1\n1757f07dfcf87a2ada8fc6d028445bd53e\nshareV = 0x0493b1c1f6a30eac4ac4a15711e44640bae3576787627ee2541104298\n1e94b2e9604b9374f66bb247bc431759212ef3fa0a20c087863b89efb32219e1337c\ne94be2175f8cb9fd50cf0b84772717fd063c52b69de1229a01ab840b55993287f32e\nd\nZ = 0x048cd880e5147e49b42b5754c1bc6d2091ad414789bc3b030f2d787ea480f3\ne35d0fa0d02d0dd06fee7f242b702a2d984efd79c76d99ab35b99e359a205cea56bb\na8dd8f995c101a69a5157686d1cf6a7288d7cff2f2a9748db99b24f646ea7b37\nV = 0x041c3c9cc38b03a06a49cf17cc5e7754cf1ccbbc6fffc0ddf1a6e23f57294a\n25d96f7da5ce4ac0a617c78502f2f235a5fcf2f76a62385434ed2b6e95521b41eff3\nc4ce93ecf8fb32005dd76335d0a7c78153257288d7fde1a22d404f5d73d068e2\nTT = 0x38000000000000005350414b45322b2d503338342d5348413235362d484b4\n4462d5348413235362d484d41432d534841323536205465737420566563746f72730\n600000000000000636c69656e7406000000000000007365727665726100000000000\n000040ff0895ae5ebf6187080a82d82b42e2765e3b2f8749c7e05eba366434b363d3\ndc36f15314739074d2eb8613fceec285397592c55797cdd77c0715cb7df2150220a0\n119866486af4234f390aad1f6addde5930909adc67a1fc0c99ba3d52dc5dd6100000\n00000000004c72cf2e390853a1c1c4ad816a62fd15824f56078918f43f922ca21518\nf9c543bb252c5490214cf9aa3f0baab4b665c10c38b7d7f4e7f320317cd717315a79\n7c7e02933aef68b364cbf84ebc619bedbe21ff5c69ea0f1fed5d7e3200418073f406\n100000000000000049fb0404ca7ce71fb85d3aaa8fd05fa054affac996135bc24514\n9be09571e43e2bf76e00d6d52ac452b8224f6b9da31420a4f5e214b377546daad4d6\n1da5ca0cfdea59a5a92ebdb6b42da5d14663b8d1f9eb97050139ab89788e0ada27b0\n48fcf61000000000000000493b1c1f6a30eac4ac4a15711e44640bae3576787627ee\n25411042981e94b2e9604b9374f66bb247bc431759212ef3fa0a20c087863b89efb3\n2219e1337ce94be2175f8cb9fd50cf0b84772717fd063c52b69de1229a01ab840b55\n993287f32ed6100000000000000048cd880e5147e49b42b5754c1bc6d2091ad41478\n9bc3b030f2d787ea480f3e35d0fa0d02d0dd06fee7f242b702a2d984efd79c76d99a\nb35b99e359a205cea56bba8dd8f995c101a69a5157686d1cf6a7288d7cff2f2a9748\ndb99b24f646ea7b376100000000000000041c3c9cc38b03a06a49cf17cc5e7754cf1\nccbbc6fffc0ddf1a6e23f57294a25d96f7da5ce4ac0a617c78502f2f235a5fcf2f76\na62385434ed2b6e95521b41eff3c4ce93ecf8fb32005dd76335d0a7c78153257288d\n7fde1a22d404f5d73d068e23000000000000000097a61cbb1cee72bb654be96d80f4\n6e0e3531151003903b572fc193f233772c23c22228884a0d5447d0ab49a656ce1d2\nK_main = 0x61370f8bf65e0df7e9a7b2c2289be1ee4b5dd6c21f4b85165730700c4\n4ce30af\nK_confirmP = 0x2c8940419d94e53d5d240801e702c4658531aa7a9f14ec75f0d67\nf12fa84196c\nK_confirmV = 0x8e74afe16c53a44590ad6bf43aa89324978b8f20014336675f618\n387f99f3fdc\nHMAC(K_confirmP, shareV) = 0x7ae825e242a5a1f86ad7db172c2c12fcb458b6a\n2b1ddfc96b2b7cfd2eed5f7ab\nHMAC(K_confirmV, shareP) = 0x1581062167d6a3d14493447cd170d408f6fdc58\ne31225438db86214167426a7a\nK_shared = 0x99758e838ae1a856589689fb55b6befe4e2382e6ebbeca1a6232a68\nf9dc04c1a",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P384-SHA512-HKDF-SHA512-HMAC-SHA512 Test Vectors\n']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0xb8d44a0982b88abe19b724d4bdafba8c90dc93130e0bf4f8062810992326d\na126fd01db53e40250ca33a3ff302044cb0\nw1 = 0x2373e2071c3bb2a6d53ece57830d56f8080189816803c22375d6a4a514f9d\n161b64d0f05b97735b98b348f9b33cc2e30\nL = 0x049ca7217ff6456bb2e2bcf71b31d9b1e5ed6e0c9700936ae617e990cee87e\ne1ce3a03629dd5532948c39b89f38b39f13c7f513c5b1ada00f6533a4a8b02b9cd04\ne1b2a5db1f24ec5fe959198a19666037e04b768cc02e75ac9da0048736db6e5b\nx = 0x5a835d52714f30d2ef539268b89df9558628400063dfa0e41eb979066f4caf\n409bbf7aab3ddddea13f1b070a1827d3d4\nshareP = 0x042f382eef464a2c9aecfdf4b81d25c4de2de113ba67405ce336c762c\n69217ae7e27bda875144140d7536c4cc08b9b4dace5f872a6a2ed57f34042688ad3c\n5d446c187dc0caf9cea812df3a4dd6fdbc64b9d7d7d7ff4bf6965abb06eeb108d55e\ne\ny = 0xc883ee5b08cf7ba122038c279459ab1a730f85f2d624a02732d519faab56a4\n98e773a8dec6c447ed02d5c00303a18bc4\nshareV = 0x04d72e11eee332305062454c0a058b8103a3304785d445510cd8d101e\n9cb44cfb159cb7b72123abaf719ab1c42e0558c84c14b0886e8b446e4c880bff2f4b\n291fafafc748cb4115824e66732bdeba7fae176388e228ab9d7546255994ca3fb5a5\n2\nZ = 0x043cb63f5fcb573cf3e2ee40bca5fbc1f00ff2554caab3790329184c45ed69\nc39b2e1323bc13c8f821b844feb5921b1470e7b3f70bd10508e5de6db157305badf8\n20fa28d68742d8287fb201383a8deec70d5bcf2a61498a481290ed8cc94ab3a0\nV = 0x0468604d188f4da560ddaaece126abe40f5de255f8af093c7c3aff71f95d90\n92804426127d73d46a817085e9095de6bcf30733a5124a98f567148efe92a7134994\n0c7244623247d33a8b78cbc9a53cd45bb22430f318a635084d1840c905f236c8\nTT = 0x38000000000000005350414b45322b2d503338342d5348413531322d484b4\n4462d5348413531322d484d41432d534841353132205465737420566563746f72730\n600000000000000636c69656e7406000000000000007365727665726100000000000\n000040ff0895ae5ebf6187080a82d82b42e2765e3b2f8749c7e05eba366434b363d3\ndc36f15314739074d2eb8613fceec285397592c55797cdd77c0715cb7df2150220a0\n119866486af4234f390aad1f6addde5930909adc67a1fc0c99ba3d52dc5dd6100000\n00000000004c72cf2e390853a1c1c4ad816a62fd15824f56078918f43f922ca21518\nf9c543bb252c5490214cf9aa3f0baab4b665c10c38b7d7f4e7f320317cd717315a79\n7c7e02933aef68b364cbf84ebc619bedbe21ff5c69ea0f1fed5d7e3200418073f406\n100000000000000042f382eef464a2c9aecfdf4b81d25c4de2de113ba67405ce336c\n762c69217ae7e27bda875144140d7536c4cc08b9b4dace5f872a6a2ed57f34042688\nad3c5d446c187dc0caf9cea812df3a4dd6fdbc64b9d7d7d7ff4bf6965abb06eeb108\nd55ee610000000000000004d72e11eee332305062454c0a058b8103a3304785d4455\n10cd8d101e9cb44cfb159cb7b72123abaf719ab1c42e0558c84c14b0886e8b446e4c\n880bff2f4b291fafafc748cb4115824e66732bdeba7fae176388e228ab9d75462559\n94ca3fb5a526100000000000000043cb63f5fcb573cf3e2ee40bca5fbc1f00ff2554\ncaab3790329184c45ed69c39b2e1323bc13c8f821b844feb5921b1470e7b3f70bd10\n508e5de6db157305badf820fa28d68742d8287fb201383a8deec70d5bcf2a61498a4\n81290ed8cc94ab3a061000000000000000468604d188f4da560ddaaece126abe40f5\nde255f8af093c7c3aff71f95d9092804426127d73d46a817085e9095de6bcf30733a\n5124a98f567148efe92a71349940c7244623247d33a8b78cbc9a53cd45bb22430f31\n8a635084d1840c905f236c83000000000000000b8d44a0982b88abe19b724d4bdafb\na8c90dc93130e0bf4f8062810992326da126fd01db53e40250ca33a3ff302044cb0\nK_main = 0x571af2e9a0bf4b354cca18d713f8a84315a46c999ceb92ca6a88b8a6d\n615795140862dbccd6fdc0abecc5956c43f8ab40343a22fc1b91752cb7c2737dab90\n41e\nK_confirmP = 0x6c8c7fc6becf3bc07f081b4f7f867bec76fd8eeddbd7968356723\nbae701e04f35f800e647dfa013b2876958efe0ce68e7595ba46f1de0b17adfc02dfe\n3f18a18\nK_confirmV = 0x2d0c9702a0f5536bacddd596eb6ea365d17f176db30081b97b83e\n05bb87e9a36c0565b7616251c93bc76c76fc5c3531a28db40779d986d4e7b71a24c4\n3fbc731\nHMAC(K_confirmP, shareV) = 0x7f806ae56ea3e49a8b16ffee528086489418913\n641f529d50ff92aa456ad4648e522f9540b403bff6bd94ee1adc95c7d1b2666f7ba6\nf9c10748bc7bfb4181d27\nHMAC(K_confirmV, shareP) = 0x8daa262decb79cceda4421f4f8dacf22ec027c0\n8e036f071beea563c8e00813a29807963ff9d7d6bbff48dd5bdcdd9ca9fd7ffc272b\n162258d981913f7253dcb\nK_shared = 0x31e0075a823b9269af5769d71ef3b2f5001cbfe044584fe8551124a\n217dad078415630bf3eda16b5a38341d418a6d72b3960f818a0926f0de88784b59d6\na694b",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P521-SHA512-HKDF-SHA512-HMAC-SHA512 Test Vectors\n']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0x009c79bcd7656716314fca5a6e2c5cda7ef86131399438e012a043051e863\nf60b5aeb3c101731e1505e721580f48535a9b0456b231b9266ae6fff49ee90d25f72\nf5f\nw1 = 0x01632c15f51fcd916cd79e19075f8a69b72b0099922ad62ff8d540b469569\nf0aa027047aed2b3f242ea0ac4288b4e4db6a4e5946d8ad32b42192c5aa66d9ef8e1\nb33\nL = 0x040135072d0fa36f9e80031294cef5c3c35b882a0efa2c66570d64a49f8bec\n6c66435bf65bb7c7b2a3e7dece491e02b4d567e7087dbc32fe0fae8af417dcb50be6\nd704012a194588b690e6d3db492656f72ddea01fc1c7fcec0f5d34a5af0102939f6f\ndeae39c20cff74fcdb7f09855f0fc9520d20b0520b0b096b8d42c7c3d68b4a66f751\nx = 0x00b69e3bb15df82c9fa0057461334e2c66ab92fc9b8d3662eec81216ef5ddc\n4a43f19e90dedaa2d72502f69673a115984ffcf88e03a9364b07102114c5602cd93c\n69\nshareP = 0x0400a14431edf6852ff5fe868f8683e16e9e0a45d9e27f9a96442285a\nc6b161fc0bf267362a5ffb06f9cbd14b7a37e492146d77cae4c77812df00a91dbae0\n9e27e1fac00ae019317ef9768548325bca35ce258e6206fe03c6338b2eb889d09d9f\n11400a36cf6328a7e1f81c6c7a2af7ff1d9b5210768318f27e57b75b39b9fbfc7b37\na60ab\ny = 0x0056d01c5246fbde964c0493934b7ece89eafd943eb27d357880a2a2202249\n9e249528c5707b1afe8794c8a1d60ceedaeed96dd0dd904ea075f096c9fec5da7de4\n96\nshareV = 0x0401aa5af0f3027f63b7170572db5ff06dd1f3d6ea8ea771b26b434fb\nbc6c9de7d80975131c9c2e94d30c0ed2d62449c4c1b7e95037a85ed7598e415a2591\n26365e89500d0f2156b551b70416d719944736990f346f6f9ba4fbaf2f63e0987369\n0bcf730582e0a7b03ffede50f5787b631d5021a94287f0a29a081b62b9f5a3bf393b\n001b3\nZ = 0x0401e3015bf2811891a518d342c63541294dc80e0ee210e8220a5b9cab010d\n77945724ef1185d739a62847fdada9da9b1bca6b9fa173fa551185c6084c3db26d3a\nf0ac01f9356d01beebebd5ff026ca19f9df5d614355f3498816ac20b63bc936eed82\n8a7039d1e17dba740471d9afc0e0b4427d65b2d27a57a87e42300004e2b4620c23c9\nV = 0x0401058b21ca71e4439281579d6df3b86ae874d70742fe8eae2de60e77e07e\n6e1c31b9c277de36b38531f5b769e9e4030ba09258f510c83c5c21957610355ce920\n1fe600672db35efd1d0903bc285d4e27e9fb4472c30f17118dfa028f182bc9361c6a\n749f560e31b9c404624d24e68010f064101d4a1154e77be8f2105dbeb8b0349adb0e\nTT = 0x38000000000000005350414b45322b2d503532312d5348413531322d484b4\n4462d5348413531322d484d41432d534841353132205465737420566563746f72730\n600000000000000636c69656e7406000000000000007365727665728500000000000\n00004003f06f38131b2ba2600791e82488e8d20ab889af753a41806c5db18d37d856\n08cfae06b82e4a72cd744c719193562a653ea1f119eef9356907edc9b56979962d7a\na01bdd179a3d547610892e9b96dea1eab10bdd7ac5ae0cf75aa0f853bfd185cf782f\n894301998b11d1898ede2701dca37a2bb50b4f519c3d89a7d054b51fb84912192850\n00000000000000400c7924b9ec017f3094562894336a53c50167ba8c596387688054\n2bc669e494b2532d76c5b53dfb349fdf69154b9e0048c58a42e8ed04cef052a3bc34\n9d95575cd2501c62bee650c9287a651bb75c7f39a2006873347b769840d261d17760\nb107e29f091d556a82a2e4cde0c40b84b95b878db2489ef760206424b3fe7968aa8e\n0b1f33485000000000000000400a14431edf6852ff5fe868f8683e16e9e0a45d9e27\nf9a96442285ac6b161fc0bf267362a5ffb06f9cbd14b7a37e492146d77cae4c77812\ndf00a91dbae09e27e1fac00ae019317ef9768548325bca35ce258e6206fe03c6338b\n2eb889d09d9f11400a36cf6328a7e1f81c6c7a2af7ff1d9b5210768318f27e57b75b\n39b9fbfc7b37a60ab85000000000000000401aa5af0f3027f63b7170572db5ff06dd\n1f3d6ea8ea771b26b434fbbc6c9de7d80975131c9c2e94d30c0ed2d62449c4c1b7e9\n5037a85ed7598e415a259126365e89500d0f2156b551b70416d719944736990f346f\n6f9ba4fbaf2f63e09873690bcf730582e0a7b03ffede50f5787b631d5021a94287f0\na29a081b62b9f5a3bf393b001b385000000000000000401e3015bf2811891a518d34\n2c63541294dc80e0ee210e8220a5b9cab010d77945724ef1185d739a62847fdada9d\na9b1bca6b9fa173fa551185c6084c3db26d3af0ac01f9356d01beebebd5ff026ca19\nf9df5d614355f3498816ac20b63bc936eed828a7039d1e17dba740471d9afc0e0b44\n27d65b2d27a57a87e42300004e2b4620c23c985000000000000000401058b21ca71e\n4439281579d6df3b86ae874d70742fe8eae2de60e77e07e6e1c31b9c277de36b3853\n1f5b769e9e4030ba09258f510c83c5c21957610355ce9201fe600672db35efd1d090\n3bc285d4e27e9fb4472c30f17118dfa028f182bc9361c6a749f560e31b9c404624d2\n4e68010f064101d4a1154e77be8f2105dbeb8b0349adb0e4200000000000000009c7\n9bcd7656716314fca5a6e2c5cda7ef86131399438e012a043051e863f60b5aeb3c10\n1731e1505e721580f48535a9b0456b231b9266ae6fff49ee90d25f72f5f\nK_main = 0xf672a73216568d20cc3433247bc43a3b875a421cbdba76cf1db8bfe57\n2b658bf3f7a4ef8cc9ff1f6a2827ff7b19860454b775a4097009040f3b36b7420407\n16e\nK_confirmP = 0xa211c60ea8d4b3b294bd6ca9515663b77f3caac28af3658b34fe1\n512f25077f2f64b8de426caa662b4cbbdc9c2f8f12347993c8d57fdf68c177732d7d\nda7277b\nK_confirmV = 0x0e9bf6b9a37339144cb32a78a872f50b10839f81eda6c09a827dd\nbb158c47162bec274af920cdf809f162b98fa701efebada26cdfbeac408b5a35b052\nd18f0c6\nHMAC(K_confirmP, shareV) = 0xf0f5c903dfa42fe367659656a26058cd984b76a\n8e91ae4d0fa4c13db149008e2ae57713fb230a627761174fefd263b9c10e9a4b6a37\n46cde59c5943040c17133\nHMAC(K_confirmV, shareP) = 0xa8f7ab43f3a800171d3a3fb26d742e1ed236c2d\n5804ecd328f220a7d245cd2e3bfb6c0526983bff9229c94f70fe64ba9bb5a4d0dc10\nafcda64a4c96d4c3d81ad\nK_shared = 0xd1c170e4e55efacb9db8abad286293ebd1dcf24f13973427b9632bb\nc323e42e447afca2aa7f74f2af3fb5f51684ec543db854b7002cde6799c330b032ba\n8820a",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P256-SHA256-HKDF-SHA256-CMAC-AES-128 Test Vector\ns']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0x9aad90c603cf16cec4ee40d81acd7a865130b28cc6d0664ae2e0f406aa47e\nd61\nw1 = 0x872be859cec1e78d191882bd9c2f032af018a25016813788fe8954bfffc58\nc8e\nL = 0x04d79a53698c5dd79e14b426e73b4a7f1b42469815fe24e8f53ce01579e902\neb198d59f05bc451c41826b88e3db5476a69e197fdf474c75b387f6d40361c3fda35\nx = 0x9d39a3511a007a7d3fe6af5555cf60301bcda503f2bf6634b2caf9e4fd0743\na1\nshareP = 0x04788218027ba4b17f7279ef0aef47a8733cf88b5bf65d6127ecadc78\nb8a0f65b9001f7e54719fb63c072ddd1e1a4adfb376dde37ba1aa2082362b6c2ca14\na8e53\ny = 0x9c3219841626325c68d89c22fb6c55611e3136442daa8b9b784db7242afff3\ned\nshareV = 0x04c05953ea9d1cd6248b8c61becd7d55e46237526d8b1e23495ea7566\nb7f6bc24b3da1cfb2e88a975fcfb5dc4e72b5cbea509b1cfdd1ef8f8195fa8bf2bd5\nca1e5\nZ = 0x049444a17ad5909548a084fa182275a89a496ec6669bd08892aa9c64a512d4\n0212147e6005bf1d510e3bbcfee8efc38243acaf4c5f2decffa009341b1e330b0442\nV = 0x0457a8919af393e2da1de209a01fdda275eab0a682d8931b0e6ee1b9339794\n63a25ccbcda1956a6a555706f0b062aa880617bd219d09391ad8576d3a73e9233f57\nTT = 0x39000000000000005350414b45322b2d503235362d5348413235362d484b4\n4462d5348413235362d434d41432d4145532d313238205465737420566563746f727\n30600000000000000636c69656e74060000000000000073657276657241000000000\n0000004886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa\n12f5ff355163e43ce224e0b0e65ff02ac8e5c7be09419c785e0ca547d55a12e2d204\n10000000000000004d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4\nf98baa1292b4907d60aa6bfade45008a636337f5168c64d9bd36034808cd564490b1\ne656edbe7410000000000000004788218027ba4b17f7279ef0aef47a8733cf88b5bf\n65d6127ecadc78b8a0f65b9001f7e54719fb63c072ddd1e1a4adfb376dde37ba1aa2\n082362b6c2ca14a8e53410000000000000004c05953ea9d1cd6248b8c61becd7d55e\n46237526d8b1e23495ea7566b7f6bc24b3da1cfb2e88a975fcfb5dc4e72b5cbea509\nb1cfdd1ef8f8195fa8bf2bd5ca1e54100000000000000049444a17ad5909548a084f\na182275a89a496ec6669bd08892aa9c64a512d40212147e6005bf1d510e3bbcfee8e\nfc38243acaf4c5f2decffa009341b1e330b044241000000000000000457a8919af39\n3e2da1de209a01fdda275eab0a682d8931b0e6ee1b933979463a25ccbcda1956a6a5\n55706f0b062aa880617bd219d09391ad8576d3a73e9233f5720000000000000009aa\nd90c603cf16cec4ee40d81acd7a865130b28cc6d0664ae2e0f406aa47ed61\nK_main = 0x6002da6b2740056f2836ac0316ae9e02e2b24c5c109883136e90ed868\nb2fcf62\nK_confirmP = 0x857d0db7f5e06385853bf4b8abd43b5a\nK_confirmV = 0x268c75933332157118063550c6bfe846\nCMAC(K_confirmP, shareV) = 0xd340bc94a03feafd14491e316514ca5f\nCMAC(K_confirmV, shareP) = 0x2b42d0fe76bcf9ccc208d06d60082f96\nK_shared = 0xe832094adfc028bf288e49ab902fc208b7eeff084f259da7613c047\n9869d4fc9",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[Context=b'SPAKE2+-P256-SHA512-HKDF-SHA512-CMAC-AES-128 Test Vector\ns']\n[idProver=b'client']\n[idVerifier=b'server']\nw0 = 0x56e0299ac95739b616a973276c1338e3651285345dde2f7faf74c25c0b50e\nb90\nw1 = 0x462fe5b522a17d3d35b27323113bdd252de9cbfdd6f264b35721bf59a9a74\nf0b\nL = 0x040540332ffec8a2faa8d17ae6da5973c11e078b8c10c89fd6af996726b802\n3513eff2914c3ced64fbedd4e261438fb0ea6ef9fc1faef4ba1ead780636faac1bc1\nx = 0x254dd22780eeb6af2464dd6a2bd026b46a34966d6933607f1be956314f74b0\nea\nshareP = 0x049661cfdb0f7bd24b637f8d1d0f464c17f0b9c15129ea31156dcc581\nda6c840240b275d72f28ea73a5c088c99d73896af24a5ae26e036eb2dedaf26e511a\n24a48\ny = 0x695beec24305fbd5660bc200228598e7c891fdf60a55df4bdd3a57debc3847\n4a\nshareV = 0x0461f580eb3eb4b2f412d5c07491f360ad6e4492d8f23e346f0ba999f\nbbcb9715a3c2485c3b250a6672e6698da3c9a9725645f607ee90a9b1b34fd44b9df6\ne551a\nZ = 0x0406f77a4bca254219dc3eeca9989f377037407105540bfddc5bdeff3d27a8\n7d68442e69d543a000077bd4c42e33930f890d29fb4be5e8dcc627f6811ace96c274\nV = 0x0442952a531a2937e03808e74f6d65afbedb4cfb7fcf91991498f77db21b14\n6f5c2249e727e374de03f32848465aba5c5ebfe6501d3537d09160c7f42e4b3f133d\nTT = 0x39000000000000005350414b45322b2d503235362d5348413531322d484b4\n4462d5348413531322d434d41432d4145532d313238205465737420566563746f727\n30600000000000000636c69656e74060000000000000073657276657241000000000\n0000004886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa\n12f5ff355163e43ce224e0b0e65ff02ac8e5c7be09419c785e0ca547d55a12e2d204\n10000000000000004d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4\nf98baa1292b4907d60aa6bfade45008a636337f5168c64d9bd36034808cd564490b1\ne656edbe74100000000000000049661cfdb0f7bd24b637f8d1d0f464c17f0b9c1512\n9ea31156dcc581da6c840240b275d72f28ea73a5c088c99d73896af24a5ae26e036e\nb2dedaf26e511a24a4841000000000000000461f580eb3eb4b2f412d5c07491f360a\nd6e4492d8f23e346f0ba999fbbcb9715a3c2485c3b250a6672e6698da3c9a9725645\nf607ee90a9b1b34fd44b9df6e551a41000000000000000406f77a4bca254219dc3ee\nca9989f377037407105540bfddc5bdeff3d27a87d68442e69d543a000077bd4c42e3\n3930f890d29fb4be5e8dcc627f6811ace96c27441000000000000000442952a531a2\n937e03808e74f6d65afbedb4cfb7fcf91991498f77db21b146f5c2249e727e374de0\n3f32848465aba5c5ebfe6501d3537d09160c7f42e4b3f133d200000000000000056e\n0299ac95739b616a973276c1338e3651285345dde2f7faf74c25c0b50eb90\nK_main = 0x111790ae23de3fc5bb43bdc1f63106461dbd8d86360adf056bf117164\n8bfb231503853db2625275b7136b5a823dd5a94482514fce7f791c4daca2b21c7bde\n756\nK_confirmP = 0xb234d2e152a03168b76c6474d5322070\nK_confirmV = 0x683d62024626fe0c5126ef4df58b88ee\nCMAC(K_confirmP, shareV) = 0x0dc514d262e37470eb43e058e0d615f4\nCMAC(K_confirmV, shareP) = 0xde076589efcd5d96c2ea6061d96772d9\nK_shared = 0x488a34663d6be5e02590bb8e9ad9ad3e0f580dec41e8b99ed4ae4b7\n34da49287638cac4c9f17fe3c3ae18dda0d6d7f14c17e4640d5a2aaab959efa0cbea\n4e546",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "section_title": true,
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Thanks to Ben Kaduk and Watson Ladd, from whom this specification originally emanated.",
      "ja": "この仕様が元々発せられたベン・カドゥクとワトソン・ラッドのおかげで。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "section_title": true,
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Tim Taubert\nApple Inc.\nOne Apple Park Way\nCupertino, California 95014\nUnited States of America\nEmail: ttaubert@apple.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Christopher A. Wood\nEmail: caw@heapingbits.net",
      "raw": true,
      "ja": ""
    }
  ]
}