{
  "title": {
    "text": "RFC 9669 - BPF Instruction Set Architecture (ISA)",
    "ja": "RFC 9669 - BPF命令セットアーキテクチャ（ISA）"
  },
  "number": 9669,
  "created_at": "2024-11-04 23:24:37.333144+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                    D. Thaler, Ed.\nRequest for Comments: 9669                                  October 2024\nCategory: Standards Track                                               \nISSN: 2070-1721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "BPF Instruction Set Architecture (ISA)",
      "section_title": true,
      "ja": "BPF命令セットアーキテクチャ（ISA）"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "section_title": true,
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "eBPF (which is no longer an acronym for anything), also commonly referred to as BPF, is a technology with origins in the Linux kernel that can run untrusted programs in a privileged context such as an operating system kernel. This document specifies the BPF instruction set architecture (ISA).",
      "ja": "EBPF（これはもはや何かの頭字語ではありません）は、一般的にBPFとも呼ばれますが、オペレーティングシステムカーネルなどの特権的なコンテキストで信頼できないプログラムを実行できるLinuxカーネルの起源を持つテクノロジーです。このドキュメントは、BPF命令セットアーキテクチャ（ISA）を指定します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "section_title": true,
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準トラックドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティのコンセンサスを表しています。公開レビューを受けており、インターネットエンジニアリングステアリンググループ（IESG）からの出版が承認されています。インターネット標準の詳細については、RFC 7841のセクション2で入手できます。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9669.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、https://www.rfc-editor.org/info/rfc9669で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "section_title": true,
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2024 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2024 IETF Trustおよび文書著者として特定された人。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Revised BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Revised BSD License.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（https://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、セクション4.Eで説明されている法的規定のセクション4.Eで説明されており、改訂されたBSDライセンスで説明されている保証なしで提供されるように、改訂されたBSDライセンステキストを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "section_title": true,
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n2.  Documentation Conventions\n  2.1.  Types\n  2.2.  Functions\n  2.3.  Definitions\n  2.4.  Conformance Groups\n3.  Instruction Encoding\n  3.1.  Basic Instruction Encoding\n  3.2.  Wide Instruction Encoding\n  3.3.  Instruction Classes\n4.  Arithmetic and Jump Instructions\n  4.1.  Arithmetic Instructions\n  4.2.  Byte Swap Instructions\n  4.3.  Jump Instructions\n    4.3.1.  Helper Functions\n    4.3.2.  Program-Local Functions\n5.  Load and Store Instructions\n  5.1.  Regular Load and Store Operations\n  5.2.  Sign-Extension Load Operations\n  5.3.  Atomic Operations\n  5.4.  64-bit Immediate Instructions\n    5.4.1.  Maps\n    5.4.2.  Platform Variables\n  5.5.  Legacy BPF Packet Access Instructions\n6.  Security Considerations\n7.  IANA Considerations\n  7.1.  BPF Instruction Conformance Groups Registry\n    7.1.1.  BPF Instruction Conformance Groups Registration\n            Template\n  7.2.  BPF Instruction Set Registry\n    7.2.1.  BPF Instruction Registration Template\n  7.3.  Adding Instructions\n  7.4.  Deprecating Instructions\n  7.5.  Change Control\n  7.6.  Expert Review Instructions\n8.  References\n  8.1.  Normative References\n  8.2.  Informative References\nAppendix A.  Initial BPF Instruction Set Values\nAcknowledgements\nAuthor's Address",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "eBPF, also commonly referred to as BPF, is a technology with origins in the Linux kernel that can run untrusted programs in a privileged context such as an operating system kernel. This document specifies the BPF instruction set architecture (ISA).",
      "ja": "EBPFは、一般にBPFとも呼ばれ、Linuxカーネルに起源を持つテクノロジーであり、オペレーティングシステムカーネルなどの特権的なコンテキストで信頼できないプログラムを実行できます。このドキュメントは、BPF命令セットアーキテクチャ（ISA）を指定します。"
    },
    {
      "indent": 3,
      "text": "As a historical note, BPF originally stood for Berkeley Packet Filter, but now that it can do so much more than packet filtering, the acronym no longer makes sense. BPF is now considered a standalone term that does not stand for anything. The original BPF is sometimes referred to as cBPF (classic BPF) to distinguish it from the now widely deployed eBPF (extended BPF).",
      "ja": "歴史的なメモとして、BPFはもともとバークレーパケットフィルター用に立っていましたが、パケットフィルタリングよりもはるかに多くのことができるので、頭字語は意味がありません。BPFは現在、何にも耐えられないスタンドアロン用語と見なされています。元のBPFは、現在広く展開されているEBPF（拡張BPF）と区別するために、CBPF（クラシックBPF）と呼ばれることがあります。"
    },
    {
      "indent": 0,
      "text": "2. Documentation Conventions",
      "section_title": true,
      "ja": "2. ドキュメンテーション規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "「必須」、「必要」、「必須」、「shall」、「shall」、「suff」、 \"not\"、 \"becommended\"、 \"becommented\"、 \"may\"、 \"optional「このドキュメントでは、BCP 14 [RFC2119] [RFC8174]で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "For brevity and consistency, this document refers to families of types using a shorthand syntax and refers to several expository, mnemonic functions when describing the semantics of instructions. The range of valid values for those types and the semantics of those functions are defined in the following subsections.",
      "ja": "簡潔さと一貫性のために、このドキュメントは、速記の構文を使用してタイプのファミリーを指し、指示のセマンティクスを説明する際のいくつかの説明的なニーモニック関数を指します。これらのタイプの有効な値の範囲とそれらの関数のセマンティクスは、次のサブセクションで定義されています。"
    },
    {
      "indent": 0,
      "text": "2.1. Types",
      "section_title": true,
      "ja": "2.1. 種類"
    },
    {
      "indent": 3,
      "text": "This document refers to integer types with the notation SN to specify a type's signedness (S) and bit width (N), respectively.",
      "ja": "このドキュメントでは、それぞれ型の署名（s）とビット幅（n）を指定するために、表記SNを使用した整数タイプを指します。"
    },
    {
      "indent": 31,
      "text": "+===+==========+\n| S | Meaning  |\n+===+==========+\n| u | unsigned |\n+---+----------+\n| s | signed   |\n+---+----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 29,
      "text": "Table 1: Meaning of Signedness Notation",
      "ja": "表1：署名表記の意味"
    },
    {
      "indent": 29,
      "text": "+=====+===========+\n| N   | Bit Width |\n+=====+===========+\n| 8   | 8 bits    |\n+-----+-----------+\n| 16  | 16 bits   |\n+-----+-----------+\n| 32  | 32 bits   |\n+-----+-----------+\n| 64  | 64 bits   |\n+-----+-----------+\n| 128 | 128 bits  |\n+-----+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 29,
      "text": "Table 2: Meaning of Bit-Width Notation",
      "ja": "表2：ビット幅表記の意味"
    },
    {
      "indent": 3,
      "text": "For example, _u32_ is a type whose valid values are all the 32-bit unsigned numbers and _s16_ is a type whose valid values are all the 16-bit signed numbers.",
      "ja": "たとえば、_U32_は、有効な値がすべて32ビットの符号なし数字であり、_S16_が有効な値がすべて16ビットの署名された数字であるタイプです。"
    },
    {
      "indent": 0,
      "text": "2.2. Functions",
      "section_title": true,
      "ja": "2.2. 関数"
    },
    {
      "indent": 3,
      "text": "The following byte swap functions are direction agnostic. That is, the same function is used for conversion in either direction discussed below.",
      "ja": "次のバイトスワップ関数は、方向不可知論です。つまり、同じ関数が以下で説明するどちらの方向でも変換に使用されます。"
    },
    {
      "indent": 6,
      "text": "* be16: Takes an unsigned 16-bit number and converts it between host byte order and big-endian byte order [IEN137].",
      "ja": "* BE16：署名されていない16ビット番号を取得し、ホストバイトの順序とビッグエンディアンバイト順序[IEN137]の間で変換します。"
    },
    {
      "indent": 6,
      "text": "* be32: Takes an unsigned 32-bit number and converts it between host byte order and big-endian byte order.",
      "ja": "* BE32：署名されていない32ビット番号を取得し、ホストバイトの順序とビッグエンディアンバイトの順序の間に変換します。"
    },
    {
      "indent": 6,
      "text": "* be64: Takes an unsigned 64-bit number and converts it between host byte order and big-endian byte order.",
      "ja": "* be64：署名のない64ビット番号を取得し、ホストバイトの順序とビッグエンディアンバイトの順序の間に変換します。"
    },
    {
      "indent": 6,
      "text": "* bswap16: Takes an unsigned 16-bit number in either big- or little-endian format and returns the equivalent number with the same bit width but opposite endianness.",
      "ja": "* BSWAP16：ビッグエンディアン形式またはリトルエンディアンのいずれかで署名されていない16ビット数を取得し、同じビット幅で同等の数字を返しますが、反対側のエンディアンです。"
    },
    {
      "indent": 6,
      "text": "* bswap32: Takes an unsigned 32-bit number in either big- or little-endian format and returns the equivalent number with the same bit width but opposite endianness.",
      "ja": "* BSWAP32：ビッグエンディアン形式またはリトルエンディアンのいずれかで署名されていない32ビット数を取得し、同じビット幅で同等の数値を返しますが、反対側のエンディアンです。"
    },
    {
      "indent": 6,
      "text": "* bswap64: Takes an unsigned 64-bit number in either big- or little-endian format and returns the equivalent number with the same bit width but opposite endianness.",
      "ja": "* BSWAP64：ビッグエンディアンのいずれかで署名されていない64ビット数を取得し、同じビット幅で同等の数値を返しますが、端反対です。"
    },
    {
      "indent": 6,
      "text": "* le16: Takes an unsigned 16-bit number and converts it between host byte order and little-endian byte order.",
      "ja": "* LE16：署名されていない16ビット番号を取得し、ホストバイトの順序とリトルエンディアンバイトの順序の間に変換します。"
    },
    {
      "indent": 6,
      "text": "* le32: Takes an unsigned 32-bit number and converts it between host byte order and little-endian byte order.",
      "ja": "* LE32：署名されていない32ビット番号を取得し、ホストバイトの順序とリトルエンディアンバイト順序の間に変換します。"
    },
    {
      "indent": 6,
      "text": "* le64: Takes an unsigned 64-bit number and converts it between host byte order and little-endian byte order.",
      "ja": "* LE64：署名されていない64ビット番号を取得し、ホストバイトの順序とリトルエンディアンバイトの順序の間に変換します。"
    },
    {
      "indent": 0,
      "text": "2.3. Definitions",
      "section_title": true,
      "ja": "2.3. 定義"
    },
    {
      "indent": 3,
      "text": "Sign Extend:",
      "ja": "サイン拡張："
    },
    {
      "indent": 12,
      "text": "To sign extend an X-bit number, A, to a Y-bit number, B, means to",
      "ja": "サインするには、Xビット番号a、yビット番号、b、"
    },
    {
      "indent": 8,
      "text": "1. Copy all X bits from A to the lower X bits of B.",
      "ja": "1. BのすべてのxビットをAから下xビットにコピーします。"
    },
    {
      "indent": 8,
      "text": "2. Set the value of the remaining Y - X bits of B to the value of the most significant bit of A.",
      "ja": "2. Bの残りのy -xビットの値を、Aの最も重要なビットの値に設定します。"
    },
    {
      "indent": 12,
      "text": "*Example*",
      "ja": "*例*"
    },
    {
      "indent": 12,
      "text": "Sign extend an 8-bit number A to a 16-bit number B on a big-endian platform:",
      "ja": "標識は、8ビット番号Aをビッグエンディアンプラットフォームで16ビット番号Bに拡張します。"
    },
    {
      "indent": 3,
      "text": "A:          10000110\nB: 11111111 10000110",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.4. Conformance Groups",
      "section_title": true,
      "ja": "2.4. 適合グループ"
    },
    {
      "indent": 3,
      "text": "An implementation does not need to support all instructions specified in this document (e.g., deprecated instructions). Instead, a number of conformance groups are specified. An implementation MUST support the base32 conformance group and MAY support additional conformance groups, where supporting a conformance group means it MUST support all instructions in that conformance group.",
      "ja": "実装では、このドキュメントで指定されたすべての指示をサポートする必要はありません（例：非推奨の指示）。代わりに、多くの適合グループが指定されています。実装は、Base32適合グループをサポートする必要があり、追加の適合グループをサポートする場合があります。適合グループをサポートすることは、その適合グループのすべての指示をサポートする必要があることを意味します。"
    },
    {
      "indent": 3,
      "text": "The use of named conformance groups enables interoperability between a runtime that executes instructions, and tools such as compilers that generate instructions for the runtime. Thus, capability discovery in terms of conformance groups might be done manually by users or automatically by tools.",
      "ja": "指定された適合グループを使用すると、指示を実行するランタイムと、ランタイムの指示を生成するコンパイラなどのツール間の相互運用性が可能になります。したがって、適合グループの観点からの能力の発見は、ユーザーが手動で、またはツールによって自動的に行われる場合があります。"
    },
    {
      "indent": 3,
      "text": "Each conformance group has a short ASCII label (e.g., \"base32\") that corresponds to a set of instructions that are mandatory. That is, each instruction has one or more conformance groups of which it is a member.",
      "ja": "各適合グループには、必須の一連の命令に対応する短いASCIIラベル（「Base32」など）があります。つまり、各命令には1つ以上の適合グループがあり、そのメンバーです。"
    },
    {
      "indent": 3,
      "text": "This document defines the following conformance groups:",
      "ja": "このドキュメントは、次の適合グループを定義します。"
    },
    {
      "indent": 3,
      "text": "base32:",
      "ja": "base32："
    },
    {
      "indent": 12,
      "text": "includes all instructions defined in this specification unless otherwise noted.",
      "ja": "特に明記しない限り、この仕様で定義されているすべての指示が含まれています。"
    },
    {
      "indent": 3,
      "text": "base64:",
      "ja": "base64："
    },
    {
      "indent": 12,
      "text": "includes base32, plus instructions explicitly noted as being in the base64 conformance group.",
      "ja": "Base32と、Base64適合グループにあると明示的に記載されている命令が含まれています。"
    },
    {
      "indent": 3,
      "text": "atomic32:",
      "ja": "Atomic32："
    },
    {
      "indent": 12,
      "text": "includes 32-bit atomic operation instructions (see Section 5.3).",
      "ja": "32ビット原子操作の指示が含まれています（セクション5.3を参照）。"
    },
    {
      "indent": 3,
      "text": "atomic64:",
      "ja": "Atomic64："
    },
    {
      "indent": 12,
      "text": "includes atomic32, plus 64-bit atomic operation instructions.",
      "ja": "Atomic32、および64ビット原子操作命令が含まれています。"
    },
    {
      "indent": 3,
      "text": "divmul32:",
      "ja": "divmul32："
    },
    {
      "indent": 12,
      "text": "includes 32-bit division, multiplication, and modulo instructions.",
      "ja": "32ビット部門、乗算、およびモジュロ命令が含まれます。"
    },
    {
      "indent": 3,
      "text": "divmul64:",
      "ja": "divmul64："
    },
    {
      "indent": 12,
      "text": "includes divmul32, plus 64-bit division, multiplication, and modulo instructions.",
      "ja": "divmul32、さらに64ビット部門、乗算、およびモジュロ命令が含まれます。"
    },
    {
      "indent": 3,
      "text": "packet:",
      "ja": "パケット："
    },
    {
      "indent": 12,
      "text": "deprecated packet access instructions.",
      "ja": "非推奨パケットアクセス手順。"
    },
    {
      "indent": 0,
      "text": "3. Instruction Encoding",
      "section_title": true,
      "ja": "3. 指示エンコーディング"
    },
    {
      "indent": 3,
      "text": "BPF has two instruction encodings:",
      "ja": "BPFには2つの命令エンコーディングがあります。"
    },
    {
      "indent": 6,
      "text": "* the basic instruction encoding, which uses 64 bits to encode an instruction",
      "ja": "* 64ビットを使用して命令をエンコードする基本的な命令エンコード"
    },
    {
      "indent": 6,
      "text": "* the wide instruction encoding, which appends a second 64 bits after the basic instruction for a total of 128 bits.",
      "ja": "* 幅広い命令エンコードは、合計128ビットの基本指示の後に2番目の64ビットを追加します。"
    },
    {
      "indent": 0,
      "text": "3.1. Basic Instruction Encoding",
      "section_title": true,
      "ja": "3.1. 基本的な命令エンコーディング"
    },
    {
      "indent": 3,
      "text": "A basic instruction is encoded as follows:",
      "ja": "基本的な命令は次のようにエンコードされます。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|    opcode     |     regs      |            offset             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              imm                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "*opcode:*",
      "ja": "*opcode：*"
    },
    {
      "indent": 12,
      "text": "operation to perform, encoded as follows:",
      "ja": "実行する操作、次のようにエンコードされています："
    },
    {
      "indent": 0,
      "text": "+-+-+-+-+-+-+-+-+\n|specific |class|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "*specific:*",
      "ja": "*特定の：*"
    },
    {
      "indent": 15,
      "text": "The format of these bits varies by instruction class",
      "ja": "これらのビットの形式は、命令クラスによって異なります"
    },
    {
      "indent": 6,
      "text": "*class:*",
      "ja": "*クラス：*"
    },
    {
      "indent": 15,
      "text": "the instruction class (see Section 3.3)",
      "ja": "命令クラス（セクション3.3を参照）"
    },
    {
      "indent": 3,
      "text": "*regs:*",
      "ja": "*regs：*"
    },
    {
      "indent": 12,
      "text": "the source and destination register numbers, encoded as follows on a little-endian host:",
      "ja": "ソースと宛先の登録番号は、小さなエンディアンのホストで次のようにエンコードされています。"
    },
    {
      "indent": 0,
      "text": "+-+-+-+-+-+-+-+-+\n|src_reg|dst_reg|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "and as follows on a big-endian host:",
      "ja": "そして、次のように、ビッグエンディアンのホスト："
    },
    {
      "indent": 0,
      "text": "+-+-+-+-+-+-+-+-+\n|dst_reg|src_reg|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "*src_reg:*",
      "ja": "*src_reg：*"
    },
    {
      "indent": 15,
      "text": "the source register number (0-10), except where otherwise specified (64-bit immediate instructions (see Section 5.4) reuse this field for other purposes)",
      "ja": "特に指定された場合を除き、ソースレジスタ番号（0-10）（64ビットの即時指示（セクション5.4を参照）は、他の目的でこのフィールドを再利用します）"
    },
    {
      "indent": 6,
      "text": "*dst_reg:*",
      "ja": "*dst_reg：*"
    },
    {
      "indent": 15,
      "text": "the destination register number (0-10), unless otherwise specified (future instructions might reuse this field for other purposes)",
      "ja": "特に指定されていない限り、宛先レジスタ番号（0-10）（将来の指示は他の目的でこのフィールドを再利用する可能性があります）"
    },
    {
      "indent": 3,
      "text": "*offset:*",
      "ja": "*オフセット：*"
    },
    {
      "indent": 12,
      "text": "signed integer offset used with pointer arithmetic, except where otherwise specified (some arithmetic instructions reuse this field for other purposes)",
      "ja": "特に指定された場合を除き、ポインター算術で使用される署名整数整数オフセット（一部の算術命令は、他の目的でこのフィールドを再利用します）"
    },
    {
      "indent": 3,
      "text": "*imm:*",
      "ja": "*IMM：*"
    },
    {
      "indent": 12,
      "text": "signed integer immediate value",
      "ja": "署名された整数即時値"
    },
    {
      "indent": 3,
      "text": "Note that the contents of multi-byte fields ('offset' and 'imm') are stored using big-endian byte ordering on big-endian hosts and little-endian byte ordering on little-endian hosts.",
      "ja": "マルチバイトフィールドの内容（「オフセット」と「IMM」）は、ビッグエンディアンホストとリトルエンディアンホストに注文するリトルエンディアンバイトの注文を使用して保存されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 3,
      "text": "opcode                  offset imm          assembly\n       src_reg dst_reg\n07     0       1        00 00  44 33 22 11  r1 += 0x11223344 // little\n       dst_reg src_reg\n07     1       0        00 00  11 22 33 44  r1 += 0x11223344 // big",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that most instructions do not use all of the fields. Unused fields SHALL be cleared to zero.",
      "ja": "ほとんどの指示はすべてのフィールドを使用しないことに注意してください。未使用のフィールドはゼロにクリアされるものとします。"
    },
    {
      "indent": 0,
      "text": "3.2. Wide Instruction Encoding",
      "section_title": true,
      "ja": "3.2. 幅広い指示エンコーディング"
    },
    {
      "indent": 3,
      "text": "Some instructions are defined to use the wide instruction encoding, which uses two 32-bit immediate values. The 64 bits following the basic instruction format contain a pseudo instruction with 'opcode', 'dst_reg', 'src_reg', and 'offset' all set to zero.",
      "ja": "いくつかの命令は、2つの32ビットの即時値を使用する幅広い命令エンコードを使用するために定義されています。基本命令形式に続く64ビットには、「opcode」、「dst_reg」、「src_reg」、および「offset」がすべてゼロに設定された擬似命令が含まれています。"
    },
    {
      "indent": 3,
      "text": "This is depicted in the following figure:",
      "ja": "これは次の図に描かれています。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|    opcode     |     regs      |            offset             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              imm                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           reserved                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           next_imm                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "*opcode:*",
      "ja": "*opcode：*"
    },
    {
      "indent": 12,
      "text": "operation to perform, encoded as explained above",
      "ja": "上記のようにエンコードされた実行する操作"
    },
    {
      "indent": 3,
      "text": "*regs:*",
      "ja": "*regs：*"
    },
    {
      "indent": 12,
      "text": "the source and destination register numbers (unless otherwise specified), encoded as explained above",
      "ja": "上記で説明されているようにエンコードされたソースと宛先のレジスタ番号（特に指定がない限り）"
    },
    {
      "indent": 3,
      "text": "*offset:*",
      "ja": "*オフセット：*"
    },
    {
      "indent": 12,
      "text": "signed integer offset used with pointer arithmetic, unless otherwise specified",
      "ja": "特に指定されていない限り、ポインター算術で使用される署名された整数オフセット"
    },
    {
      "indent": 3,
      "text": "*imm:*",
      "ja": "*IMM：*"
    },
    {
      "indent": 12,
      "text": "signed integer immediate value",
      "ja": "署名された整数即時値"
    },
    {
      "indent": 3,
      "text": "*reserved:*",
      "ja": "*予約済み：*"
    },
    {
      "indent": 12,
      "text": "unused, set to zero",
      "ja": "未使用、ゼロに設定"
    },
    {
      "indent": 3,
      "text": "*next_imm:*",
      "ja": "*next_imm：*"
    },
    {
      "indent": 12,
      "text": "second signed integer immediate value",
      "ja": "2番目の署名整数即時値"
    },
    {
      "indent": 0,
      "text": "3.3. Instruction Classes",
      "section_title": true,
      "ja": "3.3. 指示クラス"
    },
    {
      "indent": 3,
      "text": "The three least significant bits of the 'opcode' field store the instruction class:",
      "ja": "「OpCode」フィールドの3つの最も重要なビットは、命令クラスを保存します。"
    },
    {
      "indent": 6,
      "text": "+=======+=======+=================================+===========+\n| class | Value | Description                     | Reference |\n+=======+=======+=================================+===========+\n| LD    | 0x0   | non-standard load operations    | Section 5 |\n+-------+-------+---------------------------------+-----------+\n| LDX   | 0x1   | load into register operations   | Section 5 |\n+-------+-------+---------------------------------+-----------+\n| ST    | 0x2   | store from immediate operations | Section 5 |\n+-------+-------+---------------------------------+-----------+\n| STX   | 0x3   | store from register operations  | Section 5 |\n+-------+-------+---------------------------------+-----------+\n| ALU   | 0x4   | 32-bit arithmetic operations    | Section 4 |\n+-------+-------+---------------------------------+-----------+\n| JMP   | 0x5   | 64-bit jump operations          | Section 4 |\n+-------+-------+---------------------------------+-----------+\n| JMP32 | 0x6   | 32-bit jump operations          | Section 4 |\n+-------+-------+---------------------------------+-----------+\n| ALU64 | 0x7   | 64-bit arithmetic operations    | Section 4 |\n+-------+-------+---------------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "Table 3: Instruction Class",
      "ja": "表3：命令クラス"
    },
    {
      "indent": 0,
      "text": "4. Arithmetic and Jump Instructions",
      "section_title": true,
      "ja": "4. 算術とジャンプの指示"
    },
    {
      "indent": 3,
      "text": "For arithmetic and jump instructions (ALU, ALU64, JMP, and JMP32), the 8-bit 'opcode' field is divided into three parts:",
      "ja": "算術およびジャンプの指示（ALU、ALU64、JMP、およびJMP32）の場合、8ビットの「OpCode」フィールドは3つの部分に分割されます。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+\n|  code |s|class|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "*code:*",
      "ja": "*コード：*"
    },
    {
      "indent": 12,
      "text": "the operation code, whose meaning varies by instruction class",
      "ja": "操作コードは、命令クラスによって意味が異なります"
    },
    {
      "indent": 3,
      "text": "*s (source):*",
      "ja": "*S（ソース）：*"
    },
    {
      "indent": 12,
      "text": "the source operand location, which unless otherwise specified is one of:",
      "ja": "ソースオペランドの場所。特に指定されていない限り："
    },
    {
      "indent": 5,
      "text": "+========+=======+==========================================+\n| source | Value | Description                              |\n+========+=======+==========================================+\n| K      | 0     | use 32-bit 'imm' value as source operand |\n+--------+-------+------------------------------------------+\n| X      | 1     | use 'src_reg' register value as source   |\n|        |       | operand                                  |\n+--------+-------+------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 4: Source Operand Location",
      "ja": "表4：ソースオペランドの場所"
    },
    {
      "indent": 3,
      "text": "*class:*",
      "ja": "*クラス：*"
    },
    {
      "indent": 12,
      "text": "the instruction class (see Section 3.3)",
      "ja": "命令クラス（セクション3.3を参照）"
    },
    {
      "indent": 0,
      "text": "4.1. Arithmetic Instructions",
      "section_title": true,
      "ja": "4.1. 算術命令"
    },
    {
      "indent": 3,
      "text": "ALU uses 32-bit wide operands while ALU64 uses 64-bit wide operands for otherwise identical operations. ALU64 instructions belong to the base64 conformance group unless noted otherwise. The 'code' field encodes the operation as below, where 'src' refers to the source operand and 'dst' refers to the value of the destination register.",
      "ja": "ALUは32ビットワイドオペランドを使用し、ALU64はそれ以外の場合は同一の操作に64ビットワイドオペランドを使用します。Alu64の命令は、特に明記しない限り、Base64適合グループに属します。「コード」フィールドは以下のように操作をエンコードします。ここで、「SRC」はソースオペランドを指し、「DST」は宛先レジスタの値を指します。"
    },
    {
      "indent": 4,
      "text": "+=======+======+=========+=======================================+\n| Name  | code | offset  | Description                           |\n+=======+======+=========+=======================================+\n| ADD   | 0x0  | 0       | dst += src                            |\n+-------+------+---------+---------------------------------------+\n| SUB   | 0x1  | 0       | dst -= src                            |\n+-------+------+---------+---------------------------------------+\n| MUL   | 0x2  | 0       | dst *= src                            |\n+-------+------+---------+---------------------------------------+\n| DIV   | 0x3  | 0       | dst = (src != 0) ? (dst / src) : 0    |\n+-------+------+---------+---------------------------------------+\n| SDIV  | 0x3  | 1       | dst = (src != 0) ? (dst s/ src) : 0   |\n+-------+------+---------+---------------------------------------+\n| OR    | 0x4  | 0       | dst |= src                            |\n+-------+------+---------+---------------------------------------+\n| AND   | 0x5  | 0       | dst &= src                            |\n+-------+------+---------+---------------------------------------+\n| LSH   | 0x6  | 0       | dst <<= (src & mask)                  |\n+-------+------+---------+---------------------------------------+\n| RSH   | 0x7  | 0       | dst >>= (src & mask)                  |\n+-------+------+---------+---------------------------------------+\n| NEG   | 0x8  | 0       | dst = -dst                            |\n+-------+------+---------+---------------------------------------+\n| MOD   | 0x9  | 0       | dst = (src != 0) ? (dst % src) : dst  |\n+-------+------+---------+---------------------------------------+\n| SMOD  | 0x9  | 1       | dst = (src != 0) ? (dst s% src) : dst |\n+-------+------+---------+---------------------------------------+\n| XOR   | 0xa  | 0       | dst ^= src                            |\n+-------+------+---------+---------------------------------------+\n| MOV   | 0xb  | 0       | dst = src                             |\n+-------+------+---------+---------------------------------------+\n| MOVSX | 0xb  | 8/16/32 | dst = (s8,s16,s32)src                 |\n+-------+------+---------+---------------------------------------+\n| ARSH  | 0xc  | 0       | sign extending (Section 2.3) dst >>=  |\n|       |      |         | (src & mask)                          |\n+-------+------+---------+---------------------------------------+\n| END   | 0xd  | 0       | byte swap operations (see             |\n|       |      |         | Section 4.2)                          |\n+-------+------+---------+---------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 21,
      "text": "Table 5: Arithmetic Instructions",
      "ja": "表5：算術命令"
    },
    {
      "indent": 3,
      "text": "Underflow and overflow are allowed during arithmetic operations, meaning the 64-bit or 32-bit value will wrap. If BPF program execution would result in division by zero, the destination register is instead set to zero. If execution would result in modulo by zero, for ALU64 the value of the destination register is unchanged whereas for ALU the upper 32 bits of the destination register are zeroed.",
      "ja": "アンダーフローとオーバーフローは、算術操作中に許可されます。つまり、64ビットまたは32ビットの値がラップされます。BPFプログラムの実行がゼロで分割されると、宛先レジスタは代わりにゼロに設定されます。実行がゼロでModuloになった場合、ALU64の場合、宛先レジスタの値は変更されていませんが、ALUの場合、宛先レジスタの上部32ビットはゼロになります。"
    },
    {
      "indent": 3,
      "text": "{ADD, X, ALU}, where 'code' = ADD, 'source' = X, and 'class' = ALU, means:",
      "ja": "{add、x、alu}、ここで 'code' = add、 'source' = x、 'class' = alu、vean："
    },
    {
      "indent": 6,
      "text": "dst = (u32) ((u32) dst + (u32) src)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where '(u32)' indicates that the upper 32 bits are zeroed.",
      "ja": "ここで、 '（u32）'は上部32ビットがゼロになっていることを示します。"
    },
    {
      "indent": 3,
      "text": "{ADD, X, ALU64} means:",
      "ja": "{add、x、alu64}は以下を意味します。"
    },
    {
      "indent": 6,
      "text": "dst = dst + src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{XOR, K, ALU} means:",
      "ja": "{xor、k、alu}は："
    },
    {
      "indent": 6,
      "text": "dst = (u32) dst ^ (u32) imm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{XOR, K, ALU64} means:",
      "ja": "{xor、k、alu64}は："
    },
    {
      "indent": 6,
      "text": "dst = dst ^ imm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that most arithmetic instructions have 'offset' set to 0. Only three instructions (SDIV, SMOD, MOVSX) have a non-zero 'offset'.",
      "ja": "ほとんどの算術命令には「オフセット」が0に設定されていることに注意してください。3つの命令のみ（SDIV、SMOD、MOVSX）にはゼロ以外の「オフセット」があります。"
    },
    {
      "indent": 3,
      "text": "Division, multiplication, and modulo operations for ALU are part of the \"divmul32\" conformance group, and division, multiplication, and modulo operations for ALU64 are part of the \"divmul64\" conformance group. The division and modulo operations support both unsigned and signed flavors.",
      "ja": "ALUの分割、乗算、およびモジュロ操作は、「divmul32」適合グループの一部であり、Alu64の分割、乗算、およびモジュロ操作は「divmul64」適合グループの一部です。部門およびモジュロ操作は、署名と署名の両方のフレーバーの両方をサポートしています。"
    },
    {
      "indent": 3,
      "text": "For unsigned operations (DIV and MOD), for ALU, 'imm' is interpreted as a 32-bit unsigned value. For ALU64, 'imm' is first sign extended (Section 2.3) from 32 to 64 bits, and then interpreted as a 64-bit unsigned value.",
      "ja": "Unsigned Operations（DIVおよびMOD）の場合、ALUの場合、「IMM」は32ビットの署名値と解釈されます。Alu64の場合、「IMM」は32ビットから64ビットまで拡張された最初のサイン（セクション2.3）であり、64ビットの符号なし値として解釈されます。"
    },
    {
      "indent": 3,
      "text": "For signed operations (SDIV and SMOD), for ALU, 'imm' is interpreted as a 32-bit signed value. For ALU64, 'imm' is first sign extended (Section 2.3) from 32 to 64 bits, and then interpreted as a 64-bit signed value.",
      "ja": "署名操作（SDIVおよびSMOD）の場合、ALUの場合、「IMM」は32ビットの署名値として解釈されます。ALU64の場合、「IMM」は32ビットから64ビットまで拡張（セクション2.3）に拡張され、64ビットの署名値として解釈されます。"
    },
    {
      "indent": 3,
      "text": "Note that there are varying definitions of the signed modulo operation when the dividend or divisor are negative, where implementations often vary by language such that Python, Ruby, etc. differ from C, Go, Java, etc. This specification requires that signed modulo MUST use truncated division (where -13 % 3 == -1) as implemented in C, Go, etc.:",
      "ja": "配当または除数が否定的である場合、署名されたモジュロ操作にはさまざまな定義があり、実装はPython、Rubyなどとは異なる言語によって異なることが多いことに注意してください。C、GO、Javaなどとは異なります。C、GOなどで実装されているように、切り捨てられた分割（-13％3 == -1）を使用します。"
    },
    {
      "indent": 6,
      "text": "a % n = a - n * trunc(a / n)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The MOVSX instruction does a move operation with sign extension. {MOVSX, X, ALU} sign extends (Section 2.3) 8-bit and 16-bit operands into 32-bit operands, and zeroes the remaining upper 32 bits. {MOVSX, X, ALU64} sign extends (Section 2.3) 8-bit, 16-bit, and 32-bit operands into 64-bit operands. Unlike other arithmetic instructions, MOVSX is only defined for register source operands (X).",
      "ja": "MOVSX命令は、符号拡張機能を備えた移動操作を行います。{movsx、x、alu}サインは、（セクション2.3）8ビットおよび16ビットオペランドを32ビットオペランドに拡張し、残りの上部32ビットをゼロにします。{movsx、x、alu64}記号は、64ビットオペランドに拡張されます（セクション2.3）8ビット、16ビット、および32ビットオペランド。他の算術命令とは異なり、movsxはレジスタソースオペランド（x）に対してのみ定義されます。"
    },
    {
      "indent": 3,
      "text": "{MOV, K, ALU64} means:",
      "ja": "{mov、k、alu64}は："
    },
    {
      "indent": 6,
      "text": "dst = (s64)imm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{MOV, X, ALU} means:",
      "ja": "{mov、x、alu}は："
    },
    {
      "indent": 6,
      "text": "dst = (u32)src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{MOVSX, X, ALU} with 'offset' 8 means:",
      "ja": "{movsx、x、alu} with 'offset' 8は次のことを意味します。"
    },
    {
      "indent": 6,
      "text": "dst = (u32)(s32)(s8)src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The NEG instruction is only defined when the source bit is clear (K).",
      "ja": "NEG命令は、ソースビットがクリア（k）の場合にのみ定義されます。"
    },
    {
      "indent": 3,
      "text": "Shift operations use a mask of 0x3F (63) for 64-bit operations and 0x1F (31) for 32-bit operations.",
      "ja": "シフト操作は、64ビット操作で0x3F（63）のマスク、32ビット操作に0x1F（31）を使用します。"
    },
    {
      "indent": 0,
      "text": "4.2. Byte Swap Instructions",
      "section_title": true,
      "ja": "4.2. バイトスワップ命令"
    },
    {
      "indent": 3,
      "text": "The byte swap instructions use instruction classes of ALU and ALU64 and a 4-bit 'code' field of END.",
      "ja": "バイトスワップ命令は、ALUとALU64の命令クラス、および4ビットの「コード」フィールドの端のフィールドを使用します。"
    },
    {
      "indent": 3,
      "text": "The byte swap instructions operate on the destination register only and do not use a separate source register or immediate value.",
      "ja": "バイトスワップ命令は宛先レジスタでのみ動作し、別のソースレジスタまたは即時値を使用しません。"
    },
    {
      "indent": 3,
      "text": "For ALU, the 1-bit source operand field in the opcode is used to select what byte order the operation converts from or to. For ALU64, the 1-bit source operand field in the opcode is reserved and MUST be set to 0.",
      "ja": "ALUの場合、OpCodeの1ビットソースオペランドフィールドを使用して、操作がまたは操作を変換するバイトを選択します。ALU64の場合、オペコードの1ビットソースオペランドフィールドは予約されており、0に設定する必要があります。"
    },
    {
      "indent": 9,
      "text": "+=======+==========+=======+===========================+\n| class | source   | Value | Description               |\n+=======+==========+=======+===========================+\n| ALU   | LE       | 0     | convert between host byte |\n|       |          |       | order and little endian   |\n+-------+----------+-------+---------------------------+\n| ALU   | BE       | 1     | convert between host byte |\n|       |          |       | order and big endian      |\n+-------+----------+-------+---------------------------+\n| ALU64 | Reserved | 0     | do byte swap              |\n|       |          |       | unconditionally           |\n+-------+----------+-------+---------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 21,
      "text": "Table 6: Byte Swap Instructions",
      "ja": "表6：バイトスワップ命令"
    },
    {
      "indent": 3,
      "text": "The 'imm' field encodes the width of the swap operations. The following widths are supported: 16, 32, and 64. Width 64 operations belong to the base64 conformance group and other swap operations belong to the base32 conformance group.",
      "ja": "「IMM」フィールドは、スワップ操作の幅をエンコードします。次の幅がサポートされています。16、32、および64。width64操作は、base64適合グループに属し、その他のスワップ操作はbase32適合グループに属します。"
    },
    {
      "indent": 3,
      "text": "Examples:",
      "ja": "例："
    },
    {
      "indent": 3,
      "text": "{END, LE, ALU} with 'imm' = 16/32/64 means:",
      "ja": "{end、le、alu} 'mim' = 16/32/64との意味："
    },
    {
      "indent": 6,
      "text": "dst = le16(dst)\ndst = le32(dst)\ndst = le64(dst)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{END, BE, ALU} with 'imm' = 16/32/64 means:",
      "ja": "{end、be、alu} with 'mim' = 16/32/64は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "dst = be16(dst)\ndst = be32(dst)\ndst = be64(dst)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{END, TO, ALU64} with 'imm' = 16/32/64 means:",
      "ja": "{end、to、alu64} with 'mim' = 16/32/64は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "dst = bswap16(dst)\ndst = bswap32(dst)\ndst = bswap64(dst)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.3. Jump Instructions",
      "section_title": true,
      "ja": "4.3. ジャンプ手順"
    },
    {
      "indent": 3,
      "text": "JMP32 uses 32-bit wide operands and indicates the base32 conformance group; JMP uses 64-bit wide operands for otherwise identical operations and indicates the base64 conformance group unless otherwise specified. The 'code' field encodes the operation as below:",
      "ja": "JMP32は32ビットワイドオペランドを使用し、Base32適合グループを示します。JMPは、それ以外の場合は同一の操作に64ビット幅のオペランドを使用し、特に指定がない限りBase64適合グループを示します。「コード」フィールドは、以下のように操作をエンコードします。"
    },
    {
      "indent": 4,
      "text": "+======+=======+=========+======================+================+\n| code | Value | src_reg | Description          | Notes          |\n+======+=======+=========+======================+================+\n| JA   | 0x0   | 0x0     | PC += offset         | {JA, K, JMP}   |\n|      |       |         |                      | only           |\n+------+-------+---------+----------------------+----------------+\n| JA   | 0x0   | 0x0     | PC += imm            | {JA, K, JMP32} |\n|      |       |         |                      | only           |\n+------+-------+---------+----------------------+----------------+\n| JEQ  | 0x1   | any     | PC += offset if dst  |                |\n|      |       |         | == src               |                |\n+------+-------+---------+----------------------+----------------+\n| JGT  | 0x2   | any     | PC += offset if dst  | unsigned       |\n|      |       |         | > src                |                |\n+------+-------+---------+----------------------+----------------+\n| JGE  | 0x3   | any     | PC += offset if dst  | unsigned       |\n|      |       |         | >= src               |                |\n+------+-------+---------+----------------------+----------------+\n| JSET | 0x4   | any     | PC += offset if dst  |                |\n|      |       |         | & src                |                |\n+------+-------+---------+----------------------+----------------+\n| JNE  | 0x5   | any     | PC += offset if dst  |                |\n|      |       |         | != src               |                |\n+------+-------+---------+----------------------+----------------+\n| JSGT | 0x6   | any     | PC += offset if dst  | signed         |\n|      |       |         | > src                |                |\n+------+-------+---------+----------------------+----------------+\n| JSGE | 0x7   | any     | PC += offset if dst  | signed         |\n|      |       |         | >= src               |                |\n+------+-------+---------+----------------------+----------------+\n| CALL | 0x8   | 0x0     | call helper function | {CALL, K, JMP} |\n|      |       |         | by static ID         | only, see      |\n|      |       |         |                      | Section 4.3.1  |\n+------+-------+---------+----------------------+----------------+\n| CALL | 0x8   | 0x1     | call PC += imm       | {CALL, K, JMP} |\n|      |       |         |                      | only, see      |\n|      |       |         |                      | Section 4.3.2  |\n+------+-------+---------+----------------------+----------------+\n| CALL | 0x8   | 0x2     | call helper function | {CALL, K, JMP} |\n|      |       |         | by BTF ID            | only, see      |\n|      |       |         |                      | Section 4.3.1  |\n+------+-------+---------+----------------------+----------------+\n| EXIT | 0x9   | 0x0     | return               | {CALL, K, JMP} |\n|      |       |         |                      | only           |\n+------+-------+---------+----------------------+----------------+\n| JLT  | 0xa   | any     | PC += offset if dst  | unsigned       |\n|      |       |         | < src                |                |\n+------+-------+---------+----------------------+----------------+\n| JLE  | 0xb   | any     | PC += offset if dst  | unsigned       |\n|      |       |         | <= src               |                |\n+------+-------+---------+----------------------+----------------+\n| JSLT | 0xc   | any     | PC += offset if dst  | signed         |\n|      |       |         | < src                |                |\n+------+-------+---------+----------------------+----------------+\n| JSLE | 0xd   | any     | PC += offset if dst  | signed         |\n|      |       |         | <= src               |                |\n+------+-------+---------+----------------------+----------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 24,
      "text": "Table 7: Jump Instructions",
      "ja": "表7：ジャンプの指示"
    },
    {
      "indent": 3,
      "text": "where 'PC' denotes the program counter, and the offset to increment by is in units of 64-bit instructions relative to the instruction following the jump instruction. Thus 'PC += 1' skips execution of the next instruction if it's a basic instruction or results in undefined behavior if the next instruction is a 128-bit wide instruction.",
      "ja": "ここで、「PC」はプログラムカウンターを示し、ジャンプ命令に続く命令に比べて、オフセットを増分するオフセットは64ビットの命令の単位です。したがって、「PC += 1」は、次の命令である場合は次の命令の実行をスキップしたり、次の命令が128ビットの幅広い命令である場合は未定義の動作をもたらします。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 3,
      "text": "{JSGE, X, JMP32} means:",
      "ja": "{jsge、x、jmp32}は："
    },
    {
      "indent": 6,
      "text": "if (s32)dst s>= (s32)src goto +offset",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where 's>=' indicates a signed '>=' comparison.",
      "ja": "ここで、 's> ='は署名された '> ='の比較を示します。"
    },
    {
      "indent": 3,
      "text": "{JLE, K, JMP} means:",
      "ja": "{jle、k、jmp}は："
    },
    {
      "indent": 6,
      "text": "if dst <= (u64)(s64)imm goto +offset",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{JA, K, JMP32} means:",
      "ja": "{ja、k、jmp32}は次のことを意味します。"
    },
    {
      "indent": 6,
      "text": "gotol +imm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where 'imm' means the branch offset comes from the 'imm' field.",
      "ja": "ここで、「IMM」とは、ブランチオフセットが「IMM」フィールドから来ることを意味します。"
    },
    {
      "indent": 3,
      "text": "Note that there are two flavors of JA instructions. The JMP class permits a 16-bit jump offset specified by the 'offset' field, whereas the JMP32 class permits a 32-bit jump offset specified by the 'imm' field. A conditional jump greater than 16 bits may be converted to a conditional jump less than 16 bits plus a 32-bit unconditional jump.",
      "ja": "JA命令には2つのフレーバーがあることに注意してください。JMPクラスでは、「オフセット」フィールドで指定された16ビットジャンプオフセットを許可しますが、JMP32クラスでは「IMM」フィールドで指定された32ビットジャンプオフセットが許可されます。16ビットを超える条件付きジャンプは、16ビット未満と32ビットの無条件ジャンプに変換できます。"
    },
    {
      "indent": 3,
      "text": "All CALL and JA instructions belong to the base32 conformance group.",
      "ja": "すべての呼び出しとJAの指示は、base32適合グループに属します。"
    },
    {
      "indent": 0,
      "text": "4.3.1. Helper Functions",
      "section_title": true,
      "ja": "4.3.1. ヘルパー機能"
    },
    {
      "indent": 3,
      "text": "Helper functions are a concept whereby BPF programs can call into a set of function calls exposed by the underlying platform.",
      "ja": "ヘルパー関数は、BPFプログラムが基礎となるプラットフォームによって公開される一連の関数呼び出しを呼び出すことができる概念です。"
    },
    {
      "indent": 3,
      "text": "Historically, each helper function was identified by a static ID encoded in the 'imm' field. Further documentation of helper functions is outside the scope of this document and standardization is left for future work, but use is widely deployed and more information can be found in platform-specific documentation (e.g., Linux kernel documentation).",
      "ja": "歴史的に、各ヘルパー関数は、「IMM」フィールドにエンコードされた静的IDによって識別されました。ヘルパー機能のさらなるドキュメントはこのドキュメントの範囲外であり、標準化は将来の作業のために残されていますが、使用は広く展開されており、より多くの情報はプラットフォーム固有のドキュメント（例：Linuxカーネルのドキュメント）にあります。"
    },
    {
      "indent": 3,
      "text": "Platforms that support the BPF Type Format (BTF) support identifying a helper function by a BTF ID encoded in the 'imm' field, where the BTF ID identifies the helper name and type. Further documentation of BTF is outside the scope of this document and standardization is left for future work, but use is widely deployed and more information can be found in platform-specific documentation (e.g., Linux kernel documentation).",
      "ja": "BPFタイプ形式（BTF）をサポートするプラットフォームは、BTF IDがヘルパー名とタイプを識別する「IMM」フィールドにエンコードされたBTF IDによってヘルパー関数の識別をサポートします。BTFのさらなるドキュメントはこのドキュメントの範囲外であり、標準化は将来の作業のために残されていますが、使用は広く展開されており、より多くの情報がプラットフォーム固有のドキュメント（例：Linuxカーネルのドキュメント）にあります。"
    },
    {
      "indent": 0,
      "text": "4.3.2. Program-Local Functions",
      "section_title": true,
      "ja": "4.3.2. プログラムローカル関数"
    },
    {
      "indent": 3,
      "text": "Program-local functions are functions exposed by the same BPF program as the caller, and are referenced by offset from the instruction following the call instruction, similar to JA. The offset is encoded in the 'imm' field of the call instruction. An EXIT within the program-local function will return to the caller.",
      "ja": "プログラムローカル関数は、発信者と同じBPFプログラムによって公開される関数であり、JAと同様に、コール命令に続く命令からのオフセットによって参照されます。オフセットは、コール命令の「IMM」フィールドにエンコードされています。プログラムローカル関数内の出口は、発信者に戻ります。"
    },
    {
      "indent": 0,
      "text": "5. Load and Store Instructions",
      "section_title": true,
      "ja": "5. 指示を読み込んで保存します"
    },
    {
      "indent": 3,
      "text": "For load and store instructions (LD, LDX, ST, and STX), the 8-bit 'opcode' field is divided as follows:",
      "ja": "ロードおよびストアの指示（LD、LDX、ST、およびSTX）の場合、8ビットの「OpCode」フィールドは次のように分割されます。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+\n|mode |sz |class|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "*mode:*",
      "ja": "*モード：*"
    },
    {
      "indent": 12,
      "text": "The mode modifier is one of:",
      "ja": "モード修飾子は次のとおりです。"
    },
    {
      "indent": 4,
      "text": "+========+=======+===============================+=============+\n| mode   | Value | Description                   | Reference   |\n+========+=======+===============================+=============+\n| IMM    | 0     | 64-bit immediate instructions | Section 5.4 |\n+--------+-------+-------------------------------+-------------+\n| ABS    | 1     | legacy BPF packet access      | Section 5.5 |\n|        |       | (absolute)                    |             |\n+--------+-------+-------------------------------+-------------+\n| IND    | 2     | legacy BPF packet access      | Section 5.5 |\n|        |       | (indirect)                    |             |\n+--------+-------+-------------------------------+-------------+\n| MEM    | 3     | regular load and store        | Section 5.1 |\n|        |       | operations                    |             |\n+--------+-------+-------------------------------+-------------+\n| MEMSX  | 4     | sign-extension load           | Section 5.2 |\n|        |       | operations                    |             |\n+--------+-------+-------------------------------+-------------+\n| ATOMIC | 6     | atomic operations             | Section 5.3 |\n+--------+-------+-------------------------------+-------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "Table 8: Mode Modifier",
      "ja": "表8：モード修飾子"
    },
    {
      "indent": 3,
      "text": "*sz (size):*",
      "ja": "*SZ（サイズ）：*"
    },
    {
      "indent": 12,
      "text": "The size modifier is one of:",
      "ja": "サイズ修飾子は次のとおりです。"
    },
    {
      "indent": 16,
      "text": "+======+=======+=======================+\n| size | Value | Description           |\n+======+=======+=======================+\n| W    | 0     | word (4 bytes)        |\n+------+-------+-----------------------+\n| H    | 1     | half word (2 bytes)   |\n+------+-------+-----------------------+\n| B    | 2     | byte                  |\n+------+-------+-----------------------+\n| DW   | 3     | double word (8 bytes) |\n+------+-------+-----------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "Table 9: Size Modifier",
      "ja": "表9：サイズ修飾子"
    },
    {
      "indent": 12,
      "text": "Instructions using DW belong to the base64 conformance group.",
      "ja": "DWを使用した手順は、Base64適合グループに属します。"
    },
    {
      "indent": 3,
      "text": "*class:*",
      "ja": "*クラス：*"
    },
    {
      "indent": 12,
      "text": "The instruction class (see Section 3.3)",
      "ja": "命令クラス（セクション3.3を参照）"
    },
    {
      "indent": 0,
      "text": "5.1. Regular Load and Store Operations",
      "section_title": true,
      "ja": "5.1. 通常の負荷および保存操作"
    },
    {
      "indent": 3,
      "text": "The MEM mode modifier is used to encode regular load and store instructions that transfer data between a register and memory.",
      "ja": "MEMモードモディファイアは、レジスタとメモリ間でデータを転送する通常のロードと保存の命令をエンコードするために使用されます。"
    },
    {
      "indent": 3,
      "text": "{MEM, <size>, STX} means:",
      "ja": "{mem、<size>、stx}は："
    },
    {
      "indent": 6,
      "text": "*(size *) (dst + offset) = src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{MEM, <size>, ST} means:",
      "ja": "{mem、<size>、st}は："
    },
    {
      "indent": 6,
      "text": "*(size *) (dst + offset) = imm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{MEM, <size>, LDX} means:",
      "ja": "{mem、<size>、ldx}は："
    },
    {
      "indent": 6,
      "text": "dst = *(unsigned size *) (src + offset)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where '<size>' is one of: B, H, W, or DW, and 'unsigned size' is one of: u8, u16, u32, or u64.",
      "ja": "ここで、 '<size>'はB、H、W、またはDW、および「unsigned Size」の1つです：U8、U16、U32、またはU64。"
    },
    {
      "indent": 0,
      "text": "5.2. Sign-Extension Load Operations",
      "section_title": true,
      "ja": "5.2. サインエクステンションロード操作"
    },
    {
      "indent": 3,
      "text": "The MEMSX mode modifier is used to encode sign-extension load instructions (Section 2.3) that transfer data between a register and memory.",
      "ja": "MEMSXモードモディファイアは、レジスタとメモリ間でデータを転送する符号エクステンションロード命令（セクション2.3）をエンコードするために使用されます。"
    },
    {
      "indent": 3,
      "text": "{MEMSX, <size>, LDX} means:",
      "ja": "{memsx、<size>、ldx}は："
    },
    {
      "indent": 6,
      "text": "dst = *(signed size *) (src + offset)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where '<size>' is one of: B, H, or W, and 'signed size' is one of: s8, s16, or s32.",
      "ja": "ここで、 '<size>'は次のいずれか：b、h、またはw、および「署名されたサイズ」は、s8、s16、またはs32の1つです。"
    },
    {
      "indent": 0,
      "text": "5.3. Atomic Operations",
      "section_title": true,
      "ja": "5.3. 原子操作"
    },
    {
      "indent": 3,
      "text": "Atomic operations operate on memory and cannot be interrupted or corrupted by other access to the same memory region by other BPF programs or means outside of this specification.",
      "ja": "原子操作はメモリで動作し、他のBPFプログラムまたはこの仕様以外の手段によって同じメモリ領域への他のアクセスによって中断または破損することはできません。"
    },
    {
      "indent": 3,
      "text": "All atomic operations supported by BPF are encoded as store operations that use the ATOMIC mode modifier as follows:",
      "ja": "BPFがサポートするすべての原子運転は、次のようにアトミックモード修飾子を使用するストア操作としてエンコードされます。"
    },
    {
      "indent": 6,
      "text": "* {ATOMIC, W, STX} for 32-bit operations, which are part of the \"atomic32\" conformance group.",
      "ja": "* {Atomic 32」適合グループの一部である32ビット操作の{Atomic、W、Stx}。"
    },
    {
      "indent": 6,
      "text": "* {ATOMIC, DW, STX} for 64-bit operations, which are part of the \"atomic64\" conformance group.",
      "ja": "* {Atomic64」適合グループの一部である64ビット操作の{Atomic、dw、stx}。"
    },
    {
      "indent": 6,
      "text": "* 8-bit and 16-bit wide atomic operations are not supported.",
      "ja": "* 8ビットおよび16ビットの幅広い原子動作はサポートされていません。"
    },
    {
      "indent": 3,
      "text": "The 'imm' field is used to encode the actual atomic operation. Simple atomic operations use a subset of the values defined to encode arithmetic operations in the 'imm' field to encode the atomic operation:",
      "ja": "「IMM」フィールドは、実際の原子動作をエンコードするために使用されます。単純な原子操作「IMM」フィールドで算術演算をエンコードするために定義された値のサブセットを使用して、原子操作をエンコードします。"
    },
    {
      "indent": 23,
      "text": "+=====+=======+=============+\n| imm | Value | Description |\n+=====+=======+=============+\n| ADD | 0x00  | atomic add  |\n+-----+-------+-------------+\n| OR  | 0x40  | atomic or   |\n+-----+-------+-------------+\n| AND | 0x50  | atomic and  |\n+-----+-------+-------------+\n| XOR | 0xa0  | atomic xor  |\n+-----+-------+-------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 26,
      "text": "Table 10: Simple Atomic Operations",
      "ja": "表10：単純な原子動作"
    },
    {
      "indent": 3,
      "text": "{ATOMIC, W, STX} with 'imm' = ADD means:",
      "ja": "{atomic、w、stx} with 'mim' = add vean："
    },
    {
      "indent": 6,
      "text": "*(u32 *)(dst + offset) += src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "{ATOMIC, DW, STX} with 'imm' = ADD means:",
      "ja": "{atomic、dw、stx} with 'mim' = add vean："
    },
    {
      "indent": 6,
      "text": "*(u64 *)(dst + offset) += src",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In addition to the simple atomic operations, there is also a modifier and two complex atomic operations:",
      "ja": "単純な原子動作に加えて、修飾子と2つの複雑な原子動作もあります。"
    },
    {
      "indent": 9,
      "text": "+=========+==============+=============================+\n| imm     | Value        | Description                 |\n+=========+==============+=============================+\n| FETCH   | 0x01         | modifier: return old value  |\n+---------+--------------+-----------------------------+\n| XCHG    | 0xe0 | FETCH | atomic exchange             |\n+---------+--------------+-----------------------------+\n| CMPXCHG | 0xf0 | FETCH | atomic compare and exchange |\n+---------+--------------+-----------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "Table 11: Complex Atomic Operations and a Modifier",
      "ja": "表11：複雑な原子動作と修飾子"
    },
    {
      "indent": 3,
      "text": "The FETCH modifier is optional for simple atomic operations and is always set for the complex atomic operations. If the FETCH flag is set, then the operation also overwrites src with the value that was in memory before it was modified.",
      "ja": "Fetch Modifierは、単純な原子動作の場合はオプションであり、常に複雑な原子動作に設定されています。フェッチフラグが設定されている場合、操作は、変更される前にメモリにある値でSRCを上書きします。"
    },
    {
      "indent": 3,
      "text": "The XCHG operation atomically exchanges src with the value addressed by dst + offset.",
      "ja": "XCHG操作は、DST +オフセットによって対処された値とSRCをAtomallyで交換します。"
    },
    {
      "indent": 3,
      "text": "The CMPXCHG operation atomically compares the value addressed by dst + offset with R0. If they match, the value addressed by dst + offset is replaced with src. In either case, the value that was at dst + offset before the operation is zero-extended and loaded back to R0.",
      "ja": "CMPXCHG操作は、DST +オフセットとR0でアドレス指定された値を原子的に比較します。それらが一致する場合、DST +オフセットによって対処される値はSRCに置き換えられます。どちらの場合でも、操作がゼロに拡張され、R0にロードされる前にDST +オフセットにあった値。"
    },
    {
      "indent": 0,
      "text": "5.4. 64-bit Immediate Instructions",
      "section_title": true,
      "ja": "5.4. 64ビット即時指示"
    },
    {
      "indent": 3,
      "text": "Instructions with the IMM 'mode' modifier use the wide instruction encoding defined in Section 3, and use the 'src_reg' field of the basic instruction to hold an opcode subtype.",
      "ja": "IMM 'モード'モディファイアを使用した命令セクション3で定義されている幅広い指示を使用し、基本命令の「src_reg」フィールドを使用して、opcodeサブタイプを保持します。"
    },
    {
      "indent": 3,
      "text": "The following table defines a set of {IMM, DW, LD} instructions with opcode subtypes in the 'src_reg' field, using new terms such as \"map\" defined further below:",
      "ja": "次の表は、以下に定義されている「Map」などの新しい用語を使用して、「src_reg」フィールドにopcodeサブタイプを使用した{mim、dw、ld}命令のセットを定義します。"
    },
    {
      "indent": 4,
      "text": "+=========+================================+==========+==========+\n| src_reg | Pseudocode                     | imm Type | dst Type |\n+=========+================================+==========+==========+\n| 0x0     | dst = (next_imm << 32) | imm   | integer  | integer  |\n+---------+--------------------------------+----------+----------+\n| 0x1     | dst = map_by_fd(imm)           | map fd   | map      |\n+---------+--------------------------------+----------+----------+\n| 0x2     | dst = map_val(map_by_fd(imm))  | map fd   | data     |\n|         | + next_imm                     |          | address  |\n+---------+--------------------------------+----------+----------+\n| 0x3     | dst = var_addr(imm)            | variable | data     |\n|         |                                | id       | address  |\n+---------+--------------------------------+----------+----------+\n| 0x4     | dst = code_addr(imm)           | integer  | code     |\n|         |                                |          | address  |\n+---------+--------------------------------+----------+----------+\n| 0x5     | dst = map_by_idx(imm)          | map      | map      |\n|         |                                | index    |          |\n+---------+--------------------------------+----------+----------+\n| 0x6     | dst = map_val(map_by_idx(imm)) | map      | data     |\n|         | + next_imm                     | index    | address  |\n+---------+--------------------------------+----------+----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 17,
      "text": "Table 12: 64-bit Immediate Instructions",
      "ja": "表12：64ビットの即時指示"
    },
    {
      "indent": 3,
      "text": "where",
      "ja": "ただし"
    },
    {
      "indent": 6,
      "text": "* map_by_fd(imm) means to convert a 32-bit file descriptor into an address of a map (see Section 5.4.1)",
      "ja": "* MAP_BY_FD（IMM）は、32ビットファイル記述子をマップのアドレスに変換することを意味します（セクション5.4.1を参照）"
    },
    {
      "indent": 6,
      "text": "* map_by_idx(imm) means to convert a 32-bit index into an address of a map",
      "ja": "* MAP_BY_IDX（IMM）は、32ビットインデックスをマップのアドレスに変換することを意味します"
    },
    {
      "indent": 6,
      "text": "* map_val(map) gets the address of the first value in a given map",
      "ja": "* map_val（map）特定のマップで最初の値のアドレスを取得します"
    },
    {
      "indent": 6,
      "text": "* var_addr(imm) gets the address of a platform variable (see Section 5.4.2) with a given id",
      "ja": "* var_addr（IMM）特定のIDを使用してプラットフォーム変数（セクション5.4.2を参照）のアドレスを取得します"
    },
    {
      "indent": 6,
      "text": "* code_addr(imm) gets the address of the instruction at a specified relative offset in number of (64-bit) instructions",
      "ja": "* code_addr（mim）（64ビット）命令数で指定された相対オフセットで命令のアドレスを取得します"
    },
    {
      "indent": 6,
      "text": "* the 'imm type' can be used by disassemblers for display",
      "ja": "* 「IMMタイプ」は、ディスプレイのために分解者が使用できます"
    },
    {
      "indent": 6,
      "text": "* the 'dst type' can be used for verification and just-in-time compilation purposes",
      "ja": "* 「DSTタイプ」は、検証およびジャストインタイムの編集目的に使用できます"
    },
    {
      "indent": 0,
      "text": "5.4.1. Maps",
      "section_title": true,
      "ja": "5.4.1. マップ"
    },
    {
      "indent": 3,
      "text": "Maps are shared memory regions accessible by BPF programs on some platforms. A map can have various semantics as defined in a separate document, and may or may not have a single contiguous memory region, but the 'map_val(map)' is currently only defined for maps that do have a single contiguous memory region.",
      "ja": "マップは、一部のプラットフォーム上のBPFプログラムがアクセスできる共有メモリ領域です。マップには、別のドキュメントで定義されているさまざまなセマンティクスを持つことができ、単一の隣接するメモリ領域がある場合とない場合がありますが、「map_val（map）」は現在、単一の隣接するメモリ領域を持つマップに対してのみ定義されています。"
    },
    {
      "indent": 3,
      "text": "Each map can have a file descriptor (fd) if supported by the platform, where 'map_by_fd(imm)' means to get the map with the specified file descriptor. Each BPF program can also be defined to use a set of maps associated with the program at load time, and 'map_by_idx(imm)' means to get the map with the given index in the set associated with the BPF program containing the instruction.",
      "ja": "各マップには、プラットフォームでサポートされている場合はファイル記述子（FD）を持つことができます。「Map_by_fd（IMM）」とは、指定されたファイル記述子でマップを取得することを意味します。各BPFプログラムは、ロード時にプログラムに関連付けられた一連のマップを使用するように定義することもできます。また、「MAP_BY_IDX（IMM）」は、命令を含むBPFプログラムに関連付けられたセットの特定のインデックスを含むMAPを取得することを意味します。"
    },
    {
      "indent": 0,
      "text": "5.4.2. Platform Variables",
      "section_title": true,
      "ja": "5.4.2. プラットフォーム変数"
    },
    {
      "indent": 3,
      "text": "Platform variables are memory regions, identified by integer ids, exposed by the runtime, and accessible by BPF programs on some platforms. The 'var_addr(imm)' operation means to get the address of the memory region identified by the given id.",
      "ja": "プラットフォーム変数は、整数IDによって識別され、ランタイムによって公開され、一部のプラットフォーム上のBPFプログラムでアクセス可能なメモリ領域です。「var_addr（IMM）」操作は、指定されたIDによって識別されるメモリ領域のアドレスを取得することを意味します。"
    },
    {
      "indent": 0,
      "text": "5.5. Legacy BPF Packet Access Instructions",
      "section_title": true,
      "ja": "5.5. レガシーBPFパケットアクセス手順"
    },
    {
      "indent": 3,
      "text": "BPF previously introduced special instructions for access to packet data that were carried over from classic BPF. These instructions used an instruction class of LD, a size modifier of W, H, or B, and a mode modifier of ABS or IND. The 'dst_reg' and 'offset' fields were set to zero, and 'src_reg' was set to zero for ABS. However, these instructions are deprecated and SHOULD no longer be used. All legacy packet access instructions belong to the \"packet\" conformance group.",
      "ja": "BPFは以前、古典的なBPFから持ち越されたパケットデータにアクセスするための特別な指示を導入しました。これらの命令は、LDの命令クラス、W、H、またはBのサイズ修飾子、およびABSまたはINDのモード修飾子を使用しました。「DST_REG」と「オフセット」フィールドはゼロに設定され、「SRC_REG」はABSに対してゼロに設定されていました。ただし、これらの指示は非推奨であり、使用しないでください。すべてのレガシーパケットアクセス手順は、「パケット」コンフォーマンスグループに属します。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "BPF programs could use BPF instructions to do malicious things with memory, CPU, networking, or other system resources. This is not fundamentally different from any other type of software that may run on a device. Execution environments should be carefully designed to only run BPF programs that are trusted and verified, and sandboxing and privilege level separation are key strategies for limiting security and abuse impact. For example, BPF verifiers are well-known and widely deployed and are responsible for ensuring that BPF programs will terminate within a reasonable time, only interact with memory in safe ways, adhere to platform-specified API contracts, and don't use instructions with undefined behavior. This level of verification can often provide a stronger level of security assurance than for other software and operating system code. While the details are out of scope of this document, Linux [LINUX] and PREVAIL [PREVAIL] provide many details. Future IETF work will document verifier expectations and building blocks for allowing safe execution of untrusted BPF programs.",
      "ja": "BPFプログラムは、BPF命令を使用して、メモリ、CPU、ネットワーキング、またはその他のシステムリソースで悪意のあることを行うことができます。これは、デバイスで実行される可能性のある他のタイプのソフトウェアと根本的に違いはありません。実行環境は、信頼と検証のBPFプログラムのみを実行するように慎重に設計する必要があり、サンドボックスと特権レベルの分離は、セキュリティと虐待の影響を制限するための重要な戦略です。たとえば、BPF検証剤はよく知られており、広く展開されており、BPFプログラムが合理的な時間内に終了し、安全な方法でメモリと相互作用し、プラットフォーム指定のAPI契約に準拠し、命令を使用しないようにする責任があります。未定義の動作。このレベルの検証は、多くの場合、他のソフトウェアおよびオペレーティングシステムコードよりも強力なレベルのセキュリティ保証を提供できます。詳細はこのドキュメントの範囲外ではありませんが、Linux [Linux]とPrevailが多くの詳細を提供します。将来のIETF作業は、信頼できないBPFプログラムの安全な実行を可能にするために、検証剤の期待とビルディングブロックを文書化します。"
    },
    {
      "indent": 3,
      "text": "Executing programs using the BPF instruction set also requires either an interpreter or a compiler to translate them to built-in hardware processor instructions. In general, interpreters are considered a source of insecurity (e.g., gadgets susceptible to side-channel attacks due to speculative execution) whenever one is used in the same memory address space as data with confidentiality concerns. As such, use of a compiler is recommended instead. Compilers should be audited carefully for vulnerabilities to ensure that compilation of a trusted and verified BPF program to built-in processor instructions does not introduce vulnerabilities.",
      "ja": "BPF命令セットを使用してプログラムを実行するには、インタープリターまたはコンパイラのいずれかが組み込みのハードウェアプロセッサ命令に変換される必要があります。一般に、通訳者は、機密性の懸念を持つデータと同じメモリアドレス空間で使用される場合はいつでも、不安の原因（たとえば、投機的実行によるサイドチャネル攻撃の影響を受けやすいガジェット）と見なされます。そのため、代わりにコンパイラの使用をお勧めします。コンパイラは、信頼できる検証済みのBPFプログラムを組み込みプロセッサ命令に編集しても、脆弱性を導入しないようにするために、脆弱性について慎重に監査する必要があります。"
    },
    {
      "indent": 3,
      "text": "Exposing functionality via BPF extends the interface between the component executing the BPF program and the component submitting it. Careful consideration of what functionality is exposed and how that impacts the security properties desired is required.",
      "ja": "BPFを介して機能を公開すると、BPFプログラムを実行するコンポーネントとそれを送信するコンポーネントとの間のインターフェイスが拡張されます。どの機能が公開されているか、それが望むセキュリティプロパティにどのように影響するかを慎重に検討することが必要です。"
    },
    {
      "indent": 0,
      "text": "7. IANA Considerations",
      "section_title": true,
      "ja": "7. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document defines two registries.",
      "ja": "このドキュメントでは、2つのレジストリを定義しています。"
    },
    {
      "indent": 0,
      "text": "7.1. BPF Instruction Conformance Groups Registry",
      "section_title": true,
      "ja": "7.1. BPF命令適合グループレジストリ"
    },
    {
      "indent": 3,
      "text": "This document defines an IANA registry for BPF instruction conformance groups, as follows:",
      "ja": "このドキュメントは、次のように、BPF命令の適合グループのIANAレジストリを定義します。"
    },
    {
      "indent": 6,
      "text": "* Name of the registry: BPF Instruction Conformance Groups",
      "ja": "* レジストリの名前：BPF命令適合グループ"
    },
    {
      "indent": 6,
      "text": "* Name of the registry group: BPF Instructions",
      "ja": "* レジストリグループの名前：BPF手順"
    },
    {
      "indent": 6,
      "text": "* Required information for registrations: See the BPF Instruction Conformance Groups Registration Template (Section 7.1.1)",
      "ja": "* 登録に必要な情報：BPF命令の適合グループ登録テンプレート（セクション7.1.1）を参照してください"
    },
    {
      "indent": 6,
      "text": "* Syntax of registry entries: Each entry has the following fields: name, description, includes, excludes, status, change controller, and reference. See Section 7.1.1 for more details.",
      "ja": "* レジストリエントリの構文：各エントリには、次のフィールドがあります。名前、説明、含まれる、除外、ステータス、変更コントローラー、およびリファレンス。詳細については、セクション7.1.1を参照してください。"
    },
    {
      "indent": 6,
      "text": "* Registration policy (see Section 4 of [RFC8126] for details):",
      "ja": "* 登録ポリシー（詳細については[RFC8126]のセクション4を参照）："
    },
    {
      "indent": 12,
      "text": "- Permanent: Standards Action or IESG Approval",
      "ja": "- 永久：標準訴訟またはIESGの承認"
    },
    {
      "indent": 12,
      "text": "- Provisional: Specification Required",
      "ja": "- 暫定：仕様が必要です"
    },
    {
      "indent": 12,
      "text": "- Historical: Specification Required",
      "ja": "- 歴史：仕様が必要です"
    },
    {
      "indent": 6,
      "text": "* Contact: BPF Working Group",
      "ja": "* 連絡先：BPFワーキンググループ"
    },
    {
      "indent": 6,
      "text": "* Change Controller: IETF",
      "ja": "* Change Controller：IETF"
    },
    {
      "indent": 3,
      "text": "Initial entries in this registry are as follows:",
      "ja": "このレジストリの初期エントリは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "+========+===============+========+========+============+===========+\n|Name    | Description   |Includes|Excludes| Status     | Reference |\n+========+===============+========+========+============+===========+\n|atomic32| 32-bit        |-       |-       | Permanent  | RFC 9669, |\n|        | atomic        |        |        |            | Section   |\n|        | instructions  |        |        |            | 5.3       |\n+--------+---------------+--------+--------+------------+-----------+\n|atomic64| 64-bit        |atomic32|-       | Permanent  | RFC 9669, |\n|        | atomic        |        |        |            | Section   |\n|        | instructions  |        |        |            | 5.3       |\n+--------+---------------+--------+--------+------------+-----------+\n|base32  | 32-bit base   |-       |-       | Permanent  | RFC 9669  |\n|        | instructions  |        |        |            |           |\n+--------+---------------+--------+--------+------------+-----------+\n|base64  | 64-bit base   |base32  |-       | Permanent  | RFC 9669  |\n|        | instructions  |        |        |            |           |\n+--------+---------------+--------+--------+------------+-----------+\n|divmul32| 32-bit        |-       |-       | Permanent  | RFC 9669, |\n|        | division and  |        |        |            | Section   |\n|        | modulo        |        |        |            | 4.1       |\n+--------+---------------+--------+--------+------------+-----------+\n|divmul64| 64-bit        |divmul32|-       | Permanent  | RFC 9669, |\n|        | division and  |        |        |            | Section   |\n|        | modulo        |        |        |            | 4.1       |\n+--------+---------------+--------+--------+------------+-----------+\n|packet  | Legacy        |-       |-       | Historical | RFC 9669, |\n|        | packet        |        |        |            | Section   |\n|        | instructions  |        |        |            | 5.5       |\n+--------+---------------+--------+--------+------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 13: Initial Conformance Groups",
      "ja": "表13：初期適合グループ"
    },
    {
      "indent": 0,
      "text": "7.1.1. BPF Instruction Conformance Groups Registration Template",
      "section_title": true,
      "ja": "7.1.1. BPF命令適合グループ登録テンプレート"
    },
    {
      "indent": 3,
      "text": "This template describes the fields that must be supplied in a registration request:",
      "ja": "このテンプレートは、登録リクエストで提供する必要があるフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Name:",
      "ja": "名前："
    },
    {
      "indent": 12,
      "text": "Alphanumeric label indicating the name of the conformance group.",
      "ja": "適合グループの名前を示す英数字ラベル。"
    },
    {
      "indent": 3,
      "text": "Description:",
      "ja": "説明："
    },
    {
      "indent": 12,
      "text": "Brief description of the conformance group.",
      "ja": "適合グループの簡単な説明。"
    },
    {
      "indent": 3,
      "text": "Includes:",
      "ja": "含まれる："
    },
    {
      "indent": 12,
      "text": "Any other conformance groups that are included by this group.",
      "ja": "このグループに含まれる他の適合グループ。"
    },
    {
      "indent": 3,
      "text": "Excludes:",
      "ja": "除外："
    },
    {
      "indent": 12,
      "text": "Any other conformance groups that are excluded by this group.",
      "ja": "このグループによって除外された他の適合グループ。"
    },
    {
      "indent": 3,
      "text": "Status:",
      "ja": "状態："
    },
    {
      "indent": 12,
      "text": "This reflects the status requested and must be one of 'Permanent', 'Provisional', or 'Historical'.",
      "ja": "これは、要求されたステータスを反映しており、「永続的」、「暫定」、または「歴史的」の1つでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Contact:",
      "ja": "接触："
    },
    {
      "indent": 12,
      "text": "Person (including contact information) to contact for further information.",
      "ja": "詳細については、連絡先に人（連絡先情報を含む）。"
    },
    {
      "indent": 3,
      "text": "Change Controller:",
      "ja": "Change Controller："
    },
    {
      "indent": 12,
      "text": "Organization or person (often the author of the defining specification), including contact information, authorized to change this.",
      "ja": "組織または個人（多くの場合、定義仕様の著者）は、連絡先情報を含み、これを変更することを許可されています。"
    },
    {
      "indent": 3,
      "text": "Reference:",
      "ja": "参照："
    },
    {
      "indent": 12,
      "text": "A reference to the defining specification. Include full citations for all referenced documents. Registration requests for 'Provisional' registration can be included in an Internet-Draft; when the documents are approved for publication as an RFC, the registration will be updated to 'Permanent'.",
      "ja": "定義仕様への参照。参照されたすべてのドキュメントに完全な引用を含めます。「暫定」登録の登録要求は、インターネットドラフトに含めることができます。ドキュメントがRFCとして公開されて承認された場合、登録は「永続的」に更新されます。"
    },
    {
      "indent": 0,
      "text": "7.2. BPF Instruction Set Registry",
      "section_title": true,
      "ja": "7.2. BPF命令セットレジストリ"
    },
    {
      "indent": 3,
      "text": "This document defines an IANA registry for BPF instructions, as follows:",
      "ja": "このドキュメントは、次のように、BPF命令のIANAレジストリを定義しています。"
    },
    {
      "indent": 6,
      "text": "* Name of the registry: BPF Instruction Set",
      "ja": "* レジストリの名前：BPF命令セット"
    },
    {
      "indent": 6,
      "text": "* Name of the registry group: BPF Instructions",
      "ja": "* レジストリグループの名前：BPF手順"
    },
    {
      "indent": 6,
      "text": "* Required information for registrations: See the BPF Instruction Registration Template (Section 7.2.1)",
      "ja": "* 登録に必要な情報：BPF命令登録テンプレートを参照してください（セクション7.2.1）"
    },
    {
      "indent": 6,
      "text": "* Syntax of registry entries: Each entry has the following fields: opcode, src, offset, imm, description, groups, change controller, and reference. See Section 7.2.1 for more details.",
      "ja": "* レジストリエントリの構文：各エントリには、OpCode、SRC、Offset、IMM、説明、グループ、Change Controller、およびReferenceの次のフィールドがあります。詳細については、セクション7.2.1を参照してください。"
    },
    {
      "indent": 6,
      "text": "* Registration policy: New instructions require a new entry in the conformance group registry and the same registration policies apply.",
      "ja": "* 登録ポリシー：新しい指示には、コンフォーマンスグループレジストリに新しいエントリが必要であり、同じ登録ポリシーが適用されます。"
    },
    {
      "indent": 6,
      "text": "* Contact: BPF Working Group",
      "ja": "* 連絡先：BPFワーキンググループ"
    },
    {
      "indent": 6,
      "text": "* Change Controller: IETF",
      "ja": "* Change Controller：IETF"
    },
    {
      "indent": 6,
      "text": "* Initial registrations: See Appendix A. Instructions other than those listed as deprecated are Permanent. Any listed as deprecated are Historical.",
      "ja": "* 初期登録：付録Aを参照してください。非推奨としてリストされているもの以外の指示は永続的です。非推奨としてリストされているものは歴史的です。"
    },
    {
      "indent": 0,
      "text": "7.2.1. BPF Instruction Registration Template",
      "section_title": true,
      "ja": "7.2.1. BPF命令登録テンプレート"
    },
    {
      "indent": 3,
      "text": "This template describes the fields that must be supplied in a registration request:",
      "ja": "このテンプレートは、登録リクエストで提供する必要があるフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Opcode:",
      "ja": "opcode："
    },
    {
      "indent": 12,
      "text": "A 1-byte value in hex format indicating the value of the opcode field.",
      "ja": "OpCodeフィールドの値を示すヘックス形式の1バイト値。"
    },
    {
      "indent": 3,
      "text": "Src_reg:",
      "ja": "src_reg："
    },
    {
      "indent": 12,
      "text": "Either a numeric value indicating the value of the src_reg field, or \"any\".",
      "ja": "SRC_REGフィールドの値を示す数値、または「ANY」のいずれか。"
    },
    {
      "indent": 3,
      "text": "Offset:",
      "ja": "オフセット："
    },
    {
      "indent": 12,
      "text": "Either a numeric value indicating the value of the offset field, or \"any\".",
      "ja": "オフセットフィールドの値を示す数値または「any」のいずれか。"
    },
    {
      "indent": 3,
      "text": "Imm:",
      "ja": "Imm:"
    },
    {
      "indent": 12,
      "text": "Either a value indicating the value of the imm field, or \"any\".",
      "ja": "IMMフィールドの値を示す値、または「any」のいずれか。"
    },
    {
      "indent": 3,
      "text": "Description:",
      "ja": "説明："
    },
    {
      "indent": 12,
      "text": "Description of what the instruction does, typically in pseudocode.",
      "ja": "命令が行うことの説明、通常はPseudocodeで。"
    },
    {
      "indent": 3,
      "text": "Groups:",
      "ja": "グループ："
    },
    {
      "indent": 12,
      "text": "A list of one or more comma-separated conformance groups to which the instruction belongs.",
      "ja": "命令が属する1つ以上のコンマ分離された適合グループのリスト。"
    },
    {
      "indent": 3,
      "text": "Contact:",
      "ja": "接触："
    },
    {
      "indent": 12,
      "text": "Person (including contact information) to contact for further information.",
      "ja": "詳細については、連絡先に人（連絡先情報を含む）。"
    },
    {
      "indent": 3,
      "text": "Change Controller:",
      "ja": "Change Controller："
    },
    {
      "indent": 12,
      "text": "Organization or person (often the author), including contact information, authorized to change this.",
      "ja": "連絡先情報を含む組織または個人（多くの場合著者）は、これを変更することを許可されています。"
    },
    {
      "indent": 3,
      "text": "Reference:",
      "ja": "参照："
    },
    {
      "indent": 12,
      "text": "A reference to the defining specification. Include full citations for all referenced documents. Registration requests for 'Provisional' registration can be included in an Internet-Draft; when the documents are approved for publication as an RFC, the registration will be updated to 'Permanent'.",
      "ja": "定義仕様への参照。参照されたすべてのドキュメントに完全な引用を含めます。「暫定」登録の登録要求は、インターネットドラフトに含めることができます。ドキュメントがRFCとして公開されて承認された場合、登録は「永続的」に更新されます。"
    },
    {
      "indent": 0,
      "text": "7.3. Adding Instructions",
      "section_title": true,
      "ja": "7.3. 手順を追加します"
    },
    {
      "indent": 3,
      "text": "A specification may add additional instructions to the BPF Instruction Set registry. Once a conformance group is registered with a set of instructions, no further instructions can be added to that conformance group. A specification should instead create a new conformance group that includes the original conformance group, plus any newly added instructions. Inclusion of the original conformance group is done via the \"includes\" column of the BPF Instruction Conformance Groups registry, and inclusion of newly added instructions is done via the \"groups\" column of the BPF Instruction Set registry.",
      "ja": "仕様は、BPF命令セットレジストリに追加の命令を追加する場合があります。適合グループが一連の指示に登録されると、その適合グループにそれ以上の指示を追加することはできません。代わりに、仕様は、元の適合グループと新しく追加された指示を含む新しいコンフォーマンスグループを作成する必要があります。元の適合グループの包含は、BPF命令コンフォーマンスグループレジストリの「含まれる」列を介して行われ、新しく追加された命令を含めることは、BPF命令セットレジストリの「グループ」列を介して行われます。"
    },
    {
      "indent": 3,
      "text": "For example, consider an existing hypothetical group called \"example\" with two instructions in it. One might add two more instructions by first adding an \"examplev2\" group to the BPF Instruction Conformance Groups registry as follows:",
      "ja": "たとえば、「例」と呼ばれる既存の仮説グループを検討してください。次のように、最初に「examplev2」グループをBPF命令順応グループレジストリに追加することにより、さらに2つの命令を追加することができます。"
    },
    {
      "indent": 4,
      "text": "+===========+==================+==========+==========+===========+\n| Name      | Description      | Includes | Excludes | Status    |\n+===========+==================+==========+==========+===========+\n| example   | Original example | -        | -        | Permanent |\n|           | instructions     |          |          |           |\n+-----------+------------------+----------+----------+-----------+\n| examplev2 | Newer set of     | example  | -        | Permanent |\n|           | example          |          |          |           |\n|           | instructions     |          |          |           |\n+-----------+------------------+----------+----------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 13,
      "text": "Table 14: Conformance Group Example for Addition",
      "ja": "表14：追加のグループの例"
    },
    {
      "indent": 3,
      "text": "And then adding the new instructions into the BPF Instruction Set registry as follows:",
      "ja": "次に、次のように新しい指示をBPF命令セットレジストリに追加します。"
    },
    {
      "indent": 7,
      "text": "+========+=====+================================+===========+\n| opcode | ... | Description                    | Groups    |\n+========+=====+================================+===========+\n| aaa    | ... | Original example instruction 1 | example   |\n+--------+-----+--------------------------------+-----------+\n| bbb    | ... | Original example instruction 2 | example   |\n+--------+-----+--------------------------------+-----------+\n| ccc    | ... | Added example instruction 3    | examplev2 |\n+--------+-----+--------------------------------+-----------+\n| ddd    | ... | Added example instruction 4    | examplev2 |\n+--------+-----+--------------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "Table 15: Instruction Addition Example",
      "ja": "表15：命令の追加例"
    },
    {
      "indent": 3,
      "text": "Supporting the \"examplev2\" group thus requires supporting all four example instructions.",
      "ja": "したがって、「ExampleV2」グループをサポートするには、4つの例すべての命令をサポートする必要があります。"
    },
    {
      "indent": 0,
      "text": "7.4. Deprecating Instructions",
      "section_title": true,
      "ja": "7.4. 違反の指示"
    },
    {
      "indent": 3,
      "text": "Deprecating instructions that are part of an existing conformance group can be done by defining a new conformance group for the newly deprecated instructions, and defining a new conformance group that supersedes the existing conformance group containing the instructions, where the new conformance group includes the existing one and excludes the deprecated instruction group.",
      "ja": "既存の適合グループの一部である非推奨指示は、新たに非推奨の指示の新しい適合グループを定義し、新しい適合グループが既存のものを含む既存の適合グループに取って代わる新しい適合グループを定義することで実行できます。非推奨の指導グループを除外します。"
    },
    {
      "indent": 3,
      "text": "For example, if deprecating an instruction in an existing hypothetical group called \"example\", two new groups (\"legacyexample\" and \"examplev2\") might be registered in the BPF Instruction Conformance Groups registry as follows:",
      "ja": "たとえば、「Example」と呼ばれる既存の仮説グループで命令を非難する場合、2つの新しいグループ（「Legayexample」と「ExampleV2」）がBPF命令コンフォーマンスグループレジストリに次のように登録される可能性があります。"
    },
    {
      "indent": 3,
      "text": "+===============+==============+========+===============+==========+\n| Name          | Description  |Includes| Excludes      |Status    |\n+===============+==============+========+===============+==========+\n| example       | Original     |-       | -             |Permanent |\n|               | example      |        |               |          |\n|               | instructions |        |               |          |\n+---------------+--------------+--------+---------------+----------+\n| legacyexample | Legacy       |-       | -             |Historical|\n|               | example      |        |               |          |\n|               | instructions |        |               |          |\n+---------------+--------------+--------+---------------+----------+\n| examplev2     | Example      |example | legacyexample |Permanent |\n|               | instructions |        |               |          |\n+---------------+--------------+--------+---------------+----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "Table 16: Conformance Group Example for Deprecation",
      "ja": "表16：非推奨の適合グループの例"
    },
    {
      "indent": 3,
      "text": "The BPF Instruction Set registry entries for the deprecated instructions would then be updated to add \"legacyexample\" to the set of groups for those instructions, as follows:",
      "ja": "控除された命令のBPF命令セットレジストリエントリを更新して、次のように次のように、これらの命令のグループのセットに「LegacyExample」を追加します。"
    },
    {
      "indent": 6,
      "text": "+========+=====+=============================+===============+\n| opcode | ... | Description                 | Groups        |\n+========+=====+=============================+===============+\n| aaa    | ... | Good original instruction 1 | example       |\n+--------+-----+-----------------------------+---------------+\n| bbb    | ... | Good original instruction 2 | example       |\n+--------+-----+-----------------------------+---------------+\n| ccc    | ... | Bad original instruction 3  | example,      |\n|        |     |                             | legacyexample |\n+--------+-----+-----------------------------+---------------+\n| ddd    | ... | Bad original instruction 4  | example,      |\n|        |     |                             | legacyexample |\n+--------+-----+-----------------------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "Table 17: Instruction Deprecation Example",
      "ja": "表17：指示の非推奨の例"
    },
    {
      "indent": 3,
      "text": "Finally, updated implementations that dropped support for the deprecated instructions would then be able to claim conformance to \"examplev2\" rather than \"example\".",
      "ja": "最後に、非推奨の命令のサポートをドロップした更新された実装は、「Example」ではなく「ExampleV2」への適合を請求できるようになります。"
    },
    {
      "indent": 0,
      "text": "7.5. Change Control",
      "section_title": true,
      "ja": "7.5. 制御を変更します"
    },
    {
      "indent": 3,
      "text": "Registrations can be updated in a registry by the same mechanism as required for an initial registration. In cases where the original definition of an entry is contained in an IESG-approved document, in which case the IETF would be the change controller, update of the specification also requires IESG approval.",
      "ja": "登録は、初期登録に必要なメカニズムと同じメカニズムによってレジストリで更新できます。エントリの元の定義がIESGが承認したドキュメントに含まれている場合、IETFは変更コントローラーになりますが、仕様の更新にはIESGの承認も必要です。"
    },
    {
      "indent": 3,
      "text": "'Provisional' registrations can be updated by the change controller designated in the existing registration. In addition, the IESG can reassign responsibility for a 'Provisional' registration or can request specific changes to an entry. This will enable changes to be made to entries where the original registrant is out of contact or unwilling or unable to make changes.",
      "ja": "「暫定的な」登録は、既存の登録で指定された変更コントローラーによって更新できます。さらに、IESGは「暫定的な」登録の責任を再割り当てすることができたり、エントリへの特定の変更を要求できます。これにより、元の登録者が接触していない、または変更を行うことができない、または変更を行うことができないエントリに変更を加えることができます。"
    },
    {
      "indent": 3,
      "text": "Transition from 'Provisional' to 'Permanent' status can be requested and approved in the same manner as a new 'Permanent' registration. Transition from 'Permanent' to 'Historical' status requires IESG approval. Transition from 'Provisional' to 'Historical' can be requested by anyone authorized to update the 'Provisional' registration.",
      "ja": "「暫定」から「永久」ステータスへの移行は、新しい「永久」登録と同じ方法で要求および承認できます。「永久」から「歴史的」ステータスへの移行には、IESGの承認が必要です。「暫定」から「歴史的」への移行は、「暫定的な」登録を更新することを許可された人なら誰でも要求できます。"
    },
    {
      "indent": 0,
      "text": "7.6. Expert Review Instructions",
      "section_title": true,
      "ja": "7.6. 専門家のレビューの指示"
    },
    {
      "indent": 3,
      "text": "The IANA registries established by this document are informed by written specifications, which themselves are facilitated and approved by an Expert Review process (see Section 5.3 of [RFC8126]).",
      "ja": "このドキュメントによって確立されたIANAレジストリは、書面による仕様によって通知されます。これは、専門家のレビュープロセスによって促進および承認されています（[RFC8126]のセクション5.3を参照）。"
    },
    {
      "indent": 3,
      "text": "Designated experts are expected to consult with the active BPF working group (e.g., via email to the working group's mailing list) if it exists, as well as other interested parties (e.g., via email to one or more active mailing list(s) for relevant BPF communities and platforms). The designated expert is expected to verify that the encoding and semantics for any new instructions are properly documented in a public-facing specification. In the event of future RFC documents for ISA extensions, experts may permit early assignment before the RFC document is available, as long as a specification that satisfies the above requirements exists.",
      "ja": "指定された専門家は、それが存在する場合は、アクティブなBPFワーキンググループ（ワーキンググループのメーリングリストへの電子メールを介して）に相談することが期待されます。関連するBPFコミュニティとプラットフォーム）。指定された専門家は、新しい指示のエンコーディングとセマンティクスが公開仕様に適切に文書化されていることを確認することが期待されています。ISA拡張機能の将来のRFCドキュメントが発生した場合、上記の要件を満たす仕様が存在する限り、RFCドキュメントが利用可能になる前に、専門家は早期の割り当てを許可する場合があります。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8. 参考文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[IEN137]   Cohen, D., \"ON HOLY WARS AND A PLEA FOR PEACE\", IEN 137, 1\n           April 1980, <https://www.rfc-editor.org/ien/ien137.txt>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\n           DOI 10.17487/RFC2119, March 1997,\n           <https://www.rfc-editor.org/info/rfc2119>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n           Writing an IANA Considerations Section in RFCs\", BCP 26,\n           RFC 8126, DOI 10.17487/RFC8126, June 2017,\n           <https://www.rfc-editor.org/info/rfc8126>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n           2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n           May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[LINUX]    \"eBPF verifier\",\n           <https://www.kernel.org/doc/html/latest/bpf/\n           verifier.html>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[PREVAIL]  Gershuni, E., Amit, N., Gurfinkel, A., Narodytska, N.,\n           Navas, J., Rinetzky, N., Ryzhyk, L., and M. Sagiv, \"Simple\n           and Precise Static Analysis of Untrusted Linux Kernel\n           Extensions\", DOI 10.1145/3314221.3314590, June 2019,\n           <https://doi.org/10.1145/3314221.3314590>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix A. Initial BPF Instruction Set Values",
      "section_title": true,
      "ja": "付録A. 初期BPF命令セット値"
    },
    {
      "indent": 3,
      "text": "Initial values for the BPF Instruction Set registry are given below. The descriptions in this table are informative. In case of any discrepancy, the reference is authoritative.",
      "ja": "BPF命令セットレジストリの初期値を以下に示します。この表の説明は有益です。矛盾の場合、参照は権威あるものです。"
    },
    {
      "indent": 3,
      "text": "+======+=======+====+====+========================+========+=======+\n|opcode|src_reg|off-|imm |Description             |Groups  |Ref    |\n|      |       |set |    |                        |        |       |\n+======+=======+====+====+========================+========+=======+\n|0x00  |0x0    |0   |any |(additional immediate   |base64  |RFC    |\n|      |       |    |    |value)                  |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x04  |0x0    |0   |any |dst = (u32)((u32)dst +  |base32  |RFC    |\n|      |       |    |    |(u32)imm)               |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x05  |0x0    |any |0x00|goto +offset            |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x06  |0x0    |0   |any |goto +imm               |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x07  |0x0    |0   |any |dst += imm              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x0c  |any    |0   |0x00|dst = (u32)((u32)dst +  |base32  |RFC    |\n|      |       |    |    |(u32)src)               |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x0f  |any    |0   |0x00|dst += src              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x14  |0x0    |0   |any |dst = (u32)((u32)dst -  |base32  |RFC    |\n|      |       |    |    |(u32)imm)               |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x15  |0x0    |any |any |if dst == imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x16  |0x0    |any |any |if (u32)dst == imm goto |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x17  |0x0    |0   |any |dst -= imm              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x0    |0   |any |dst = (next_imm << 32) ||base64  |RFC    |\n|      |       |    |    |imm                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x1    |0   |any |dst = map_by_fd(imm)    |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x2    |0   |any |dst =                   |base64  |RFC    |\n|      |       |    |    |map_val(map_by_fd(imm)) |        |9669,  |\n|      |       |    |    |+ next_imm              |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x3    |0   |any |dst = var_addr(imm)     |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x4    |0   |any |dst = code_addr(imm)    |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x5    |0   |any |dst = map_by_idx(imm)   |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x18  |0x6    |0   |any |dst =                   |base64  |RFC    |\n|      |       |    |    |map_val(map_by_idx(imm))|        |9669,  |\n|      |       |    |    |+ next_imm              |        |Section|\n|      |       |    |    |                        |        |5.4    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x1c  |any    |0   |0x00|dst = (u32)((u32)dst -  |base32  |RFC    |\n|      |       |    |    |(u32)src)               |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x1d  |any    |any |0x00|if dst == src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x1e  |any    |any |0x00|if (u32)dst == (u32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x1f  |any    |0   |0x00|dst -= src              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x20  |0x0    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x24  |0x0    |0   |any |dst = (u32)(dst * imm)  |divmul32|RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x25  |0x0    |any |any |if dst > imm goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x26  |0x0    |any |any |if (u32)dst > imm goto  |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x27  |0x0    |0   |any |dst *= imm              |divmul64|RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x28  |0x0    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x2c  |any    |0   |0x00|dst = (u32)(dst * src)  |divmul32|RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x2d  |any    |any |0x00|if dst > src goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x2e  |any    |any |0x00|if (u32)dst > (u32)src  |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x2f  |any    |0   |0x00|dst *= src              |divmul64|RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x30  |0x0    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x34  |0x0    |0   |any |dst = (u32)((imm != 0) ?|divmul32|RFC    |\n|      |       |    |    |((u32)dst / (u32)imm) : |        |9669,  |\n|      |       |    |    |0)                      |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x34  |0x0    |1   |any |dst = (u32)((imm != 0) ?|divmul32|RFC    |\n|      |       |    |    |((s32)dst s/ imm) : 0)  |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x35  |0x0    |any |any |if dst >= imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x36  |0x0    |any |any |if (u32)dst >= imm goto |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x37  |0x0    |0   |any |dst = (imm != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |/ (u32)imm) : 0         |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x37  |0x0    |1   |any |dst = (imm != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |s/ imm) : 0             |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3c  |any    |0   |0x00|dst = (u32)((src != 0) ?|divmul32|RFC    |\n|      |       |    |    |((u32)dst / (u32)src) : |        |9669,  |\n|      |       |    |    |0)                      |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3c  |any    |1   |0x00|dst = (u32)((src != 0) ?|divmul32|RFC    |\n|      |       |    |    |((s32)dst s/(s32)src) : |        |9669,  |\n|      |       |    |    |0)                      |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3d  |any    |any |0x00|if dst >= src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3e  |any    |any |0x00|if (u32)dst >= (u32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3f  |any    |0   |0x00|dst = (src != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |/ src) : 0              |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x3f  |any    |1   |0x00|dst = (src != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |s/ src) : 0             |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x40  |any    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x44  |0x0    |0   |any |dst = (u32)(dst | imm)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x45  |0x0    |any |any |if dst & imm goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x46  |0x0    |any |any |if (u32)dst & imm goto  |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x47  |0x0    |0   |any |dst |= imm              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x48  |any    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x4c  |any    |0   |0x00|dst = (u32)(dst | src)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x4d  |any    |any |0x00|if dst & src goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x4e  |any    |any |0x00|if (u32)dst & (u32)src  |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x4f  |any    |0   |0x00|dst |= src              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x50  |any    |0   |any |(deprecated,            |packet  |RFC    |\n|      |       |    |    |implementation-specific)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.5    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x54  |0x0    |0   |any |dst = (u32)(dst & imm)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x55  |0x0    |any |any |if dst != imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x56  |0x0    |any |any |if (u32)dst != imm goto |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x57  |0x0    |0   |any |dst &= imm              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x5c  |any    |0   |0x00|dst = (u32)(dst & src)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x5d  |any    |any |0x00|if dst != src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x5e  |any    |any |0x00|if (u32)dst != (u32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x5f  |any    |0   |0x00|dst &= src              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x61  |any    |any |0x00|dst = *(u32 *)(src +    |base32  |RFC    |\n|      |       |    |    |offset)                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x62  |0x0    |any |any |*(u32 *)(dst + offset) =|base32  |RFC    |\n|      |       |    |    |imm                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x63  |any    |any |0x00|*(u32 *)(dst + offset) =|base32  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x64  |0x0    |0   |any |dst = (u32)(dst << imm) |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x65  |0x0    |any |any |if dst s> imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x66  |0x0    |any |any |if (s32)dst s> (s32)imm |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x67  |0x0    |0   |any |dst <<= imm             |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x69  |any    |any |0x00|dst = *(u16 *)(src +    |base32  |RFC    |\n|      |       |    |    |offset)                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6a  |0x0    |any |any |*(u16 *)(dst + offset) =|base32  |RFC    |\n|      |       |    |    |imm                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6b  |any    |any |0x00|*(u16 *)(dst + offset) =|base32  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6c  |any    |0   |0x00|dst = (u32)(dst << src) |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6d  |any    |any |0x00|if dst s> src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6e  |any    |any |0x00|if (s32)dst s> (s32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x6f  |any    |0   |0x00|dst <<= src             |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x71  |any    |any |0x00|dst = *(u8 *)(src +     |base32  |RFC    |\n|      |       |    |    |offset)                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x72  |0x0    |any |any |*(u8 *)(dst + offset) = |base32  |RFC    |\n|      |       |    |    |imm                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x73  |any    |any |0x00|*(u8 *)(dst + offset) = |base32  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x74  |0x0    |0   |any |dst = (u32)(dst >> imm) |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x75  |0x0    |any |any |if dst s>= imm goto     |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x76  |0x0    |any |any |if (s32)dst s>= (s32)imm|base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x77  |0x0    |0   |any |dst >>= imm             |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x79  |any    |any |0x00|dst = *(u64 *)(src +    |base64  |RFC    |\n|      |       |    |    |offset)                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7a  |0x0    |any |any |*(u64 *)(dst + offset) =|base64  |RFC    |\n|      |       |    |    |imm                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7b  |any    |any |0x00|*(u64 *)(dst + offset) =|base64  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5      |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7c  |any    |0   |0x00|dst = (u32)(dst >> src) |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7d  |any    |any |0x00|if dst s>= src goto     |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7e  |any    |any |0x00|if (s32)dst s>= (s32)src|base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x7f  |any    |0   |0x00|dst >>= src             |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x84  |0x0    |0   |0x00|dst = (u32)-dst         |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x85  |0x0    |0   |any |call helper function by |base32  |RFC    |\n|      |       |    |    |static ID               |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3.1  |\n+------+-------+----+----+------------------------+--------+-------+\n|0x85  |0x1    |0   |any |call PC += imm          |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3.2  |\n+------+-------+----+----+------------------------+--------+-------+\n|0x85  |0x2    |0   |any |call helper function by |base32  |RFC    |\n|      |       |    |    |BTF ID                  |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3.1  |\n+------+-------+----+----+------------------------+--------+-------+\n|0x87  |0x0    |0   |0x00|dst = -dst              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x94  |0x0    |0   |any |dst = (u32)((imm !=     |divmul32|RFC    |\n|      |       |    |    |0)?((u32)dst % (u32)imm)|        |9669,  |\n|      |       |    |    |: dst)                  |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x94  |0x0    |1   |any |dst = (u32)((imm != 0) ?|divmul32|RFC    |\n|      |       |    |    |((s32)dst s% imm) : dst)|        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x95  |0x0    |0   |0x00|return                  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x97  |0x0    |0   |any |dst = (imm != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |% (u32)imm) : dst       |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x97  |0x0    |1   |any |dst = (imm != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |s% imm) : dst           |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x9c  |any    |0   |0x00|dst = (u32)((src !=     |divmul32|RFC    |\n|      |       |    |    |0)?((u32)dst % (u32)src)|        |9669,  |\n|      |       |    |    |: dst)                  |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x9c  |any    |1   |0x00|dst = (u32)((src !=     |divmul32|RFC    |\n|      |       |    |    |0)?((s32)dst s%         |        |9669,  |\n|      |       |    |    |(s32)src) :dst)         |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x9f  |any    |0   |0x00|dst = (src != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |% src) : dst            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0x9f  |any    |1   |0x00|dst = (src != 0) ? (dst |divmul64|RFC    |\n|      |       |    |    |s% src) : dst           |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xa4  |0x0    |0   |any |dst = (u32)(dst ^ imm)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xa5  |0x0    |any |any |if dst < imm goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xa6  |0x0    |any |any |if (u32)dst < imm goto  |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xa7  |0x0    |0   |any |dst ^= imm              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xac  |any    |0   |0x00|dst = (u32)(dst ^ src)  |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xad  |any    |any |0x00|if dst < src goto       |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xae  |any    |any |0x00|if (u32)dst < (u32)src  |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xaf  |any    |0   |0x00|dst ^= src              |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xb4  |0x0    |0   |any |dst = (u32) imm         |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xb5  |0x0    |any |any |if dst <= imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xb6  |0x0    |any |any |if (u32)dst <= imm goto |base32  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xb7  |0x0    |0   |any |dst = imm               |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbc  |any    |0   |0x00|dst = (u32) src         |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbc  |any    |8   |0x00|dst = (u32) (s32) (s8)  |base32  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbc  |any    |16  |0x00|dst = (u32) (s32) (s16) |base32  |RFC    |\n|      |       |    |    |src                     |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbd  |any    |any |0x00|if dst <= src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbe  |any    |any |0x00|if (u32)dst <= (u32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbf  |any    |0   |0x00|dst = src               |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbf  |any    |8   |0x00|dst = (s64) (s8) src    |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbf  |any    |16  |0x00|dst = (s64) (s16) src   |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xbf  |any    |32  |0x00|dst = (s64) (s32) src   |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x00|lock *(u32 *)(dst +     |atomic32|RFC    |\n|      |       |    |    |offset) += src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x01|src =                   |atomic32|RFC    |\n|      |       |    |    |atomic_fetch_add_32((u32|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x40|lock *(u32 *)(dst +     |atomic32|RFC    |\n|      |       |    |    |offset) |= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x41|src =                   |atomic32|RFC    |\n|      |       |    |    |atomic_fetch_or_32((u32 |        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x50|lock *(u32 *)(dst +     |atomic32|RFC    |\n|      |       |    |    |offset) &= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0x51|src =                   |atomic32|RFC    |\n|      |       |    |    |atomic_fetch_and_32((u32|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0xa0|lock *(u32 *)(dst +     |atomic32|RFC    |\n|      |       |    |    |offset) ^= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0xa1|src =                   |atomic32|RFC    |\n|      |       |    |    |atomic_fetch_xor_32((u32|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0xe1|src = xchg_32((u32      |atomic32|RFC    |\n|      |       |    |    |*)(dst + offset), src)  |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc3  |any    |any |0xf1|r0 = cmpxchg_32((u32    |atomic32|RFC    |\n|      |       |    |    |*)(dst + offset), r0,   |        |9669,  |\n|      |       |    |    |src)                    |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc4  |0x0    |0   |any |dst = (u32)(dst s>> imm)|base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc5  |0x0    |any |any |if dst s< imm goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc6  |0x0    |any |any |if (s32)dst s< (s32)imm |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xc7  |0x0    |0   |any |dst s>>= imm            |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xcc  |any    |0   |0x00|dst = (u32)(dst s>> src)|base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xcd  |any    |any |0x00|if dst s< src goto      |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xce  |any    |any |0x00|if (s32)dst s< (s32)src |base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xcf  |any    |0   |0x00|dst s>>= src            |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.1    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd4  |0x0    |0   |0x10|dst = htole16(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd4  |0x0    |0   |0x20|dst = htole32(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd4  |0x0    |0   |0x40|dst = htole64(dst)      |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd5  |0x0    |any |any |if dst s<= imm goto     |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd6  |0x0    |any |any |if (s32)dst s<= (s32)imm|base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd7  |0x0    |0   |0x10|dst = bswap16(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd7  |0x0    |0   |0x20|dst = bswap32(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xd7  |0x0    |0   |0x40|dst = bswap64(dst)      |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x00|lock *(u64 *)(dst +     |atomic64|RFC    |\n|      |       |    |    |offset) += src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x01|src =                   |atomic64|RFC    |\n|      |       |    |    |atomic_fetch_add_64((u64|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x40|lock *(u64 *)(dst +     |atomic64|RFC    |\n|      |       |    |    |offset) |= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x41|src =                   |atomic64|RFC    |\n|      |       |    |    |atomic_fetch_or_64((u64 |        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x50|lock *(u64 *)(dst +     |atomic64|RFC    |\n|      |       |    |    |offset) &= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0x51|src =                   |atomic64|RFC    |\n|      |       |    |    |atomic_fetch_and_64((u64|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0xa0|lock *(u64 *)(dst +     |atomic64|RFC    |\n|      |       |    |    |offset) ^= src          |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0xa1|src =                   |atomic64|RFC    |\n|      |       |    |    |atomic_fetch_xor_64((u64|        |9669,  |\n|      |       |    |    |*)(dst + offset), src)  |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0xe1|src = xchg_64((u64      |atomic64|RFC    |\n|      |       |    |    |*)(dst + offset), src)  |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdb  |any    |any |0xf1|r0 = cmpxchg_64((u64    |atomic64|RFC    |\n|      |       |    |    |*)(dst + offset), r0,   |        |9669,  |\n|      |       |    |    |src)                    |        |Section|\n|      |       |    |    |                        |        |5.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdc  |0x0    |0   |0x10|dst = htobe16(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdc  |0x0    |0   |0x20|dst = htobe32(dst)      |base32  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdc  |0x0    |0   |0x40|dst = htobe64(dst)      |base64  |RFC    |\n|      |       |    |    |                        |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.2    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xdd  |any    |any |0x00|if dst s<= src goto     |base64  |RFC    |\n|      |       |    |    |+offset                 |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+\n|0xde  |any    |any |0x00|if (s32)dst s<= (s32)src|base32  |RFC    |\n|      |       |    |    |goto +offset            |        |9669,  |\n|      |       |    |    |                        |        |Section|\n|      |       |    |    |                        |        |4.3    |\n+------+-------+----+----+------------------------+--------+-------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "Table 18: Initial BPF Instruction Set Values",
      "ja": "表18：初期BPF命令セット値"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "section_title": true,
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document was generated from instruction-set.rst in the Linux kernel repository, to which a number of other individuals have authored contributions over time, including Akhil Raj, Alexei Starovoitov, Brendan Jackman, Christoph Hellwig, Daniel Borkmann, Ilya Leoshkevich, Jiong Wang, Jose E. Marchesi, Kosuke Fujimoto, Shahab Vahedi, Tiezhu Yang, Will Hawkins, and Zheng Yejian, with review and suggestions by many others including Alan Jowett, Andrii Nakryiko, David Vernet, Jim Harris, Quentin Monnet, Song Liu, Shung-Hsi Yu, Stanislav Fomichev, Watson Ladd, and Yonghong Song.",
      "ja": "このドキュメントは、Linuxカーネルリポジトリの命令セットから生成されました。他の多くの個人は、Akhil Raj、Alexei Starovoitov、Brendan Jackman、Christoph Hellwig、Daniel Borkmann、Ilya Leoshkevich、Jiong Wangwang、Daniel Borkmann、Daniel Borkmann、Jiong Wangwangなど、時間の経過とともに貢献しています。、ホセ・E・マルケシ、藤本、シャハブ・ヴァヘディ、タイズ・ヤン、ウィル・ホーキンス、Zheng Yejian、アラン・ジョウェット、アンドリ・ナクリコ、デビッド・ヴェルネット、ジム・ハリス、クエンティン・モンネ、ソング・リウ、shung-Hsi Yu、Stanislav Fomichev、Watson Ladd、Yonghong Song。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "section_title": true,
      "ja": "著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Dave Thaler (editor)\nRedmond, WA 98052\nUnited States of America\nEmail: dave.thaler.ietf@gmail.com",
      "raw": true,
      "ja": ""
    }
  ]
}