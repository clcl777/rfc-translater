{
  "title": {
    "text": "RFC 3084 - COPS Usage for Policy Provisioning (COPS-PR)",
    "ja": "RFC 3084 - ポリシープロビジョニングのためのCOPSの使用（COPS-PR）"
  },
  "number": 3084,
  "created_at": "2023-12-21 15:17:22.506720+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                            K. Chan\nRequest for Comments: 3084                                   J. Seligson\nCategory: Standards Track                                Nortel Networks\n                                                               D. Durham\n                                                                   Intel\n                                                                  S. Gai\n                                                           K. McCloghrie\n                                                                   Cisco\n                                                               S. Herzog\n                                                               IPHighway\n                                                           F. Reichmeyer\n                                                                     PFN\n                                                             R. Yavatkar\n                                                                   Intel\n                                                                A. Smith\n                                                        Allegro Networks\n                                                              March 2001",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 13,
      "text": "COPS Usage for Policy Provisioning (COPS-PR)",
      "ja": "ポリシープロビジョニングのためのCOPSの使用（COPS-PR）"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2001）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the Common Open Policy Service (COPS) protocol for support of policy provisioning (COPS-PR). This specification is independent of the type of policy being provisioned (QoS, Security, etc.) but focuses on the mechanisms and conventions used to communicate provisioned information between PDPs and PEPs. The protocol extensions described in this document do not make any assumptions about the policy data model being communicated, but describe the message formats and objects that carry the modeled policy data.",
      "ja": "このドキュメントでは、ポリシープロビジョニング（COPS-PR）をサポートするための一般的なオープンポリシーサービス（COPS）プロトコルの使用について説明します。この仕様は、プロビジョニングされているポリシーの種類（QoS、セキュリティなど）とは無関係ですが、PDPとPEPの間でプロビジョニング情報を伝えるために使用されるメカニズムと規則に焦点を当てています。このドキュメントで説明されているプロトコル拡張は、伝達されるポリシーデータモデルについて仮定を立てるのではなく、モデル化されたポリシーデータを運ぶメッセージ形式とオブジェクトを説明します。"
    },
    {
      "indent": 0,
      "text": "Conventions used in this document",
      "ja": "このドキュメントで使用されている規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC-2119].",
      "ja": "「必須」、「そうしない」、「必須」、「必要」、「「しない」、「そうでない」、「そうではない」、「そうでない」、「推奨」、「5月」、および「オプション」は、[RFC-2119]に記載されているように解釈される。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "Glossary........................................................... 3\n1. Introduction.................................................... 3\n1.1. Why COPS for Provisioning?.................................... 5\n1.2. Interaction between the PEP and PDP........................... 5\n2. Policy Information Base (PIB)................................... 6\n2.1. Rules for Modifying and Extending PIBs........................ 7\n2.2. Adding PRCs to, or deprecating from, a PIB.................... 7\n2.2.1. Adding or Deprecating Attributes of a BER Encoded PRC....... 8\n2.3. COPS Operations Supported for a Provisioning Instance......... 8\n3. Message Content................................................. 9\n3.1. Request (REQ)  PEP -> PDP..................................... 9\n3.2. Decision (DEC)  PDP -> PEP....................................10\n3.3. Report State (RPT)  PEP -> PDP................................12\n4. COPS-PR Protocol Objects........................................13\n4.1. Complete Provisioning Instance Identifier (PRID)..............14\n4.2. Prefix PRID (PPRID)...........................................15\n4.3. Encoded Provisioning Instance Data (EPD)......................16\n4.4. Global Provisioning Error Object (GPERR)......................21\n4.5. PRC Class Provisioning Error Object (CPERR)...................22\n4.6. Error PRID Object (ErrorPRID).................................23\n5. COPS-PR Client-Specific Data Formats............................23\n5.1. Named Decision Data...........................................23\n5.2. ClientSI Request Data.........................................24\n5.3. Policy Provisioning Report Data...............................24\n5.3.1. Success and Failure Report-Type Data Format.................24\n5.3.2. Accounting Report-Type Data Format..........................25\n6. Common Operation................................................26\n7. Fault Tolerance.................................................28\n8. Security Considerations.........................................29\n9. IANA Considerations.............................................29\n10. Acknowledgements...............................................30\n11. References.....................................................30\n12. Authors' Addresses.............................................32\n13. Full Copyright Statement.......................................34",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Glossary",
      "ja": "用語集"
    },
    {
      "indent": 6,
      "text": "PRC Provisioning Class. A type of policy data. PRI Provisioning Instance. An instance of a PRC. PIB Policy Information Base. The database of policy information. PDP Policy Decision Point. See [RAP]. PEP Policy Enforcement Point. See [RAP]. PRID Provisioning Instance Identifier. Uniquely identifies an instance of a PRC.",
      "ja": "PRCプロビジョニングクラス。ポリシーデータの種類。PRIプロビジョニングインスタンス。PRCのインスタンス。PIBポリシー情報ベース。ポリシー情報のデータベース。PDPポリシーの決定ポイント。[rap]を参照してください。PEPポリシーの執行ポイント。[rap]を参照してください。PRIDプロビジョニングインスタンス識別子。PRCのインスタンスを独自に識別します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The IETF Resource Allocation Protocol (RAP) WG has defined the COPS (Common Open Policy Service) protocol [COPS] as a scalable protocol that allows policy servers (PDPs) to communicate policy decisions to network devices (PEPs). COPS was designed to support multiple types of policy clients.",
      "ja": "IETFリソース割り当てプロトコル（RAP）WGは、COPS（共通のオープンポリシーサービス）プロトコル[COPS]を、ポリシーサーバー（PDP）がネットワークデバイス（PEPS）にポリシー決定を伝えることを可能にするスケーラブルなプロトコルとして定義しました。COPSは、複数のタイプのポリシークライアントをサポートするように設計されました。"
    },
    {
      "indent": 3,
      "text": "COPS is a query/response protocol that supports two common models for policy control: Outsourcing and Configuration.",
      "ja": "COPSは、アウトソーシングと構成の2つの一般的なモデルをサポートするクエリ/応答プロトコルです。"
    },
    {
      "indent": 3,
      "text": "The Outsourcing model addresses the kind of events at the PEP that require an instantaneous policy decision (authorization). In the outsourcing scenario, the PEP delegates responsibility to an external policy server (PDP) to make decisions on its behalf. For example, in COPS Usage for RSVP [COPRSVP] when a RSVP reservation message arrives, the PEP must decide whether to admit or reject the request. It can outsource this decision by sending a specific query to its PDP, waiting for its decision before admitting the outstanding reservation.",
      "ja": "アウトソーシングモデルは、瞬間的なポリシー決定（承認）を必要とするPEPでの種類のイベントに対処します。アウトソーシングシナリオでは、PEPは、外部ポリシーサーバー（PDP）に責任を委任し、その代わりに決定を下します。たとえば、RSVP [COPRSVP]のCOPSの使用では、RSVP予約メッセージが届くと、PEPはリクエストを認めるか拒否するかを決定する必要があります。特定のクエリをPDPに送信することにより、この決定を外部委託し、未払いの予約を認める前に決定を待っています。"
    },
    {
      "indent": 3,
      "text": "The COPS Configuration model (herein described as the Provisioning model), on the other hand, makes no assumptions of such direct 1:1 correlation between PEP events and PDP decisions. The PDP may proactively provision the PEP reacting to external events (such as user input), PEP events, and any combination thereof (N:M correlation). Provisioning may be performed in bulk (e.g., entire router QoS configuration) or in portions (e.g., updating a DiffServ marking filter).",
      "ja": "一方、COPS構成モデル（ここではプロビジョニングモデルとして記述されている）は、PEPイベントとPDP決定の間にこのような直接的な1：1の相関を仮定しません。PDPは、外部イベント（ユーザー入力など）、PEPイベント、およびその任意の組み合わせ（n：M相関）に反応するPEPを積極的に提供する場合があります。プロビジョニングは、バルク（例：ルーターQoS構成全体）または部分（たとえば、DiffServマーキングフィルターの更新）で実行できます。"
    },
    {
      "indent": 3,
      "text": "Network resources are often provisioned based on relatively static SLAs (Service Level Agreements) at network boundaries. While the Outsourcing model is dynamically paced by the PEP in real-time, the Provisioning model is paced by the PDP in somewhat flexible timing over a wide range of configurable aspects of the PEP.",
      "ja": "ネットワークリソースは、ネットワークの境界で比較的静的なSLA（サービスレベル契約）に基づいて提供されることがよくあります。アウトソーシングモデルはPEPによってリアルタイムで動的にペースを合わせていますが、プロビジョニングモデルは、PEPの幅広い構成可能な側面にわたってやや柔軟なタイミングでPDPによってペースを合わせています。"
    },
    {
      "indent": 7,
      "text": "Edge Device               Policy Server\n+--------------+          +-----------+     +-----------+\n|              |          |           |     | External  |\n|              |  COPS    |           |     | Events    |\n|   +-----+    |  REQ()   |  +-----+  |     +---+-------+\n|   |     |----|----------|->|     |  |         |\n|   | PEP |    |          |  | PDP |<-|---------+\n|   |     |<---|----------|--|     |  |\n|   +-----+    |   COPS   |  +-----+  |\n|              |   DEC()  |           |\n+--------------+          +-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Figure 1: COPS Provisioning Model",
      "ja": "図1：COPSプロビジョニングモデル"
    },
    {
      "indent": 3,
      "text": "In COPS-PR, policy requests describe the PEP and its configurable parameters (rather than an operational event). If a change occurs in these basic parameters, an updated request is sent. Hence, requests are issued quite infrequently. Decisions are not necessarily mapped directly to requests, and are issued mostly when the PDP responds to external events or PDP events (policy/SLA updates).",
      "ja": "COPS-PRでは、ポリシーリクエストは、PEPとその構成可能なパラメーターを（運用上のイベントではなく）説明します。これらの基本的なパラメーターで変更が発生した場合、更新された要求が送信されます。したがって、リクエストは非常にまれに発行されます。決定は必ずしもリクエストに直接マッピングされるわけではなく、主にPDPが外部イベントまたはPDPイベントに応答した場合に発行されます（ポリシー/SLA更新）。"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the COPS protocol [COPS] for support of policy provisioning. This specification is independent of the type of policy being provisioned (QoS, Security, etc.). Rather, it focuses on the mechanisms and conventions used to communicate provisioned information between PDPs and PEPs. The data model assumed in this document is based on the concept of Policy Information Bases (PIBs) that define the policy data. There may be one or more PIBs for given area of policy and different areas of policy may have different sets of PIBs.",
      "ja": "このドキュメントでは、ポリシープロビジョニングをサポートするためのCOPSプロトコル[COPS]の使用について説明しています。この仕様は、プロビジョニングされているポリシーの種類（QoS、セキュリティなど）とは無関係です。むしろ、PDPとPEPの間でプロビジョニング情報を伝えるために使用されるメカニズムと慣習に焦点を当てています。このドキュメントで想定されるデータモデルは、ポリシーデータを定義するポリシー情報ベース（PIB）の概念に基づいています。特定の政策領域に1つ以上のPIBがあり、政策の異なる領域が異なるPIBのセットを持っている可能性があります。"
    },
    {
      "indent": 3,
      "text": "In order to support a model that includes multiple PDPs controlling non-overlapping areas of policy on a single PEP, the client-type specified by the PEP to the PDP is unique for the area of policy being managed. A single client-type for a given area of policy (e.g., QoS) will be used for all PIBs that exist in that area. The client should treat all the COPS-PR client-types it supports as non-overlapping and independent namespaces where instances MUST NOT be shared.",
      "ja": "単一のPEPでポリシーの非重複領域を制御する複数のPDPを含むモデルをサポートするために、PDPへのPEPによって指定されたクライアントタイプは、管理されているポリシーの分野でユニークです。特定のポリシー領域（QoSなど）の単一のクライアントタイプが、その領域に存在するすべてのPIBに使用されます。クライアントは、サポートするすべてのCOPS-PRクライアントタイプを、インスタンスを共有してはならない非重複および独立した名前空間として扱う必要があります。"
    },
    {
      "indent": 3,
      "text": "The examples used in this document are biased toward QoS Policy Provisioning in a Differentiated Services (DiffServ) environment. However, COPS-PR can be used for other types of provisioning policies under the same framework.",
      "ja": "このドキュメントで使用される例は、差別化されたサービス（DIFFSERV）環境でのQoSポリシープロビジョニングに偏っています。ただし、COPS-PRは、同じフレームワークの下で他のタイプのプロビジョニングポリシーに使用できます。"
    },
    {
      "indent": 0,
      "text": "1.1. Why COPS for Provisioning?",
      "section_title": true,
      "ja": "1.1. なぜプロビジョニングのための警官？"
    },
    {
      "indent": 3,
      "text": "COPS-PR has been designed within a framework that is optimized for efficiently provisioning policies across devices, based on the requirements defined in [RAP]. First, COPS-PR allows for efficient transport of attributes, large atomic transactions of data, and efficient and flexible error reporting. Second, as it has a single connection between the policy client and server per area of policy control identified by a COPS Client-Type, it guarantees only one server updates a particular policy configuration at any given time. Such a policy configuration is effectively locked, even from local console configuration, while the PEP is connected to a PDP via COPS. COPS uses reliable TCP transport and, thus, uses a state sharing/synchronization mechanism and exchanges differential updates only. If either the server or client are rebooted (or restarted) the other would know about it quickly. Last, it is defined as a real-time event-driven communications mechanism, never requiring polling between the PEP and PDP.",
      "ja": "COPS-PRは、[RAP]で定義されている要件に基づいて、デバイス間で効率的にポリシーをプロビジョニングするために最適化されたフレームワーク内で設計されています。第一に、COPS-PRは、属性の効率的な輸送、データの大規模な原子トランザクション、および効率的で柔軟なエラー報告を可能にします。第二に、COPSクライアントタイプによって識別されたポリシーコントロールの領域ごとにポリシークライアントとサーバーの間に単一の接続があるため、特定のポリシー構成をいつでも更新するサーバーが1つだけ保証されます。このようなポリシー構成は、ローカルコンソールの構成からでも効果的にロックされていますが、PEPはCOPを介してPDPに接続されています。COPSは信頼できるTCPトランスポートを使用しているため、状態共有/同期メカニズムを使用し、差分更新のみを交換します。サーバーまたはクライアントのいずれかが再起動（または再起動）されている場合、他の人はそれについて迅速に知っています。最後に、それはリアルタイムのイベント駆動型通信メカニズムとして定義され、PEPとPDPの間の投票を必要としません。"
    },
    {
      "indent": 0,
      "text": "1.2. Interaction between the PEP and PDP",
      "section_title": true,
      "ja": "1.2. PEPとPDP間の相互作用"
    },
    {
      "indent": 3,
      "text": "When a device boots, it opens a COPS connection to its Primary PDP. When the connection is established, the PEP sends information about itself to the PDP in the form of a configuration request. This information includes client specific information (e.g., hardware type, software release, configuration information). During this phase the client may also specify the maximum COPS-PR message size supported.",
      "ja": "デバイスが起動すると、プライマリPDPへのCOPS接続が開きます。接続が確立されると、PEPは構成要求の形でPDPにそれ自体に関する情報を送信します。この情報には、クライアント固有の情報（ハードウェアタイプ、ソフトウェアリリース、構成情報など）が含まれます。この段階では、クライアントはサポートされている最大COPS-PRメッセージサイズを指定することもできます。"
    },
    {
      "indent": 3,
      "text": "In response, the PDP downloads all provisioned policies that are currently relevant to that device. On receiving the provisioned policies, the device maps them into its local QoS mechanisms, and installs them. If conditions change at the PDP such that the PDP detects that changes are required in the provisioned policies currently in effect, then the PDP sends the changes (installs, updates, and/or deletes) in policy to the PEP, and the PEP updates its local configuration appropriately.",
      "ja": "これに応じて、PDPは、現在そのデバイスに関連しているすべてのプロビジョニングされたポリシーをダウンロードします。プロビジョニングされたポリシーを受信すると、デバイスはそれらをローカルQoSメカニズムにマッピングし、それらをインストールします。PDPで条件が変化してPDPが現在有効になっているプロビジョニングポリシーで変更が必要であることを検出すると、PDPはPEPに変更（インストール、更新、および/または削除）をPEPに送信し、PEPはその更新を更新します。ローカル構成を適切に。"
    },
    {
      "indent": 3,
      "text": "If, subsequently, the configuration of the device changes (board removed, board added, new software installed, etc.) in ways not covered by policies already known to the PEP, then the PEP asynchronously sends this unsolicited new information to the PDP in an updated configuration request. On receiving this new information, the PDP sends to the PEP any additional provisioned policies now needed by the PEP, or removes those policies that are no longer required.",
      "ja": "その後、デバイスの構成（ボード削除、ボードの追加、新しいソフトウェアがインストールされたなど）がPEPに既に知られているポリシーでカバーされていない方法で、PEPはこの未承諾の新しい情報をPDPに非同期的に送信します。更新された構成要求。この新しい情報を受信すると、PDPはPEPが現在必要とする追加のプロビジョニングポリシーをPEPに送信するか、不要なポリシーを削除します。"
    },
    {
      "indent": 0,
      "text": "2. Policy Information Base (PIB)",
      "section_title": true,
      "ja": "2. ポリシー情報ベース（PIB）"
    },
    {
      "indent": 3,
      "text": "The data carried by COPS-PR is a set of policy data. The protocol assumes a named data structure, known as a Policy Information Base (PIB), to identify the type and purpose of unsolicited policy information that is \"pushed\" from the PDP to the PEP for provisioning policy or sent to the PDP from the PEP as a notification. The PIB name space is common to both the PEP and the PDP and data instances within this space are unique within the scope of a given Client-Type and Request-State per TCP connection between a PEP and PDP. Note that given a device might implement multiple COPS Client-Types, a unique instance space is to be provided for each separate Client-Type. There is no sharing of instance data across the Client-Types implemented by a PEP, even if the classes being instantiated are of the same type and share the same instance identifier.",
      "ja": "COPS-PRが運ぶデータは、一連のポリシーデータです。プロトコルは、ポリシー情報ベース（PIB）として知られる名前付きデータ構造を想定して、PDPからPEPに「プッシュ」される未承諾ポリシー情報のタイプと目的を識別し、プロビジョニングポリシーのために、またはPEPからPDPに送信しました通知として。PIB名スペースは、PEPとPDPの両方に共通し、このスペース内のデータインスタンスは、PEPとPDPの間のTCP接続ごとに特定のクライアントタイプと要求状態の範囲内で一意です。デバイスが複数のCOPSクライアントタイプを実装する可能性がある場合、個別のクライアントタイプごとに一意のインスタンススペースが提供されることに注意してください。インスタンス化されているクラスが同じタイプであり、同じインスタンス識別子を共有している場合でも、PEPによって実装されたクライアントタイプ全体でインスタンスデータの共有はありません。"
    },
    {
      "indent": 3,
      "text": "The PIB can be described as a conceptual tree namespace where the branches of the tree represent structures of data or Provisioning Classes (PRCs), while the leaves represent various instantiations of Provisioning Instances (PRIs). There may be multiple data instances (PRIs) for any given data structure (PRC). For example, if one wanted to install multiple access control filters, the PRC might represent a generic access control filter type and each PRI might represent an individual access control filter to be applied. The tree might be represented as follows:",
      "ja": "PIBは、ツリーの分岐がデータまたはプロビジョニングクラス（PRC）の構造を表す概念ツリーネームスペースとして説明できますが、葉はプロビジョニングインスタンス（PRI）のさまざまなインスタンス化を表します。特定のデータ構造（PRC）には、複数のデータインスタンス（PRI）がある場合があります。たとえば、複数のアクセス制御フィルターをインストールしたい場合、PRCは汎用アクセス制御フィルタータイプを表し、各PRIが適用される個々のアクセス制御フィルターを表す場合があります。ツリーは次のように表される場合があります。"
    },
    {
      "indent": 13,
      "text": "-------+-------+----------+---PRC--+--PRI\n       |       |          |        +--PRI\n       |       |          |\n       |       |          +---PRC-----PRI\n       |       |\n       |       +---PRC--+--PRI\n       |                +--PRI\n       |                +--PRI\n       |                +--PRI\n       |                +--PRI\n       |\n       +---PRC---PRI",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 26,
      "text": "Figure 2: The PIB Tree",
      "ja": "図2：PIBツリー"
    },
    {
      "indent": 3,
      "text": "Instances of the policy classes (PRIs) are each identified by a Provisioning Instance Identifier (PRID). A PRID is a name, carried in a COPS <Named ClientSI> or <Named Decision Data> object, which identifies a particular instance of a class.",
      "ja": "ポリシークラス（PRI）のインスタンスは、それぞれプロビジョニングインスタンス識別子（PRID）によって識別されます。Pridは名前であり、Cops <命名されたClientsi>または<名前付きDecision Data> Objectで伝えられています。これは、クラスの特定のインスタンスを識別します。"
    },
    {
      "indent": 0,
      "text": "2.1. Rules for Modifying and Extending PIBs",
      "section_title": true,
      "ja": "2.1. PIBを変更および拡張するためのルール"
    },
    {
      "indent": 3,
      "text": "As experience is gained with policy based management, and as new requirements arise, it will be necessary to make changes to PIBs. Changes to an existing PIB can be made in several ways.",
      "ja": "政策ベースの管理で経験が得られ、新しい要件が生じるにつれて、PIBSを変更する必要があります。既存のPIBの変更は、いくつかの方法で作成できます。"
    },
    {
      "indent": 4,
      "text": "(1) Additional PRCs can be added to a PIB or an existing one deprecated.",
      "ja": "(1) 追加のPRCをPIBまたは既存のPRCに追加できます。"
    },
    {
      "indent": 4,
      "text": "(2) Attributes can be added to, or deprecated from, an existing PRC.",
      "ja": "(2) 属性は、既存のPRCに追加または削除できます。"
    },
    {
      "indent": 4,
      "text": "(3) An existing PRC can be extended or augmented with a new PRC defined in another (perhaps enterprise specific) PIB.",
      "ja": "(3) 既存のPRCは、別の（おそらく企業固有の）PIBで定義された新しいPRCで拡張または拡張できます。"
    },
    {
      "indent": 3,
      "text": "The rules for each of these extension mechanisms is described in this sub-section. All of these mechanisms for modifying a PIB allow for interoperability between PDPs and PEPs even when one party is using a new version of the PIB while the other is using an old version.",
      "ja": "これらの各拡張メカニズムのルールは、このサブセクションで説明されています。PIBを変更するためのこれらのメカニズムはすべて、1つの当事者が新しいバージョンのPIBを使用している場合でも、PDPとPEPS間の相互運用性を可能にします。"
    },
    {
      "indent": 3,
      "text": "Note that the SPPI [SPPI] provides the authoritative rules for updating BER encoded PIBs. It is the purpose of the following section to explain how such changes affect senders and receivers of COPS messages.",
      "ja": "SPPI [SPPI]は、BERエンコードされたPIBを更新するための権威あるルールを提供していることに注意してください。次のセクションの目的は、そのような変更がCOPSメッセージの送信者と受信者にどのように影響するかを説明することです。"
    },
    {
      "indent": 0,
      "text": "2.2. Adding PRCs to, or deprecating from, a PIB",
      "section_title": true,
      "ja": "2.2. PIBにPRCSを追加するか、または削除する"
    },
    {
      "indent": 3,
      "text": "A published PIB can be extended with new PRCs by simply revising the document and adding additional PRCs. These additional PRCs are easily identified with new PRIDs under the module's PRID Prefix.",
      "ja": "公開されたPIBは、単にドキュメントを改訂し、追加のPRCを追加することで、新しいPRCで拡張できます。これらの追加のPRCは、モジュールのPRIDプレフィックスの下で新しいPridsで簡単に識別できます。"
    },
    {
      "indent": 3,
      "text": "In the event that a PEP implementing the new PIB is being configured by a PDP implementing the old PIB, the PEP will simply not receive any instances of the new PRC. In the event that the PEP is implementing the old PIB and the PDP the new one, the PEP may receive PRIs for the new PRC. Under such conditions, the PEP MUST return an error to the PDP, and rollback to its previous (good) state.",
      "ja": "新しいPIBを実装するPEPが古いPIBを実装するPDPによって構成されている場合、PEPは単に新しいPRCのインスタンスを受け取りません。PEPが古いPIBとPDPを新しいものに実装している場合、PEPは新しいPRCのPRIを受け取ることができます。このような条件下では、PEPはエラーをPDPに戻し、以前の（良い）状態にロールバックする必要があります。"
    },
    {
      "indent": 3,
      "text": "Similarly, existing PRCs can be deprecated from a PIB. In this case, the PEP ignores any PRIs sent to it by a PDP implementing the old (non-deprecated) version of the PIB. A PDP implementing the new version of the PIB simply does not send any instances of the deprecated class.",
      "ja": "同様に、既存のPRCはPIBから非推奨できます。この場合、PEPは、PIBの古い（非抑制）バージョンを実装するPDPによって送信されたPRIを無視します。PIBの新しいバージョンを実装するPDPは、非推奨クラスのインスタンスを送信しません。"
    },
    {
      "indent": 0,
      "text": "2.2.1. Adding or Deprecating Attributes of a BER Encoded PRC",
      "section_title": true,
      "ja": "2.2.1. BERエンコードされたPRCの属性の追加または非推奨"
    },
    {
      "indent": 3,
      "text": "A PIB can be modified to deprecate existing attributes of a PRC or add new ones.",
      "ja": "PIBを変更して、PRCの既存の属性を非難したり、新しい属性を追加したりすることができます。"
    },
    {
      "indent": 3,
      "text": "When deprecating the attributes of a PRC, it must be remembered that, with the COPS-PR protocol, the attributes of the PRC are identified by their order in the sequence rather than an explicit label (or attribute OID). Consequently, an ASN.1 value MUST be sent even for deprecated attributes so that a PDP and PEP implementing different versions of the PIB are inter-operable.",
      "ja": "PRCの属性を非難する場合、COPS-PRプロトコルでは、PRCの属性は、明示的なラベル（または属性OID）ではなく、シーケンスの順序によって識別されることを覚えておく必要があります。したがって、PDPとPEPが異なるバージョンのPIBを実装するPDPとPEPが操作可能になるように、ASN.1値を非推奨属性に対しても送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "For a deprecated attribute, if the PDP is using a BER encoded PIB, the PDP MUST send either an ASN.1 value of the correct type, or it may send an ASN.1 NULL value. A PEP that receives an ASN.1 NULL for an attribute that is not deprecated SHOULD substitute a default value. If it has no default value to substitute it MUST return an error to the PDP.",
      "ja": "非推奨属性の場合、PDPがBERエンコードされたPIBを使用している場合、PDPは正しいタイプのASN.1値を送信するか、ASN.1 NULL値を送信する必要があります。非推奨されていない属性に対してasn.1 nullを受信するPEPは、デフォルト値を代用する必要があります。デフォルト値が代用する場合は、PDPにエラーを返す必要があります。"
    },
    {
      "indent": 3,
      "text": "When adding new attributes to a PIB, these new attributes must be added in sequence after the existing ones. A PEP that receives a PRI with more attributes than it is expecting MUST ignore the additional attributes and send a warning back to the PDP.",
      "ja": "PIBに新しい属性を追加する場合、これらの新しい属性を既存の属性の後に順番に追加する必要があります。予想よりも多くの属性を持つPRIを受信するPEPは、追加の属性を無視し、PDPに警告を送り返す必要があります。"
    },
    {
      "indent": 3,
      "text": "A PEP that receives a PRI with fewer attributes than it is expecting SHOULD assume default values for the missing attributes. It MAY send a warning back to the PDP. If the missing attributes are required and there is no suitable default, the PEP MUST send an error back to the PDP. In all cases the missing attributes are assumed to correspond to the last attributes of the PRC.",
      "ja": "予想よりも少ない属性を持つPRIを受信するPEPは、欠落している属性のデフォルト値を想定する必要があります。PDPに警告を送り返す場合があります。欠落している属性が必要であり、適切なデフォルトがない場合、PEPはPDPにエラーを送信する必要があります。すべての場合において、欠落している属性は、PRCの最後の属性に対応すると想定されます。"
    },
    {
      "indent": 0,
      "text": "2.3. COPS Operations Supported for a Provisioning Instance",
      "section_title": true,
      "ja": "2.3. プロビジョニングインスタンスをサポートするCOPS運用"
    },
    {
      "indent": 3,
      "text": "A Provisioning Instance (PRI) typically contains a value for each attribute defined for the PRC of which it is an instance and is identified uniquely, within the scope of a given COPS Client-Type and Request-State on a PEP, by a Provisioning Instance Identifier (PRID). The following COPS operations are supported on a PRI:",
      "ja": "プロビジョニングインスタンス（PRI）には通常、PRCで定義された各属性の値が含まれています。この属性はインスタンスであるため、特定のCOPSクライアントタイプの範囲内で、プロビジョニングインスタンスによってPEPのリクエスト状態の範囲内で一意に識別されます。識別子（prid）。次のCOPS操作はPRIでサポートされています。"
    },
    {
      "indent": 3,
      "text": "o Install - This operation creates or updates a named instance of a PRC. It includes two parameters: a PRID object to name the PRI and an Encoded Provisioning Instance Data (EPD) object with the new/updated values. The PRID value MUST uniquely identify a single PRI (i.e., PRID prefix or PRC values are illegal). Updates to an existing PRI are achieved by simply reinstalling the same PRID with the updated EPD data.",
      "ja": "o インストール - この操作は、PRCの名前付きインスタンスを作成または更新します。2つのパラメーターが含まれています。PRIと、新しい/更新された値を持つエンコードされたプロビジョニングインスタンスデータ（EPD）オブジェクトに名前を付けるPRIDオブジェクトです。PRID値は、単一のPRIを一意に識別する必要があります（つまり、PRIDプレフィックスまたはPRC値は違法です）。既存のPRIの更新は、更新されたEPDデータで同じPridを再インストールするだけで達成されます。"
    },
    {
      "indent": 3,
      "text": "o Remove - This operation is used to delete an instance of a PRC. It includes one parameter, a PRID object, which names either the individual PRI to be deleted or a PRID prefix naming one or more complete classes of PRIs. Prefix-based deletion supports efficient bulk policy removal. The removal of an unknown/non-existent PRID SHOULD result in a warning to the PDP (no error).",
      "ja": "o 削除 - この操作は、PRCのインスタンスを削除するために使用されます。1つのパラメーター、削除する個々のPRIに名前を付けるか、PRISの1つ以上の完全なクラスの名前を付けたPridプレフィックスのいずれかを名前を付けます。プレフィックスベースの削除は、効率的なバルクポリシーの削除をサポートします。未知/存在しないプリッドを除去すると、PDPへの警告が発生するはずです（エラーなし）。"
    },
    {
      "indent": 0,
      "text": "3. Message Content",
      "section_title": true,
      "ja": "3. メッセージコンテンツ"
    },
    {
      "indent": 3,
      "text": "The COPS protocol provides for different COPS clients to define their own \"named\", i.e., client-specific, information for various messages. This section describes the messages exchanged between a COPS server (PDP) and COPS Policy Provisioning clients (PEP) that carry client-specific data objects. All the COPS messages used by COPS-PR conform to the message specifications defined in the COPS base protocol [COPS].",
      "ja": "COPSプロトコルは、さまざまなCOPSクライアントが自分の「名前付き」、つまりクライアント固有のさまざまなメッセージの情報を定義するために提供します。このセクションでは、COPSサーバー（PDP）とCOPSポリシープロビジョニングクライアント（PEP）との間で交換されたメッセージについて説明します。COPS-PRが使用するすべてのCOPSメッセージは、COPSベースプロトコル[COPS]で定義されたメッセージ仕様に準拠しています。"
    },
    {
      "indent": 3,
      "text": "Note: The use of the '*' character represented throughout this document is consistent with the ABNF [RFC2234] and means 0 or more of the following entities.",
      "ja": "注：このドキュメント全体で表される「*」文字の使用は、ABNF [RFC2234]と一致しており、次のエンティティの0以上を意味します。"
    },
    {
      "indent": 0,
      "text": "3.1. Request (REQ) PEP -> PDP",
      "section_title": true,
      "ja": "3.1. リクエスト（req）pep-> pdp"
    },
    {
      "indent": 3,
      "text": "The REQ message is sent by policy provisioning clients to issue a 'configuration request' to the PDP as specified in the COPS Context Object. The Client Handle associated with the REQ message originated by a provisioning client MUST be unique for that client. The Client Handle is used to identify a specific request state. Thus, one client can potentially open several configuration request states, each uniquely identified by its handle. Different request states are used to isolate similarly named configuration information into non-overlapping contexts (or logically isolated namespaces). Thus, an instance of named information is unique relative to a particular client-type and is unique relative to a particular request state for that client-type, even if the information was similarly identified in other request states (i.e., uses the same PRID). Thus, the Client Handle is also part of the instance identification of the communicated configuration information.",
      "ja": "REQメッセージは、COPSコンテキストオブジェクトで指定されているように、PDPに「構成要求」を発行するために、ポリシープロビジョニングクライアントによって送信されます。プロビジョニングクライアントによって発信されたREQメッセージに関連付けられたクライアントハンドルは、そのクライアントにとって一意でなければなりません。クライアントハンドルは、特定の要求状態を識別するために使用されます。したがって、1人のクライアントがいくつかの構成要求状態を潜在的に開くことができ、それぞれがハンドルによって一意に識別されます。異なる要求状態を使用して、同様に名前の構成情報を非重複コンテキスト（または論理的に分離された名前空間）に分離します。したがって、指定された情報のインスタンスは、特定のクライアントタイプと比較して一意であり、他の要求状態で情報が同様に識別されたとしても（つまり、同じPridを使用しています）、そのクライアントタイプの特定の要求状態に対して一意です。。したがって、クライアントハンドルは、通信された構成情報のインスタンス識別の一部でもあります。"
    },
    {
      "indent": 3,
      "text": "The configuration request message serves as a request from the PEP to the PDP for provisioning policy data that the PDP may have for the PEP, such as access control lists, etc. This includes policy the PDP may have at the time the REQ is received as well as any future policy data or updates to this data.",
      "ja": "構成要求メッセージは、PDPがPEPが持つ可能性のあるPEPのプロビジョニングポリシーデータ、アクセスコントロールリストなどのPEPからPDPへのリクエストとして機能します。将来のポリシーデータまたはこのデータの更新。"
    },
    {
      "indent": 3,
      "text": "The configuration request message should include provisioning client information to provide the PDP with client-specific configuration or capability information about the PEP. The information provided by the PEP should include client resources (e.g., queuing capabilities) and default policy configuration (e.g., default role combinations) information as well as incarnation data on existing policy. This information typically does not include all the information previously installed by a PDP but rather should include checksums or shortened references to previously installed information for synchronization purposes. This information from the client assists the server in deciding what types of policy the PEP can install and enforce. The format of the information encapsulated in one or more of the COPS Named ClientSI objects is described in section 5. Note that the configuration request message(s) is generated and sent to the PDP in response to the receipt of a Synchronize State Request (SSQ) message from the PDP. Likewise, an updated configuration request message (using the same Client Handle value as the original request now being updated) may also be generated by the PEP and sent to the PDP at any time due to local modifications of the PEP's internal state. In this way, the PDP will be synchronized with the PEP's relevant internal state at all times.",
      "ja": "構成要求メッセージには、PDPにPEPに関するクライアント固有の構成または機能情報をPDPに提供するためのクライアント情報のプロビジョニングを含める必要があります。PEPが提供する情報には、クライアントリソース（キューイング機能など）およびデフォルトのポリシー構成（デフォルトの役割の組み合わせなど）情報と、既存のポリシーに関する化身データを含める必要があります。この情報には、通常、PDPによって以前にインストールされたすべての情報を含めるのではなく、同期のために以前にインストールされた情報へのチェックサムまたは短縮参照を含める必要があります。クライアントからのこの情報は、PEPがインストールして実施できるポリシーの種類を決定するのをサーバーに支援します。Clientsiオブジェクトという名前のCOPSの1つまたは複数のCOPにカプセル化された情報の形式は、セクション5で説明されています。構成要求メッセージが生成され、同期状態要求の受領に応じてPDPに送信されることに注意してください（SSQ）PDPからのメッセージ。同様に、更新された構成要求メッセージ（元のリクエストが現在更新されているのと同じクライアントハンドル値を使用）も、PEPによって生成され、PEPの内部状態のローカル変更によりいつでもPDPに送信される場合があります。このようにして、PDPは常にPEPの関連する内部状態と同期されます。"
    },
    {
      "indent": 3,
      "text": "The policy information supplied by the PDP MUST be consistent with the named decision data defined for the policy provisioning client. The PDP responds to the configuration request with a DEC message containing any available provisioning policy data.",
      "ja": "PDPが提供するポリシー情報は、ポリシープロビジョニングクライアントに対して定義された指名された決定データと一致する必要があります。PDPは、利用可能なプロビジョニングポリシーデータを含むDECメッセージを使用して、構成要求に応答します。"
    },
    {
      "indent": 3,
      "text": "The REQ message has the following format:",
      "ja": "REQメッセージには次の形式があります。"
    },
    {
      "indent": 15,
      "text": "<Request> ::= <Common Header>\n               <Client Handle>\n               <Context = config request>\n               *(<Named ClientSI>)\n               [<Integrity>]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that the COPS objects IN-Int, OUT-Int and LPDPDecisions are not included in a COPS-PR Request.",
      "ja": "COPSオブジェクトは、IN-INT、Out-INT、LPDPDECISIONSがCOPS-PRリクエストに含まれていないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "3.2. Decision (DEC) PDP -> PEP",
      "section_title": true,
      "ja": "3.2. 決定（DEC）PDP-> PEP"
    },
    {
      "indent": 3,
      "text": "The DEC message is sent from the PDP to a policy provisioning client in response to the REQ message received from the PEP. The Client Handle MUST be the same Handle that was received in the corresponding REQ message.",
      "ja": "DECメッセージは、PEPから受信したREQメッセージに応じて、PDPからポリシープロビジョニングクライアントに送信されます。クライアントハンドルは、対応するREQメッセージで受信されたのと同じハンドルでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The DEC message is sent as an immediate response to a configuration request with the solicited message flag set in the COPS message header. Subsequent DEC messages may also be sent at any time after the original DEC message to supply the PEP with additional/updated policy information without the solicited message flag set in the COPS message header (as they are unsolicited decisions).",
      "ja": "DECメッセージは、COPSメッセージヘッダーに設定された勧誘されたメッセージフラグを使用して、構成要求に対する即時応答として送信されます。その後の12月のメッセージは、元の12月のメッセージの後でも、Copsメッセージヘッダーに勧誘されたメッセージフラグが設定されていない追加/更新されたポリシー情報をPEPに提供するためにいつでも送信することができます（未承諾の決定であるため）。"
    },
    {
      "indent": 3,
      "text": "Each DEC message may contain multiple decisions. This means a single message can install some policies and delete others. In general a single COPS-PR DEC message MUST contain any required remove decisions first, followed by any required install decisions. This is used to solve a precedence issue, not a timing issue: the remove decision deletes what it specifies, except those items that are installed in the same message.",
      "ja": "各DECメッセージには複数の決定が含まれる場合があります。これは、単一のメッセージがいくつかのポリシーをインストールして他のポリシーを削除できることを意味します。一般に、単一のCOPS-PR DECメッセージには、最初に必要な削除決定を含める必要があります。その後、必要なインストール決定が続きます。これは、タイミングの問題ではなく、優先順位の問題を解決するために使用されます。削除決定は、同じメッセージにインストールされているアイテムを除き、指定するものを削除します。"
    },
    {
      "indent": 3,
      "text": "The DEC message can also be used by the PDP to command the PEP to open a new Request State or Delete an existing Request-State as identified by the Client-Handle. To accomplish this, COPS-PR defines a new flag for the COPS Decision Flags object. The flag 0x02 is to be used by COPS-PR client-types and is hereafter referred to as the \"Request-State\" flag. An Install decision (Decision Flags: Command-Code=Install) with the Request-State flag set in the COPS Decision Flags object will cause the PEP to issue a new Request with a new Client Handle or else specify the appropriate error in a COPS Report message. A Remove decision (Decision Flags: Command-Code=Remove) with the Request-State flag set in the COPS Decision Flags object will cause the PEP to send a COPS Delete Request State (DRQ) message for the Request-State identified by the Client Handle in the DEC message. Whenever the Request-State flag is set in the COPS Decision Flags object in the DEC message, no COPS Named Decision Data object can be included in the corresponding decision (as it serves no purpose for this decision flag). Note that only one decision with the Request-State flag can be present per DEC message, and, if present, this MUST be the only decision in that message. As described below, the PEP MUST respond to each and every DEC with a corresponding solicited RPT.",
      "ja": "DECメッセージは、PDPがPEPに命令して新しいリクエスト状態を開くか、クライアントハンドルによって識別された既存のリクエスト状態を削除するために使用することもできます。これを達成するために、COPS-PRはCOPS Decision Flagsオブジェクトの新しいフラグを定義します。フラグ0x02は、COPS-PRクライアントタイプによって使用され、以下「リクエストステート」フラグと呼ばれます。COPS Decision Flagsオブジェクトに設定されたリクエスト-Stateフラグを使用したインストール決定（決定フラグ：コマンドコード=インストール）は、PEPに新しいクライアントハンドルで新しいリクエストを発行するか、COPSレポートで適切なエラーを指定しますメッセージ。COPS決定フラグに設定されたリクエストステートフラグが設定された決定（決定フラグ：コマンドコード=削除）削除（コマンドコード=削除）は、クライアントによって識別されたリクエストステートのPEPがCOPS削除要求状態（DRQ）メッセージを送信します。DECメッセージで処理します。Request-StateフラグがDECメッセージのCops Decision Flagsオブジェクトに設定されているときはいつでも、対応する決定に名前が付けられたCOPSという名前のCOPSを含めることはできません（この決定フラグの目的を果たさないため）。Request-Stateフラグの1つの決定のみがDECメッセージごとに存在できることに注意してください。存在する場合、これはそのメッセージの唯一の決定でなければなりません。以下で説明するように、PEPは、対応する勧誘RPTで各DECに応答する必要があります。"
    },
    {
      "indent": 3,
      "text": "A COPS-PR DEC message MUST be treated as a single \"transaction\", i.e., either all the decisions in a DEC message succeed or they all fail. If they fail, the PEP will rollback to its previous good state, which is the last successful DEC transaction, if any. This allows the PDP to delete some policies only if other policies can be installed in their place. The DEC message has the following format:",
      "ja": "COPS-PR DECメッセージは、単一の「トランザクション」として扱われなければなりません。つまり、DECメッセージのすべての決定が成功するか、すべて失敗する必要があります。それらが失敗した場合、PEPは以前の良い状態にロールバックします。これにより、PDPは他のポリシーをその場所にインストールできる場合にのみ、いくつかのポリシーを削除できます。DECメッセージには次の形式があります。"
    },
    {
      "indent": 3,
      "text": "<Decision Message> ::= <Common Header>\n                       <Client Handle>\n                       *(<Decision>) | <Error>\n                       [<Integrity>]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "<Decision> ::= <Context>\n               <Decision: Flags>\n               [<Named Decision Data: Provisioning >]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that the Named Decision Data (Provisioning) object is included in a COPS-PR Decision when it is an Install or Remove decision with no Decision Flags set. Other types of COPS decision data objects (e.g., Stateless, Replacement) are not supported by COPS-PR client-types. The Named Decision Data object MUST NOT be included in the decision if the Decision Flags object Command-Code is NULL (meaning there is no configuration information to install at this time) or if the Request-State flag is set in the Decision Flags object.",
      "ja": "指定された決定データ（Provisioning）オブジェクトは、決定フラグが設定されていない場合のインストールまたは削除の場合のCOPS-PRの決定に含まれることに注意してください。他のタイプのCOPS決定データオブジェクト（例：ステートレス、交換）は、COPS-PRクライアントタイプによってサポートされていません。決定Flags Object Command-Codeがnull（現時点ではインストールする構成情報がないことを意味する）、またはRequest-StateフラグがDecisionフラグオブジェクトに設定されている場合、決定Flagsオブジェクトコマンドコードがnullの場合、決定に決定に含まれてはなりません。"
    },
    {
      "indent": 3,
      "text": "For each decision in the DEC message, the PEP performs the operation specified in the Command-Code and Flags field in the Decision Flags object on the Named Decision Data. For the policy provisioning clients, the format for this data is defined in the context of the Policy Information Base (see section 5). In response to a DEC message, the policy provisioning client MUST send a RPT message, with the solicited message flag set, back to the PDP to inform the PDP of the action taken.",
      "ja": "DECメッセージの各決定について、PEPは、指定された決定データのDecision Flagsオブジェクトのコマンドコードとフラグフィールドで指定された操作を実行します。ポリシープロビジョニングクライアントの場合、このデータの形式は、ポリシー情報ベースのコンテキストで定義されます（セクション5を参照）。DECメッセージに応じて、ポリシープロビジョニングクライアントは、勧誘されたメッセージフラグが設定されたRPTメッセージをPDPに戻し、PDPに実行されたアクションを通知する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.3. Report State (RPT) PEP -> PDP",
      "section_title": true,
      "ja": "3.3. レポート状態（rpt）pep-> pdp"
    },
    {
      "indent": 3,
      "text": "The RPT message is sent from the policy provisioning clients to the PDP to report accounting information associated with the provisioned policy, or to notify the PDP of changes in the PEP (Report-Type = ' Accounting') related to the provisioning client.",
      "ja": "RPTメッセージは、ポリシープロビジョニングクライアントからPDPに送信され、プロビジョニングされたポリシーに関連付けられた会計情報を報告するか、Provisingクライアントに関連するPEP（Report-Type = 'Accounting'）のPDPに通知します。"
    },
    {
      "indent": 3,
      "text": "RPT is also used as a mechanism to inform the PDP about the action taken at the PEP in response to a DEC message. For example, in response to an 'Install' decision, the PEP informs the PDP if the policy data is installed (Report-Type = 'Success') or not (Report-Type = 'Failure'). Reports that are in response to a DEC message MUST set the solicited message flag in their COPS message header. Each solicited RTP MUST be sent for its corresponding DEC in the order the DEC messages were received. In case of a solicited failure, the PEP is expected to rollback to its previous (good) state as if the erroneous DEC transaction did not occur. The PEP MUST always respond to a DEC with a solicited RPT even in response to a NULL DEC, in which case the Report-Type will be 'Success'.",
      "ja": "RPTは、DECメッセージに応じてPEPで行われたアクションについてPDPに通知するメカニズムとしても使用されます。たとえば、「インストール」の決定に応じて、PEPはポリシーデータがインストールされている場合（report-type = 'success'）かどうか（report-type = 'fails'）の場合、PDPに通知します。DECメッセージに応じているレポートは、Copsメッセージヘッダーに求められたメッセージフラグを設定する必要があります。勧誘された各RTPは、DECメッセージを受信した順序で、対応するDECに対して送信する必要があります。勧誘された障害の場合、PEPは、誤ったDECトランザクションが発生しなかったかのように、以前の（良い）状態にロールバックすると予想されます。PEPは、NULL DECに応じても、勧誘されたRPTで常にDECに応答する必要があります。その場合、レポートタイプは「成功」になります。"
    },
    {
      "indent": 3,
      "text": "Reports can also be unsolicited and all unsolicited Reports MUST NOT set the solicited message flag in their COPS message header. Examples of unsolicited reports include 'Accounting' Report-Types, which were not triggered by a specific DEC messages, or 'Failure' Report-Types, which indicate a failure in a previously successfully installed configuration (note that, in the case of such unsolicited failures, the PEP cannot rollback to a previous \"good\" state as it becomes ambiguous under these asynchronous conditions what the correct state might be).",
      "ja": "レポートは未承諾である可能性があり、すべての未承諾レポートは、Copsメッセージヘッダーに勧誘されたメッセージフラグを設定してはなりません。未承諾レポートの例には、特定のDECメッセージまたは「障害」レポートタイプによってトリガーされなかった「アカウンティング」レポートタイプが含まれます。障害、PEPは、これらの非同期条件の下で正しい状態が何であるかの下で曖昧になるため、以前の「良い」状態にロールバックすることはできません）。"
    },
    {
      "indent": 3,
      "text": "The RPT message may contain provisioning client information such as accounting parameters or errors/warnings related to a decision. The data format for this information is defined in the context of the policy information base (see section 5). The RPT message has the following format:",
      "ja": "RPTメッセージには、決定に関連する会計パラメーターやエラー/警告などのクライアント情報のプロビジョニングが含まれる場合があります。この情報のデータ形式は、ポリシー情報ベースのコンテキストで定義されています（セクション5を参照）。RPTメッセージには次の形式があります。"
    },
    {
      "indent": 15,
      "text": "<Report State> ::= <Common Header>\n                   <Client Handle>\n                   <Report Type>\n                   *(<Named ClientSI>)\n                   [<Integrity>]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4. COPS-PR Protocol Objects",
      "section_title": true,
      "ja": "4. COPS-PRプロトコルオブジェクト"
    },
    {
      "indent": 3,
      "text": "The COPS Policy Provisioning clients encapsulate several new objects within the existing COPS Named Client-specific information object and Named Decision Data object. This section defines the format of these new objects.",
      "ja": "COPSポリシープロビジョニングクライアントは、クライアント固有の情報オブジェクトと名前付きDecision Data Objectという名前の既存のCOPS内のいくつかの新しいオブジェクトをカプセル化します。このセクションでは、これらの新しいオブジェクトの形式を定義します。"
    },
    {
      "indent": 3,
      "text": "COPS-PR classifies policy data according to \"bindings\", where a binding consists of a Provisioning Instance Identifier and the Provisioning Instance data, encoded within the context of the provisioning policy information base (see section 5).",
      "ja": "COPS-PRは、「Bindings」に従ってポリシーデータを分類します。ここで、バインディングはプロビジョニングインスタンス識別子とプロビジョニングポリシー情報ベースのコンテキスト内でエンコードされたプロビジョニングインスタンスデータで構成されています（セクション5を参照）。"
    },
    {
      "indent": 3,
      "text": "The format for these new objects is as follows:",
      "ja": "これらの新しいオブジェクトの形式は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "        0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|             Length            |     S-Num     |     S-Type    |\n+---------------+---------------+---------------+---------------+\n|                   32 bit unsigned integer                     |\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "S-Num and S-Type are similar to the C-Num and C-Type used in the base COPS objects. The difference is that S-Num and S-Type are used only for COPS-PR clients and are encapsulated within the existing COPS Named ClientSI or Named Decision Data objects. The S-Num identifies the general purpose of the object, and the S-Type describes the specific encoding used for the object. All the object descriptions and examples in this document use the Basic Encoding Rules as the encoding type (S-Type = 1). Additional encodings can be defined for the remaining S-Types in the future (for example, an additional S-Type could be used to carry XML string based encodings [XML] as an EPD of PRI instance data, where URNs identify PRCs [URN] and XPointers would be used for PRIDs).",
      "ja": "S-NumおよびSタイプは、基本COPSオブジェクトで使用されるC-NumおよびCタイプに似ています。違いは、S-NumとSタイプはCOPS-PRクライアントにのみ使用され、clientsiという名前の既存のCOPSまたは命名された決定データオブジェクト内にカプセル化されることです。S-Numはオブジェクトの一般的な目的を識別し、Sタイプはオブジェクトに使用される特定のエンコードを記述します。このドキュメントのすべてのオブジェクトの説明と例は、基本的なエンコーディングルールをエンコーディングタイプ（s-type = 1）として使用します。将来の残りのSタイプに対して追加のエンコードを定義できます（たとえば、追加のSタイプを使用して、XMLストリングベースのエンコーディング[XML]をPRIインスタンスデータのEPDとして運ぶことができます。XpointersはPridsに使用されます）。"
    },
    {
      "indent": 3,
      "text": "Length is a two-octet value that describes the number of octets (including the header) that compose the object. If the length in octets does not fall on a 32-bit word boundary, padding MUST be added to the end of the object so that it is aligned to the next 32-bit boundary before the object can be sent on the wire. On the receiving side, a subsequent object boundary can be found by simply rounding up the stated object length of the current object to the next 32-bit boundary. The values for the padding MUST be all zeros.",
      "ja": "長さは、オブジェクトを構成するオクテットの数（ヘッダーを含む）の数を記述する2オクセット値です。オクテットの長さが32ビットワードの境界に当てはまらない場合、オブジェクトの上に送信する前に次の32ビット境界に合わせて、オブジェクトの端にパディングを追加する必要があります。受信側では、現在のオブジェクトの記載されているオブジェクトの長さを次の32ビット境界に切り上げるだけで、後続のオブジェクト境界を見つけることができます。パディングの値はすべてゼロでなければなりません。"
    },
    {
      "indent": 0,
      "text": "4.1. Complete Provisioning Instance Identifier (PRID)",
      "section_title": true,
      "ja": "4.1. 完全なプロビジョニングインスタンス識別子（PRID）"
    },
    {
      "indent": 3,
      "text": "S-Num = 1 (Complete PRID), S-Type = 1 (BER), Length = variable.",
      "ja": "s-num = 1（完全なprid）、s-type = 1（ber）、length = variable。"
    },
    {
      "indent": 3,
      "text": "This object is used to carry the identifier, or PRID, of a Provisioning Instance. The identifier is encoded following the rules that have been defined for encoding SNMP Object Identifier (OID) values. Specifically, PRID values are encoded using the Type/Length/Value (TLV) format and initial sub-identifier packing that is specified by the binary encoding rules [BER] used for Object Identifiers in an SNMP PDU.",
      "ja": "このオブジェクトは、プロビジョニングインスタンスの識別子またはpridを運ぶために使用されます。識別子は、SNMPオブジェクト識別子（OID）値をエンコードするために定義されたルールに従ってエンコードされます。具体的には、PRID値は、SNMP PDUのオブジェクト識別子に使用されるバイナリエンコードルール[BER]によって指定されているタイプ/長/値（TLV）形式と初期サブ識別子パッキングを使用してエンコードされます。"
    },
    {
      "indent": 3,
      "text": "        0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|              Length           | S-Num = PRID  | S-Type = BER  |\n+---------------+---------------+---------------+---------------+\n|                     Instance Identifier                       |\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For example, a (fictitious) PRID equal to 1.3.6.1.2.2.8.1 would be encoded as follows (values in hex):",
      "ja": "たとえば、1.3.6.1.2.2.8.1に等しい（架空の）Pridは次のようにエンコードされます（16進数）："
    },
    {
      "indent": 9,
      "text": "06 07 2B 06 01 02 02 08 01",
      "ja": "06 07 2b 06 01 02 02 08 01"
    },
    {
      "indent": 3,
      "text": "The entire PRID object would be encoded as follows:",
      "ja": "Pridオブジェクト全体が次のようにエンコードされます。"
    },
    {
      "indent": 9,
      "text": "00 0D - Length 01 - S-Num 01 - S-Type (Complete PRID) 06 07 2B 06 01 02 02 08 01 - Encoded PRID 00 00 00 - Padding",
      "ja": "00 0D-長さ01 -S -Num 01 -S -Type（完全なプリッド）06 07 2B 06 01 02 08 01-エンコードされたPrid 00 00 00 -PADDING"
    },
    {
      "indent": 3,
      "text": "NOTE: When encoding an xxxTable's xxxEntry Object-Type as defined by the SMI [V2SMI] and SPPI [SPPI], the OID will contain all the sub-identifiers up to and including the xxxEntry OID but not the columnar identifiers for the attributes within the xxxEntry's SEQUENCE. The last (suffix) identifier is the INDEX of an instance of an entire xxxEntry including its SEQUENCE of attributes encoded in the EPD (defined below). This constitutes an instance (PRI) of a class (PRC) in terms of the SMI.",
      "ja": "注：smi [v2smi]およびsppi [sppi]で定義されているxxxtableのxxxentryオブジェクトタイプをエンコードすると、oidにはxxxentry oidまでのすべてのサブアイデンティアが含まれますが、xxxentry oidを含むが、xxxentryのシーケンス。最後の（接尾辞）識別子は、EPDにエンコードされた一連の属性を含むXXXENTRY全体のインスタンスのインデックスです（以下に定義）。これは、SMIの観点からクラス（PRC）のインスタンス（PRI）を構成します。"
    },
    {
      "indent": 3,
      "text": "A PRID for a scalar (non-columnar) value's OID is encoded directly as the PRC where the instance identifier suffix is always zero as there will be only one instance of a scalar value. The EPD will then be used to convey the scalar value.",
      "ja": "スカラー（非列）値のoidのプリッドは、スカラー値のインスタンスが1つしかないため、インスタンス識別子の接尾辞は常にゼロであるPRCとして直接エンコードされます。その後、EPDを使用してスカラー値を伝えます。"
    },
    {
      "indent": 0,
      "text": "4.2. Prefix PRID (PPRID)",
      "section_title": true,
      "ja": "4.2. プレフィックスprid（pprid）"
    },
    {
      "indent": 3,
      "text": "Certain operations, such as decision removal, can be optimized by specifying a PRID prefix with the intent that the requested operation be applied to all PRIs matching the prefix (for example, all instances of the same PRC). PRID prefix objects MUST only be used in the COPS protocol <Remove Decision> operation where it may be more optimal to perform bulk decision removal using class prefixes instead of a sequence of individual <Remove Decision> operations. Other COPS operations, e.g., <Install Decision> operations always require individual PRID specification.",
      "ja": "決定削除などの特定の操作は、リクエストされた操作がプレフィックスに一致するすべてのPRIに適用されることを目的としたPRIDプレフィックスを指定することにより、最適化できます（たとえば、同じPRCのすべてのインスタンス）。PRIDプレフィックスオブジェクトは、COPSプロトコル<削除決定>操作でのみ使用する必要があります。個々の<削除操作>操作のシーケンスではなく、クラスプレフィックスを使用してバルク決定削除を実行することがより最適な場合があります。他のCOPS運用、例えば、<インストール決定>操作には常に個別のPRID仕様が必要です。"
    },
    {
      "indent": 3,
      "text": "S-Num = 2 (Prefix PRID), S-Type = 1 (BER), Length = variable.",
      "ja": "s-num = 2（prefix prid）、s-type = 1（ber）、length = variable。"
    },
    {
      "indent": 4,
      "text": "          0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|              Length           | S-Num = PPRID | S-Type = BER  |\n+---------------+---------------+---------------+---------------+\n...                                                           ...\n|                          Prefix PRID                          |\n...                                                           ...\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Continuing with the previous example, a prefix PRID that is equal to 1.3.6.1.2.2 would be encoded as follows (values in hex):",
      "ja": "前の例を継続すると、1.3.6.1.2.2に等しいプレフィックスプリッドが次のようにエンコードされます（16進数）："
    },
    {
      "indent": 9,
      "text": "06 05 2B 06 01 02 02",
      "ja": "06 05 2b 06 01 02 02"
    },
    {
      "indent": 6,
      "text": "The entire PPRID object would be encoded as follows:",
      "ja": "PPRIDオブジェクト全体が次のようにエンコードされます。"
    },
    {
      "indent": 9,
      "text": "00 0B                        - Length\n02                           - S-Num = Prefix PRID\n01                           - S-Type = BER\n06 05 2B 06 01 02 02         - Encoded Prefix PRID\n00                           - Padding",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.3. Encoded Provisioning Instance Data (EPD)",
      "section_title": true,
      "ja": "4.3. エンコードされたプロビジョニングインスタンスデータ（EPD）"
    },
    {
      "indent": 3,
      "text": "S-Num = 3 (EPD), S-Type = 1 (BER), Length = variable.",
      "ja": "s-num = 3（epd）、s-type = 1（ber）、length = variable。"
    },
    {
      "indent": 3,
      "text": "This object is used to carry the encoded value of a Provisioning Instance. The PRI value, which contains all of the individual values of the attributes that comprise the class (which corresponds to the SMI's xxxEntry Object-Type defining the SEQUENCE of attributes comprising a table [V2SMI][SPPI]), is encoded as a series of TLV sub-components. Each sub-component represents the value of a single attribute and is encoded following the BER. Note that the ordering of non-scalar (multiple) attributes within the EPD is dictated by their respective columnar OID suffix when defined in [V2SMI]. Thus, the attribute with the smallest columnar OID suffix will appear first and the attribute with the highest number columnar OID suffix will be last.",
      "ja": "このオブジェクトは、プロビジョニングインスタンスのエンコードされた値を運ぶために使用されます。クラスを構成する属性のすべての個々の値を含むPRI値（これは、テーブル[V2SMI] [SPPI]を含む属性のシーケンスを定義するSMIのxxxentryオブジェクトタイプに対応する）は、一連のシリーズとしてエンコードされています。TLVサブコンポーネント。各サブコンポーネントは単一の属性の値を表し、BERに続いてエンコードされます。EPD内の非スカラー（複数）属性の順序付けは、[V2SMI]で定義された場合、それぞれの柱状OID接尾辞によって決定されることに注意してください。したがって、最小の柱状OID接尾辞を備えた属性が最初に表示され、最大数の列oid接尾辞を持つ属性が最後になります。"
    },
    {
      "indent": 3,
      "text": "        0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|             Length            | S-Num = EPD   | S-Type = BER  |\n+---------------+---------------+---------------+---------------+\n|                     BER Encoded PRI Value                     |\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As an example, a fictional definition of an IPv4 packet filter class could be described using the SMI as follows:",
      "ja": "例として、IPv4パケットフィルタークラスの架空の定義は、次のようにSMIを使用して説明できます。"
    },
    {
      "indent": 3,
      "text": "ipv4FilterIpFilter OBJECT IDENTIFIER ::= { someExampleOID 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- The IP Filter Table",
      "ja": " -  IPフィルターテーブル"
    },
    {
      "indent": 3,
      "text": "ipv4FilterTable OBJECT-TYPE SYNTAX SEQUENCE OF Ipv4FilterEntry MAX-ACCESS not-accessible STATUS current DESCRIPTION \"Filter definitions. A packet has to match all fields in a filter. Wildcards may be specified for those fields that are not relevant.\"",
      "ja": "IPv4FilterTableオブジェクトタイプの構文シーケンスIPv4FilterEntry Max-Accessはアクセス不可能なステータス現在の説明 \"フィルター定義。フィルター内のすべてのフィールドを一致させる必要があります。"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterIpFilter 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterEntry OBJECT-TYPE SYNTAX Ipv4FilterEntry MAX-ACCESS not-accessible STATUS current DESCRIPTION \"An instance of the filter class.\"",
      "ja": "ipv4filterentryオブジェクトタイプ構文IPv4filterentry max-access accessable not accessable current current \"フィルタークラスのインスタンス。\""
    },
    {
      "indent": 7,
      "text": "INDEX { ipv4FilterIndex }",
      "ja": "index {ipv4filterindex}"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterTable 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Ipv4FilterEntry ::= SEQUENCE {\n        ipv4FilterIndex        Unsigned32,\n        ipv4FilterDstAddr      IpAddress,\n        ipv4FilterDstAddrMask  IpAddress,\n        ipv4FilterSrcAddr      IpAddress,\n        ipv4FilterSrcAddrMask  IpAddress,\n        ipv4FilterDscp         Integer32,\n        ipv4FilterProtocol     Integer32,\n        ipv4FilterDstL4PortMin Integer32,\n        ipv4FilterDstL4PortMax Integer32,\n        ipv4FilterSrcL4PortMin Integer32,\n        ipv4FilterSrcL4PortMax Integer32,\n        ipv4FilterPermit       TruthValue\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterIndex OBJECT-TYPE SYNTAX Unsigned32 MAX-ACCESS read-write STATUS current DESCRIPTION \"An integer index to uniquely identify this filter among all the filters.\"",
      "ja": "IPV4FILTERINDEXオブジェクトタイプSyntax untisined32 max-access read-writeステータス現在の説明「すべてのフィルター間でこのフィルターを一意に識別する整数インデックス」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterDstAddr OBJECT-TYPE",
      "ja": "ipv4filterdstaddr object-type"
    },
    {
      "indent": 7,
      "text": "SYNTAX IpAddress MAX-ACCESS read-write STATUS current DESCRIPTION \"The IP address to match against the packet's destination IP address.\"",
      "ja": "構文iPaddress max-access read-writeステータス現在の説明「パケットの宛先IPアドレスと一致するIPアドレス」。"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterDstAddrMask OBJECT-TYPE SYNTAX IpAddress MAX-ACCESS read-write STATUS current DESCRIPTION \"A mask for the matching of the destination IP address. A zero bit in the mask means that the corresponding bit in the address always matches.\"",
      "ja": "ipv4filterdstaddrmask object-type syntax ipaddress max-access read-writeステータス現在の説明 \"宛先IPアドレスの一致のためのマスク。マスクのゼロビットは、アドレスの対応するビットが常に一致することを意味します。」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterSrcAddr OBJECT-TYPE SYNTAX IpAddress MAX-ACCESS read-write STATUS current DESCRIPTION \"The IP address to match against the packet's source IP address.\"",
      "ja": "IPV4FILTERSRCADDRオブジェクトタイプ構文iPaddress max-access read-writeステータス現在の説明「パケットのソースIPアドレスと一致するIPアドレス」。"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 4 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterSrcAddrMask OBJECT-TYPE SYNTAX IpAddress MAX-ACCESS read-write STATUS current DESCRIPTION \"A mask for the matching of the source IP address.\"",
      "ja": "IPV4FILTERSRCADDRMASKオブジェクトタイプ構文iPaddress max-access read-writeステータス現在の説明「ソースIPアドレスの一致のためのマスク。」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 5 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterDscp OBJECT-TYPE SYNTAX Integer32 (-1 | 0..63) MAX-ACCESS read-write STATUS current DESCRIPTION \"The value that the DSCP in the packet can have and match. A value of -1 indicates that a specific DSCP value has not been defined and thus all DSCP values are considered a match.\"",
      "ja": "ipv4filterdscp object-type syntax integer32（-1 | 0..63）max-access read-writeステータス現在の説明 \"パケットのdscpが持つことができる値。定義されていないため、すべてのDSCP値は一致と見なされます。」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 6 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterProtocol OBJECT-TYPE SYNTAX Integer32 (0..255) MAX-ACCESS read-write STATUS current DESCRIPTION \"The IP protocol to match against the packet's protocol. A value of zero means match all.\"",
      "ja": "ipv4filterprotocol object-type syntax integer32（0..255）max-access read-writeステータス現在の説明 \"パケットのプロトコルと一致するIPプロトコル。ゼロの値はすべて一致します。」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 7 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterDstL4PortMin OBJECT-TYPE SYNTAX Integer32 (0..65535) MAX-ACCESS read-write STATUS current DESCRIPTION \"The minimum value that the packet's layer 4 destination port number can have and match this filter.\"",
      "ja": "ipv4filterdstl4portmin object-type syntax integer32（0..65535）max-access read-writeステータス現在の説明「パケットのレイヤー4宛先ポート番号がこのフィルターを持つことができる最小値」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 8 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterDstL4PortMax OBJECT-TYPE SYNTAX Integer32 (0..65535) MAX-ACCESS read-write STATUS current DESCRIPTION \"The maximum value that the packet's layer 4 destination port number can have and match this filter.\"",
      "ja": "ipv4filterdstl4portmax object-type syntax integer32（0..65535）max-access read-writeステータス現在の説明「パケットのレイヤー4宛先ポート番号がこのフィルターを持つことができる最大値」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 9 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterSrcL4PortMin OBJECT-TYPE SYNTAX Integer32 (0..65535) MAX-ACCESS read-write STATUS current DESCRIPTION \"The minimum value that the packet's layer 4 source port number can have and match this filter.\"",
      "ja": "ipv4filtersrcl4portmin object-type syntax integer32（0..65535）max-access read-writeステータス現在の説明「パケットのレイヤー4ソースポート番号がこのフィルターを持つことができる最小値」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 10 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterSrcL4PortMax OBJECT-TYPE SYNTAX Integer32 (0..65535) MAX-ACCESS read-write STATUS current DESCRIPTION \"The maximum value that the packet's layer 4 source port number can have and match this filter.\"",
      "ja": "ipv4filtersrcl4portmax object-type syntax integer32（0..65535）max-access read-writeステータス現在の説明「パケットのレイヤー4ソースポート番号が持つことができる最大値このフィルター」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ipv4FilterPermit OBJECT-TYPE SYNTAX TruthValue MAX-ACCESS read-write STATUS current DESCRIPTION \"If false, the evaluation is negated. That is, a valid match will be evaluated as not a match and vice versa.\"",
      "ja": "IPv4FilterPermitオブジェクトタイプの構文Value Max-Access Read-Writeステータス現在の説明「Falseの場合、評価は否定されます。つまり、有効な一致は一致しないと評価され、逆も同様です。」"
    },
    {
      "indent": 7,
      "text": "::= { ipv4FilterEntry 12 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A fictional instance of the filter class defined above might then be encoded as follows:",
      "ja": "上記のフィルタークラスの架空のインスタンスは、次のようにエンコードされる場合があります。"
    },
    {
      "indent": 3,
      "text": "02 01 08          :ipv4FilterIndex/Unsigned32/Value = 8\n40 04 C0 39 01 05 :ipv4FilterDstAddr/IpAddress/Value = 192.57.1.5\n40 04 FF FF FF FF :ipv4FilterDstMask/IpAddress/Value=255.255.255.255\n40 04 00 00 00 00 :ipv4FilterSrcAddr/IpAddress/Value = 0.0.0.0\n40 04 00 00 00 00 :ipv4FilterSrcMask/IpAddress/Value = 0.0.0.0\n02 01 FF          :ipv4FilterDscp/Integer32/Value = -1 (not used)\n02 01 06          :ipv4FilterProtocol/Integer32/Value = 6 (TCP)\n05 00             :ipv4FilterDstL4PortMin/NULL/not supported\n05 00             :ipv4FilterDstL4PortMax/NULL/not supported\n05 00             :ipv4FilterSrcL4PortMin/NULL/not supported\n05 00             :ipv4FilterSrcL4PortMax/NULL/not supported\n02 01 01          :ipv4FilterPermit/TruthValue/Value = 1 (true)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The entire EPD object for this instance would then be encoded as follows:",
      "ja": "このインスタンスのEPDオブジェクト全体を次のようにエンコードします。"
    },
    {
      "indent": 3,
      "text": "00 30                        - Length\n03                           - S-Num = EPD\n01                           - S-Type = BER\n02 01 08                     - ipv4FilterIndex\n40 04 C0 39 01 05            - ipv4FilterDstAddr\n40 04 FF FF FF FF            - ipv4FilterDstMask\n40 04 00 00 00 00            - ipv4FilterSrcAddr\n40 04 00 00 00 00            - ipv4FilterSrcMask\n02 01 FF                     - ipv4FilterDscp\n02 01 06                     - ipv4FilterProtocol\n05 00                        - ipv4FilterDstL4PortMin\n05 00                        - ipv4FilterDstL4PortMax\n05 00                        - ipv4FilterSrcL4PortMin\n05 00                        - ipv4FilterSrcL4PortMax\n02 01 01                     - ipv4FilterPermit",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that attributes not supported within a class are still returned in the EPD for a PRI. By convention, a NULL value is returned for attributes that are not supported. In the previous example, source and destination port number attributes are not supported.",
      "ja": "クラス内でサポートされていない属性は、PRIのEPDでまだ返されていることに注意してください。慣習により、サポートされていない属性に対してヌル値が返されます。前の例では、ソースおよび宛先ポート番号の属性はサポートされていません。"
    },
    {
      "indent": 0,
      "text": "4.4. Global Provisioning Error Object (GPERR)",
      "section_title": true,
      "ja": "4.4. グローバルプロビジョニングエラーオブジェクト（GPERR）"
    },
    {
      "indent": 3,
      "text": "S-Num = 4 (GPERR), S-Type = 1 (for BER), Length = 8.",
      "ja": "s-num = 4（gperr）、s-type = 1（for ber）、length = 8。"
    },
    {
      "indent": 3,
      "text": "         0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|              Length           | S-Num = GPERR | S-Type = BER  |\n+---------------+---------------+---------------+---------------+\n|           Error-Code          |       Error Sub-code          |\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The global provisioning error object has the same format as the Error object in COPS [COPS], except with C-Num and C-Type replaced by the S-Num and S-Type values shown. The global provision error object is used to communicate general errors that do not map to a specific PRC.",
      "ja": "グローバルプロビジョニングエラーオブジェクトは、c-numおよびc型が示されているs-numおよびs型値に置き換えられた場合を除き、COPS [COPS]のエラーオブジェクトと同じ形式を持っています。グローバルプロビジョニングエラーオブジェクトは、特定のPRCにマッピングされない一般的なエラーを通信するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The following global error codes are defined:",
      "ja": "次のグローバルエラーコードが定義されています。"
    },
    {
      "indent": 5,
      "text": "availMemLow(1) availMemExhausted(2) unknownASN.1Tag(3) - The erroneous tag type SHOULD be specified in the Error Sub-Code field. maxMsgSizeExceeded(4) - COPS message (transaction) was too big. unknownError(5) maxRequestStatesOpen(6)- No more Request-States can be created by the PEP (in response to a DEC message attempting to open a new Request-State). invalidASN.1Length(7) - An ASN.1 object length was incorrect. invalidObjectPad(8) - Object was not properly padded. unknownPIBData(9) - Some of the data supplied by the PDP is unknown/unsupported by the PEP (but otherwise formatted correctly). PRC specific error codes are to be used to provide more information. unknownCOPSPRObject(10)- Sub-code (octet 2) contains unknown object's S-Num and (octet 3) contains unknown object's S-Type. malformedDecision(11) - Decision could not be parsed.",
      "ja": "baymemlow（1）baymemexaxted（2）uncredasn.1tag（3） - エラーサブコードフィールドで誤りのタグタイプを指定する必要があります。maxmsgsizeexeded（4）-Copsメッセージ（トランザクション）は大きすぎました。UncondError（5）MaxRequestStateSopen（6）-PEPによってリクエストステートを作成することはできません（新しいリクエストステートを開こうとするDECメッセージに応じて）。Invalidasn.1Length（7）-ASN.1オブジェクトの長さが正しくありませんでした。InvalidObjectPad（8） - オブジェクトは適切にパッドではありませんでした。UnknownPibdata（9） -  PDPによって提供されるデータの一部は、PEPによって不明/サポートされていません（しかし、それ以外の場合は正しくフォーマットされています）。PRC固有のエラーコードは、より多くの情報を提供するために使用されます。Unknowncopsprobject（10） - サブコード（Octet 2）に不明なオブジェクトのS-Numが含まれ、（Octet 3）は不明なオブジェクトのSタイプが含まれています。MALFORMEDDECISION（11） - 決定を解析できませんでした。"
    },
    {
      "indent": 0,
      "text": "4.5. PRC Class Provisioning Error Object (CPERR)",
      "section_title": true,
      "ja": "4.5. PRCクラスプロビジョニングエラーオブジェクト（CPERR）"
    },
    {
      "indent": 3,
      "text": "S-Num = 5 (CPERR), S-Type = 1 (for BER), Length = 8.",
      "ja": "s-num = 5（cperr）、s-type = 1（for ber）、length = 8。"
    },
    {
      "indent": 3,
      "text": "         0                1               2                 3\n+---------------+---------------+---------------+---------------+\n|              Length           | S-Num = CPERR | S-Type = BER  |\n+---------------+---------------+---------------+---------------+\n|           Error-Code          |       Error Sub-code          |\n+---------------+---------------+---------------+---------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The class-specific provisioning error object has the same format as the Error object in COPS [COPS], except with C-Num and C-Type replaced by the S-Num and S-Type values shown. The class-specific error object is used to communicate errors relating to specific PRCs and MUST have an associated Error PRID Object.",
      "ja": "クラス固有のプロビジョニングエラーオブジェクトは、C-NumおよびCタイプが示されているS-NumおよびSタイプの値に置き換えられた場合を除き、COPS [COPS]のエラーオブジェクトと同じ形式を持っています。クラス固有のエラーオブジェクトは、特定のPRCに関連するエラーを通信するために使用され、関連するエラーPridオブジェクトが必要です。"
    },
    {
      "indent": 3,
      "text": "The following Generic Class-Specific errors are defined:",
      "ja": "次の一般的なクラス固有のエラーが定義されています。"
    },
    {
      "indent": 5,
      "text": "priSpaceExhausted(1) - no more instances may currently be installed in the given class. priInstanceInvalid(2) - the specified class instance is currently invalid prohibiting installation or removal. attrValueInvalid(3) - the specified value for identified attribute is illegal. attrValueSupLimited(4) - the specified value for the identified attribute is legal but not currently supported by the device. attrEnumSupLimited(5) - the specified enumeration for the identified attribute is legal but not currently supported by the device. attrMaxLengthExceeded(6) - the overall length of the specified value for the identified attribute exceeds device limitations. attrReferenceUnknown(7) - the class instance specified by the policy instance identifier does not exist. priNotifyOnly(8) - the class is currently only supported for use by request or report messages prohibiting decision installation. unknownPrc(9) - attempt to install a PRI of a class not supported by PEP. tooFewAttrs(10) - recvd PRI has fewer attributes than required. invalidAttrType(11) - recvd PRI has an attribute of the wrong type.",
      "ja": "prispaceexaxted（1） - 現在、指定されたクラスにこれ以上インスタンスがインストールされない場合があります。priinstanceinvalid（2） - 指定されたクラスインスタンスは現在、インストールまたは削除を禁止する無効です。attralueinvalid（3） - 識別された属性の指定された値は違法です。attrvaluesuplimited（4） - 識別された属性の指定された値は合法ですが、現在デバイスではサポートされていません。attrenumsuplimited（5） - 識別された属性の指定された列挙は合法ですが、現在デバイスではサポートされていません。attrmaxlengthexeded（6） - 識別された属性の指定された値の全長がデバイスの制限を超えています。attrreferenceUnnknown（7） - ポリシーインスタンス識別子によって指定されたクラスインスタンスは存在しません。PrinotifyOnly（8） - クラスは現在、決定のインストールを禁止する要求またはレポートメッセージによってのみ使用されています。不明なPRC（9） -  PEPによってサポートされていないクラスのPRIをインストールしようとします。toofewattrs（10）-Recvd PRIの属性は必要以上に少ない。Invalidattrtype（11）-RecvdPriには、間違ったタイプの属性があります。"
    },
    {
      "indent": 5,
      "text": "deletedInRef(12) - deleted PRI is still referenced by other (non) deleted PRIs priSpecificError(13) - the Error Sub-code field contains the PRC specific error code",
      "ja": "deletedInref（12） - 削除されたpriは、他の（非）削除されたpris prispecificerror（13）によってまだ参照されます - エラーサブコードフィールドにはPRC固有のエラーコードが含まれています"
    },
    {
      "indent": 5,
      "text": "Where appropriate (errors 3, 4, 5, 6, 7 above) the error sub-code SHOULD identify the OID sub-identifier of the attribute associated with the error.",
      "ja": "必要に応じて（上記のエラー3、4、5、6、7）エラーサブコードは、エラーに関連付けられた属性のoidサブ識別子を識別する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.6. Error PRID Object (ErrorPRID)",
      "section_title": true,
      "ja": "4.6. エラープリッドオブジェクト（errorprid）"
    },
    {
      "indent": 3,
      "text": "S-Num = 6 (ErrorPRID), S-Type = 1 (BER), Length = variable.",
      "ja": "s-num = 6（errorprid）、s-type = 1（ber）、length = variable。"
    },
    {
      "indent": 3,
      "text": "This object is used to carry the identifier, or PRID, of a Provisioning Instance that caused an installation error or could not be installed or removed. The identifier is encoded and formatted exactly as in the PRID object as described in section 4.1.",
      "ja": "このオブジェクトは、インストールエラーを引き起こした、またはインストールまたは削除できなかったプロビジョニングインスタンスの識別子またはpridを運ぶために使用されます。識別子は、セクション4.1で説明されているように、PRIDオブジェクトのようにエンコードおよびフォーマットされます。"
    },
    {
      "indent": 0,
      "text": "5. COPS-PR Client-Specific Data Formats",
      "section_title": true,
      "ja": "5. COPS-PRクライアント固有のデータ形式"
    },
    {
      "indent": 3,
      "text": "This section describes the format of the named client specific information for the COPS policy provisioning client. ClientSI formats are defined for Decision message's Named Decision Data object, the Request message's Named ClientSI object and Report message's Named ClientSI object. The actual content of the data is defined by the policy information base for a specific provisioning client-type (see below).",
      "ja": "このセクションでは、COPSポリシープロビジョニングクライアントの指名されたクライアント固有の情報の形式について説明します。Clientsiフォーマットは、Decisionメッセージの名前付きDecision Data Object、Request Messageの名前のClientioniオブジェクト、およびレポートメッセージの名前のClientsiオブジェクトに対して定義されています。データの実際のコンテンツは、特定のプロビジョニングクライアントタイプのポリシー情報ベースによって定義されます（以下を参照）。"
    },
    {
      "indent": 0,
      "text": "5.1. Named Decision Data",
      "section_title": true,
      "ja": "5.1. 名前付き決定データ"
    },
    {
      "indent": 3,
      "text": "The formats encapsulated by the Named Decision Data object for the policy provisioning client-types depends on the type of decision. Install and Remove are the two types of decisions that dictate the internal format of the COPS Named Decision Data object and require its presence. Install and Remove refer to the 'Install' and 'Remove' Command-Code, respectively, specified in the COPS Decision Flags Object when no Decision Flags are set. The data, in general, is composed of one or more bindings. Each binding associates a PRID object and a EPD object. The PRID object is always present in both install and remove decisions, the EPD object MUST be present in the case of an install decision and MUST NOT be present in the case of a remove decision.",
      "ja": "クライアントタイプを提供するポリシープロビジョニングの指定された決定データオブジェクトによってカプセル化された形式は、決定のタイプに依存します。インストールと削除は、Decision Data Data Objectという名前のCOPSの内部形式を指定し、その存在を必要とする2種類の決定です。インストールして削除することは、それぞれ「インストール」と「削除」コマンドコードを参照して、決定フラグが設定されていないときにCOPS Decision Flagsオブジェクトで指定されています。一般に、データは1つ以上のバインディングで構成されています。各バインディングは、PridオブジェクトとEPDオブジェクトを関連付けます。Pridオブジェクトは常にインストールと削除決定の両方に存在します。EPDオブジェクトは、インストール決定の場合に存在する必要があり、削除決定の場合は存在しないでください。"
    },
    {
      "indent": 3,
      "text": "The format for this data is encapsulated within the COPS Named\nDecision Data object as follows:\n  <Named Decision Data> ::= <<Install Decision> |\n                              <Remove Decision>>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "<Install Decision>    ::= *(<PRID> <EPD>)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "<Remove Decision>     ::= *(<PRID>|<PPRID>)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that PRID objects in a Remove Decision may specify PRID prefix values. Explicit and implicit deletion of installed policies is supported by a client. Install Decision data MUST be explicit (i.e., PRID prefix values are illegal and MUST be rejected by a client).",
      "ja": "削除決定内のPridオブジェクトは、Pridプレフィックス値を指定する場合があることに注意してください。インストールされたポリシーの明示的かつ暗黙の削除は、クライアントによってサポートされています。決定データをインストールすることは明示的でなければなりません（つまり、PRIDプレフィックス値は違法であり、クライアントによって拒否される必要があります）。"
    },
    {
      "indent": 0,
      "text": "5.2. ClientSI Request Data",
      "section_title": true,
      "ja": "5.2. clientsiリクエストデータ"
    },
    {
      "indent": 3,
      "text": "The provisioning client request data will use same bindings as described above. The format for this data is encapsulated in the COPS Named ClientSI object as follows:",
      "ja": "プロビジョニングクライアント要求データは、上記と同じバインディングを使用します。このデータの形式は、次のようにclientsiオブジェクトという名前のCOPSにカプセル化されています。"
    },
    {
      "indent": 3,
      "text": "<Named ClientSI: Request> ::= <*(<PRID> <EPD>)>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5.3. Policy Provisioning Report Data",
      "section_title": true,
      "ja": "5.3. ポリシープロビジョニングレポートデータ"
    },
    {
      "indent": 3,
      "text": "The COPS Named ClientSI object is used in the RPT message in conjunction with the accompanying COPS Report Type object to encapsulate COPS-PR report information from the PEP to the PDP. Report types can be 'Success' or 'Failure', indicating to the PDP that a particular set of provisioning policies has been either successfully or unsuccessfully installed/removed on the PEP, or 'Accounting'.",
      "ja": "clientsiオブジェクトという名前のcopsは、rptメッセージで添付のCOPSレポートタイプオブジェクトと組み合わせて使用され、PEPからPDPへのCOPS-PRレポート情報をカプセル化します。レポートタイプは「成功」または「失敗」になる可能性があり、PDPに、PEPに特定のプロビジョニングポリシーが正常にインストールされたり、削除/削除されたり、「会計」されていないことを示します。"
    },
    {
      "indent": 0,
      "text": "5.3.1. Success and Failure Report-Type Data Format",
      "section_title": true,
      "ja": "5.3.1. 成功および失敗レポートタイプのデータ形式"
    },
    {
      "indent": 3,
      "text": "Report-types can be 'Success' or 'Failure' indicating to the PDP that a particular set of provisioning policies has been either successfully or unsuccessfully installed/removed on the PEP. The provisioning report data consists of the bindings described above and global and specific error/warning information. Specific errors are associated with a particular instance. For a 'Success' Report-Type, a specific error is an indication of a warning related to a specific policy that has been installed, but that is not fully implemented (e.g., its parameters have been approximated) as identified by the ErrorPRID object. For a 'Failure' Report-Type, this is an error code specific to a binding, again, identified by the ErrorPRID object. Specific errors may also include regular <PRID><EPD> bindings to carry additional information in a generic manner so that the specific errors/warnings may be more verbosely described and associated with the erroneous ErrorPRID object.",
      "ja": "レポートタイプは、特定のプロビジョニングポリシーセットがPEPに正常にインストール/削除/削除されたことをPDPに示す「成功」または「失敗」にすることができます。プロビジョニングレポートデータは、上記のバインディングとグローバルおよび特定のエラー/警告情報で構成されています。特定のエラーは、特定のインスタンスに関連付けられています。「成功」レポートタイプの場合、特定のエラーは、インストールされている特定のポリシーに関連する警告の兆候ですが、ErrorPridオブジェクトで識別されるように、完全には実装されていません（たとえば、そのパラメーターは近似されています）。「故障」レポートタイプの場合、これはバインディングに固有のエラーコードであり、繰り返しますが、errorpridオブジェクトによって識別されます。特定のエラーには、特定のエラー/警告が誤ったエラープリッドオブジェクトに関連付けられ、関連付けられるように、一般的な方法で追加情報を掲載するための通常の<Prid> <EPD>バインディングが含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Global errors are not tied to a specific ErrorPRID. In a 'Success' RPT message, a global error is an indication of a general warning at the PEP level (e.g., memory low). In a 'Failure' RPT message, this is an indication of a general error at the PEP level (e.g., memory exhausted).",
      "ja": "グローバルエラーは、特定のエラープリッドに結び付けられていません。「成功」RPTメッセージでは、グローバルなエラーは、PEPレベルでの一般的な警告の兆候です（たとえば、メモリロー）。「障害」RPTメッセージでは、これはPEPレベルでの一般的な誤差の兆候です（たとえば、メモリが使い果たされました）。"
    },
    {
      "indent": 3,
      "text": "In the case of a 'Failure' Report-Type the PEP MUST report at least the first error and SHOULD report as many errors as possible. In this case the PEP MUST roll-back its configuration to the last good transaction before the erroneous Decision message was received.",
      "ja": "「障害」レポートタイプの場合、PEPは少なくとも最初のエラーを報告し、できるだけ多くのエラーを報告する必要があります。この場合、PEPは、誤った決定メッセージが受信される前に、その構成を最後の良好なトランザクションにロールバックする必要があります。"
    },
    {
      "indent": 3,
      "text": "The format for this data is encapsulated in the COPS Named ClientSI object as follows:",
      "ja": "このデータの形式は、次のようにclientsiオブジェクトという名前のCOPSにカプセル化されています。"
    },
    {
      "indent": 3,
      "text": "<Named ClientSI: Report> ::= <[<GPERR>] *(<report>)>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "<report> ::= <ErrorPRID> <CPERR> *(<PRID><EPD>)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5.3.2. Accounting Report-Type Data Format",
      "section_title": true,
      "ja": "5.3.2. 会計レポートタイプのデータ形式"
    },
    {
      "indent": 3,
      "text": "Additionally, reports can be used to carry accounting information when specifying the 'Accounting' Report-Type. This accounting report message will typically carry statistical or event information related to the installed configuration for use at the PDP. This information is encoded as one or more <PRID><EPD> bindings that generally describe the accounting information being reported from the PEP to the PDP.",
      "ja": "さらに、レポートを使用して、「会計」レポートタイプを指定する際に会計情報を伝達できます。この会計レポートメッセージは、通常、PDPで使用するためのインストールされた構成に関連する統計情報またはイベント情報を導入します。この情報は、PEPからPDPに報告されている会計情報を一般に説明する1つ以上の<Prid> <Epd>バインディングとしてエンコードされています。"
    },
    {
      "indent": 3,
      "text": "The format for this data is encapsulated in the COPS Named ClientSI object as follows:",
      "ja": "このデータの形式は、次のようにclientsiオブジェクトという名前のCOPSにカプセル化されています。"
    },
    {
      "indent": 3,
      "text": "<Named ClientSI: Report> ::= <*(<PRID><EPD>)>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "NOTE: RFC 2748 defines an optional Accounting-Timer (AcctTimer) object for use in the COPS Client-Accept message. Periodic accounting reports for COPS-PR clients are also obligated to be paced by this timer. Periodic accounting reports SHOULD NOT be generated by the PEP more frequently than the period specified by the COPS AcctTimer. Thus, the period between new accounting reports SHOULD be greater-than or equal-to the period specified (if specified) in the AcctTimer. If no AcctTimer object is specified by the PDP, then there are no constraints imposed on the PEP's accounting interval.",
      "ja": "注：RFC 2748は、COPSクライアントアセプトメッセージで使用するオプションのアカウンティングタイマー（ACCTTIMER）オブジェクトを定義します。COPS-PRクライアントの定期的な会計レポートも、このタイマーによってペースを合わせる義務があります。定期的な会計報告書は、警官が指定した期間よりも頻繁にPEPによって生成されるべきではありません。したがって、新しい会計報告書の間の期間は、ACCTTIMERで指定された期間（指定されている場合）よりも大きく、または等しくする必要があります。PDPによってACCTTIMERオブジェクトが指定されていない場合、PEPの会計間隔に課される制約はありません。"
    },
    {
      "indent": 0,
      "text": "6. Common Operation",
      "section_title": true,
      "ja": "6. 一般的な操作"
    },
    {
      "indent": 3,
      "text": "This section describes, in general, typical exchanges between a PDP and Policy Provisioning COPS client.",
      "ja": "このセクションでは、一般に、PDPとポリシープロビジョニングCOPSクライアントの間の典型的な交換について説明します。"
    },
    {
      "indent": 3,
      "text": "First, a TCP connection is established between the client and server and the PEP sends a Client-Open message specifying a COPS- PR client-type (use of the ClientSI object within the Client-Open message is currently undefined for COPS-PR clients). If the PDP supports the specified provisioning client-type, the PDP responds with a Client-Accept (CAT) message. If the client-type is not supported, a Client-Close (CC) message is returned by the PDP to the PEP, possibly identifying an alternate server that is known to support the policy for the provisioning client-type specified.",
      "ja": "まず、クライアントとサーバーの間にTCP接続が確立され、PEPはCOPS-PRクライアントタイプを指定するクライアントオープンメッセージを送信します（クライアントオープンメッセージ内のクライアントオブジェクトの使用は現在COPS-PRクライアントのために未定義です）。PDPが指定されたプロビジョニングクライアントタイプをサポートする場合、PDPはクライアントaccept（CAT）メッセージで応答します。クライアントタイプがサポートされていない場合、クライアントクローズ（CC）メッセージがPDPによってPEPに返され、指定されたプロビジョニングクライアントタイプのポリシーをサポートすることが知られている代替サーバーを識別する可能性があります。"
    },
    {
      "indent": 3,
      "text": "After receiving the CAT message, the PEP can send requests to the server. The REQ from a policy provisioning client contains a COPS 'Configuration Request' context object and, optionally, any relevant named client specific information from the PEP. The information provided by the PEP should include available client resources (e.g., supported classes/attributes) and default policy configuration information as well as incarnation data on existing policy. The configuration request message from a provisioning client serves two purposes. First, it is a request to the PDP for any provisioning configuration data which the PDP may currently have that is suitable for the PEP, such as access control filters, etc., given the information the PEP specified in its REQ. Also, the configuration request effectively opens a channel that will allow the PDP to asynchronously send policy data to the PEP, as the PDP decides is necessary, as long as the PEP keeps its request state open (i.e., as long as the PEP does not send a DRQ with the request state's Client Handle). This asynchronous data may be new policy data or an update to policy data sent previously. Any relevant changes to the PEP's internal state can be communicated to the PDP by the PEP sending an updated REQ message. The PEP is free to send such updated REQ messages at any time after a CAT message to communicate changes in its local state.",
      "ja": "猫のメッセージを受信した後、PEPはサーバーにリクエストを送信できます。ポリシープロビジョニングクライアントからのREQには、COPSの「構成要求」コンテキストオブジェクト、およびオプションでは、PEPからの関連する名前のクライアント固有情報が含まれています。PEPが提供する情報には、利用可能なクライアントリソース（サポートされているクラス/属性など）およびデフォルトのポリシー構成情報、および既存のポリシーに関する化身データを含める必要があります。プロビジョニングクライアントからの構成要求メッセージは、2つの目的を果たします。第一に、これは、PDPが現在持っている可能性のあるプロビジョニング構成データに対するPDPへのリクエストであり、そのREQで指定されたPEPを考慮して、アクセス制御フィルターなど、アクセス制御フィルターなどに適しています。また、構成要求は、PDPが要求状態を開いている限り（つまり、PEPがPEPが開いていない限り、PDPが決定するため、PDPがPEPにポリシーデータを非同期的に送信できるようにするチャネルを効果的に開きます。Request Stateのクライアントハンドルを使用してDRQを送信します）。この非同期データは、新しいポリシーデータまたは以前に送信されたポリシーデータの更新である場合があります。PEPの内部状態に関連する変更は、更新されたREQメッセージを送信することにより、PDPに伝達できます。PEPは、CATメッセージの後、そのような更新されたREQメッセージを自由に送信して、地方の状態で変更を伝えます。"
    },
    {
      "indent": 3,
      "text": "After the PEP sends a REQ, if the PDP has Policy Provisioning policy configuration information for the client, that information is returned to the client in a DEC message containing the Policy Provisioning client policy data within the COPS Named Decision Data object and specifying an \"Install\" Command-Code in the Decision Flags object. If no filters are defined, the DEC message will simply specify that there are no filters using the \"NULL Decision\" Command-Code in the Decision Flags object. As the PEP MUST specify a Client Handle in the request message, the PDP MUST process the Client Handle and copy it in the corresponding decision message. A DEC message MUST be issued by the PDP with the Solicited Message Flag set in the COPS message header, regardless of whether or not the PDP has any configuration information for the PEP at the time of the request. This is to prevent the PEP from timing out the REQ and deleting the Client Handle.",
      "ja": "PEPがREQを送信した後、PDPがクライアントのポリシープロビジョニングポリシー構成情報を持っている場合、その情報は、決定データオブジェクトという名前のCOPS内でクライアントポリシーデータを提供し、「インストール」を指定するポリシープロビジョニングクライアントポリシーデータを含む12月のメッセージでクライアントに返されます。「Decision Flagsオブジェクトのコマンドコード。フィルターが定義されていない場合、DECメッセージは、Decision Flagsオブジェクトに「null Decision」コマンドコードを使用してフィルターがないことを単純に指定します。PEPはリクエストメッセージにクライアントハンドルを指定する必要があるため、PDPはクライアントのハンドルを処理し、対応する決定メッセージにコピーする必要があります。PDPがリクエスト時にPEPの構成情報を持っているかどうかにかかわらず、COPSメッセージヘッダーに設定された勧誘メッセージフラグを使用して、PDPによってDECメッセージを発行する必要があります。これは、PEPがREQのタイミングを出し、クライアントハンドルを削除するのを防ぐためです。"
    },
    {
      "indent": 3,
      "text": "The PDP can then add new policy data or update/delete existing configurations by sending subsequent unsolicited DEC message(s) to the PEP, with the same Client Handle. Previous configurations installed on the PEP are updated by the PDP by simply re-installing the same instance of configuration information again (effectively overwriting the old data). The PEP is responsible for removing the Client handle when it is no longer needed, for example when an interface goes down, and informing the PDP that the Client Handle is to be deleted via the COPS DRQ message.",
      "ja": "PDPは、同じクライアントハンドルを使用して、後続の未承諾DECメッセージをPEPに送信することにより、新しいポリシーデータを追加するか、既存の構成を更新/削除できます。PEPにインストールされた以前の構成は、同じインスタンスの構成情報を再度再インストールするだけでPDPによって更新されます（古いデータを効果的に上書き）。PEPは、たとえばインターフェイスがダウンしたときに、クライアントハンドルが不要になったときにクライアントのハンドルを削除し、PDPにCOPS DRQメッセージを介して削除されることをPDPに通知する責任があります。"
    },
    {
      "indent": 3,
      "text": "For Policy Provisioning purposes, access state, and access requests to the policy server can be initiated by other sources besides the PEP. Examples of other sources include attached users requesting network services via a web interface into a central management application, or H.323 servers requesting resources on behalf of a user for a video conferencing application. When such a request is accepted, the edge device affected by the decision (the point where the flow is to enter the network) needs to be informed of the decision. Since the PEP in the edge device did not initiate the request, the specifics of the request, e.g., flowspec, packet filter, and PHB to apply, needs to be communicated to the PEP by the PDP. This information is sent to the PEP using the Decision message containing Policy Provisioning Named Decision Data objects in the COPS Decision object as specified. Any updates to the state information, for example in the case of a policy change or call tear down, is communicated to the PEP by subsequent unsolicited DEC messages containing the same Client Handle and the updated Policy Provisioning request state. Updates can specify that policy data is to be installed, deleted, or updated (re-installed).",
      "ja": "ポリシープロビジョニングの目的で、PEP以外のソースがポリシーサーバーにアクセスし、アクセスリクエストを開始できます。他のソースの例には、Webインターフェイスを介して中央管理アプリケーションにネットワークサービスを要求する添付のユーザー、またはビデオ会議アプリケーションのユーザーに代わってリソースを要求するH.323サーバーが含まれます。そのような要求が受け入れられると、決定の影響を受けたエッジデバイス（フローがネットワークに入るポイント）に決定を通知する必要があります。EdgeデバイスのPEPは要求を開始しなかったため、リクエストの詳細、たとえばFlowsPec、パケットフィルター、PHBを適用するために、PDPによってPEPに伝達する必要があります。この情報は、指定されたCOPS決定オブジェクトの決定データオブジェクトという名前のポリシープロビジョニングを含む決定メッセージを使用して、PEPに送信されます。たとえば、ポリシーの変更や涙の脱却の場合など、状態情報の更新は、同じクライアントハンドルと更新されたポリシープロビジョニングリクエスト状態を含むその後の未承諾のDECメッセージによってPEPに伝えられます。更新では、ポリシーデータをインストール、削除、または更新（再インストール）することを指定できます。"
    },
    {
      "indent": 3,
      "text": "PDPs may also command the PEP to open a new Request State or delete an exiting one by issuing a decision with the Decision Flags object's Request-State flag set. If the command-code is \"install\", then the PDP is commanding the PEP to create a new Request State, and therefore issue a new REQ message specifying a new Client Handle or otherwise issue a \"Failure\" RPT specifying the appropriate error condition. Each request state represents an independent and logically non-overlapping namespace, identified by the Client Handle, on which transactions (a.k.a., configuration installations, deletions, updates) may be performed. Other existing Request States will be unaffected by the new request state as they are independent (thus, no instances of configuration data within one Request State can be affected by DECs for another Request State as identified by the Client Handle). If the command-code is \"Remove\", then the PDP is commanding the PEP to delete the existing Request-State specified by the DEC message's Client Handle, thereby causing the PEP to issue a DRQ message for this Handle.",
      "ja": "また、PDPSは、Decision Flags Object ObjectのRequest-State Flag Setを使用して決定を発行することにより、新しい要求状態を開くようにPEPに命令するか、既存のリクエスト状態を削除することもできます。コマンドコードが「インストール」である場合、PDPはPEPをコマンドして新しいリクエスト状態を作成するため、新しいクライアントハンドルを指定する新しいREQメッセージを発行するか、適切なエラー条件を指定する「障害」RPTを発行します。各要求状態は、クライアントハンドルによって識別される独立した論理的に重複していない名前空間を表し、そのトランザクション（別名、構成インストール、削除、更新）を実行することができます。他の既存の要求状態は、独立しているため、新しいリクエスト状態の影響を受けません（したがって、クライアントハンドルで識別される別の要求状態について、ある要求状態内の構成データのインスタンスがDECによって影響を受けることはありません）。コマンドコードが「削除」されている場合、PDPはPEPを指揮して、DECメッセージのクライアントハンドルによって指定された既存のリクエスト状態を削除するため、PEPがこのハンドルにDRQメッセージを発行します。"
    },
    {
      "indent": 3,
      "text": "The PEP MUST acknowledge a DEC message and specify what action was taken by sending a RPT message with a \"Success\" or \"Failure\" Report-Type object with the Solicited Message Flag set in the COPS message header. This serves as an indication to the PDP that the requestor (e.g., H.323 server) can be notified whether the request has been accepted by the network or not. If the PEP needs to reject the DEC operation for any reason, a RPT message is sent with a Report-Type with the value \"Failure\" and optionally a Client Specific Information object specifying the policy data that was rejected. Under such solicited report failure conditions, the PEP MUST always rollback to its previously installed (good) state as if the DEC never occurred. The PDP is then free to modify its decision and try again.",
      "ja": "PEPは、DECメッセージを確認し、CopsメッセージヘッダーにSothiCed Messageフラグを設定した「成功」または「失敗」レポートタイプのオブジェクトを含むRPTメッセージを送信することによって実行されたアクションを指定する必要があります。これは、要求者（たとえば、H.323サーバー）がネットワークによって受け入れられているかどうかを通知できることをPDPの兆候として機能します。PEPが何らかの理由でDEC操作を拒否する必要がある場合、RPTメッセージは、値「障害」とオプションで拒否されたポリシーデータを指定するクライアント固有の情報オブジェクトを備えたレポートタイプで送信されます。このような勧誘された報告の故障条件の下では、PEPは、以前にインストールされた（良い）状態に常に、DECが発生しなかったかのようにロールバックする必要があります。PDPは自由に決定を変更し、再試行することができます。"
    },
    {
      "indent": 3,
      "text": "The PEP can report to the PDP the current status of any installed request state when appropriate. This information is sent in a Report-State (RPT) message with the \"Accounting\" flag set. The request state that is being reported is identified via the associated Client Handle in the report message.",
      "ja": "PEPは、必要に応じて、インストールされた要求状態の現在のステータスをPDPに報告できます。この情報は、「アカウンティング」フラグセットを含むレポート状態（RPT）メッセージで送信されます。報告されている要求状態は、レポートメッセージの関連するクライアントハンドルを介して識別されます。"
    },
    {
      "indent": 3,
      "text": "Finally, Client-Close (CC) messages are used to cancel the corresponding Client-Open message. The CC message informs the other side that the client-type specified is no longer supported.",
      "ja": "最後に、Client-Close（CC）メッセージを使用して、対応するクライアントオープンメッセージをキャンセルします。CCメッセージは、指定されたクライアントタイプがサポートされなくなったことを反対側に通知します。"
    },
    {
      "indent": 0,
      "text": "7. Fault Tolerance",
      "section_title": true,
      "ja": "7. フォールトトレランス"
    },
    {
      "indent": 3,
      "text": "When communication is lost between PEP and PDP, the PEP attempts to re-establish the TCP connection with the PDP it was last connected to. If that server cannot be reached, then the PEP attempts to connect to a secondary PDP, assumed to be manually configured (or otherwise known) at the PEP.",
      "ja": "PEPとPDPの間で通信が失われると、PEPは最後に接続されたPDPとのTCP接続を再確立しようとします。そのサーバーに到達できない場合、PEPはPEPで手動で構成（またはその他の方法で知られている）と想定される二次PDPに接続しようとします。"
    },
    {
      "indent": 3,
      "text": "When a connection is finally re-established with a PDP, the PEP sends a OPN message with a <LastPDPAddr> object providing the address of the most recent PDP for which it is still caching decisions. If no decisions are being cached on the PEP (due to reboot or TTL timeout of state) the PEP MUST NOT include the last PDP address information. Based on this object, the PDP may request the PEP to re-synch its current state information (by issuing a COPS SSQ message). If, after re-connecting, the PDP does not request synchronization, the client can assume the server recognizes it and the current state at the PEP is correct, so a REQ message need not be sent. Still, any state changes which occurred at the PEP that the PEP could not communicate to the PDP due to communication having been lost, MUST be reported to the PDP via the PEP sending an updated REQ message. Whenever re-synchronization is requested, the PEP MUST reissue any REQ messages for all known Request-States and the PDP MUST issue DEC messages to delete either individual PRIDs or prefixes as appropriate to ensure a consistent known state at the PEP.",
      "ja": "接続が最終的にPDPで再確立されると、PEPは<lastPdPaddr>オブジェクトを使用してOPNメッセージを送信し、まだ決定の決定である最新のPDPのアドレスを提供します。PEP（状態の再起動またはTTLタイムアウトのため）に決定がキャッシュされていない場合、PEPは最後のPDPアドレス情報を含めてはなりません。このオブジェクトに基づいて、PDPはPEPに現在の状態情報を再シンチするよう要求する場合があります（COPS SSQメッセージを発行することにより）。再接続した後、PDPが同期を要求しない場合、クライアントはサーバーがそれを認識し、PEPの現在の状態が正しいと想定できるため、REQメッセージを送信する必要はありません。それでも、通信が失われたためにPEPがPDPと通信できなかったというPEPで発生した状態の変更は、更新されたREQメッセージを送信してPEPを介してPDPに報告する必要があります。再同期が要求されるたびに、PEPはすべての既知のリクエストステートのREQメッセージを再発行する必要があり、PDPは、PEPで一貫した既知の状態を確保するために、個々のPridまたはプレフィックスのいずれかを削除するためにDECメッセージを発行する必要があります。"
    },
    {
      "indent": 3,
      "text": "While the PEP is disconnected from the PDP, the active request-state at the PEP is to be used for policy decisions. If the PEP cannot re-connect in some pre-specified period of time, all installed Request-States are to be deleted and their associated Handles removed. The same holds true for the PDP; upon detecting a failed TCP connection, the time-out timer is started for all Request-States associated with the PEP and these states are removed after the administratively specified period without a connection.",
      "ja": "PEPはPDPから切断されていますが、PEPのアクティブリクエストステートはポリシー決定に使用されます。PEPがいくつかの事前に指定された期間に再接続できない場合、インストールされたすべてのリクエストステートを削除し、関連するハンドルを削除します。同じことがPDPにも当てはまります。失敗したTCP接続を検出すると、PEPに関連付けられたすべてのリクエストステートに対してタイムアウトタイマーが開始され、これらの状態は、接続なしで管理上指定期間後に削除されます。"
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The COPS protocol [COPS], from which this document derives, describes the mandatory security mechanisms that MUST be supported by all COPS implementations. These mandatory security mechanisms are used by the COPS protocol to transfer opaque information from PEP to PDP and vice versa in an authenticated and secure manner. COPS for Policy Provisioning simply defines a structure for this opaque information already carried by the COPS protocol. As such, the security mechanisms described for the COPS protocol will also be deployed in a COPS-PR environment, thereby ensuring the integrity of the COPS-PR information being communicated. Furthermore, in order to fully describe a practical set of structured data for use with COPS-PR, a PIB (Policy Information Base) will likely be written in a separate document. The authors of such a PIB document need to be aware of the security concerns associated with the specific data they have defined. These concerns MUST be fully specified in the security considerations section of the PIB document along with the required security mechanisms for transporting this newly defined data.",
      "ja": "COPSプロトコル[COPS]は、このドキュメントから導き出され、すべてのCOPS実装によってサポートされなければならない必須のセキュリティメカニズムを説明しています。これらの必須のセキュリティメカニズムは、COPSプロトコルによって使用され、PEPからPDPに不透明な情報を転送し、その逆に認証された安全な方法でも使用されます。Policy ProvisioningのCOPSは、COPSプロトコルが既に運んでいるこの不透明な情報の構造を単に定義します。そのため、COPSプロトコルに記載されているセキュリティメカニズムもCOPS-PR環境に展開され、それによりCOPS-PR情報の完全性が伝えられます。さらに、COPS-PRで使用するための実用的な構造化データセットを完全に説明するために、PIB（ポリシー情報ベース）が別のドキュメントに記述される可能性があります。このようなPIBドキュメントの著者は、定義した特定のデータに関連するセキュリティの懸念に注意する必要があります。これらの懸念は、この新たに定義されたデータを輸送するために必要なセキュリティメカニズムとともに、PIBドキュメントのセキュリティに関する考慮事項セクションで完全に指定する必要があります。"
    },
    {
      "indent": 0,
      "text": "9. IANA Considerations",
      "section_title": true,
      "ja": "9. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "COPS for Policy Provisioning follows the same IANA considerations for COPS objects as the base COPS protocol [COPS]. COPS-PR has defined one additional Decision Flag value of 0x02, extending the COPS base protocol only by this one value. No new COPS Client- Types are defined by this document.",
      "ja": "ポリシープロビジョニングのCOPは、Base Copsプロトコル[COPS]と同じCOPSオブジェクトのIANAの考慮事項に従います。COPS-PRは、0x02の追加の決定フラグ値を定義し、COPSベースプロトコルをこの1つの値のみで拡張しました。このドキュメントで定義されている新しいCOPSクライアントタイプはありません。"
    },
    {
      "indent": 3,
      "text": "COPS-PR also introduces a new object number space with each object being identified by its S-Num and S-Type value pair. These objects are encapsulated within the existing COPS Named ClientSI or Named Decision Data objects [COPS] and, therefore, do not conflict with any assigned numbers in the COPS base protocol. Additional S-Num and S-Type pairs can only be added to COPS-PR using the IETF Consensus rule as defined in [IANA]. These two numbers are always to be treated as a pair, with one or more S-Types defined per each S-Num. This document defines the S-Num values 1-6 and the S-Type 1 for each of these six values (note that the S-Type value of 2 is reserved for transport of XML encoded data). A listing of all the S-Num and S-Type pairs defined by this document can be found in sections 4.1-4.6.",
      "ja": "COPS-PRは、各オブジェクトがS-NumおよびSタイプの値ペアで識別される新しいオブジェクト番号スペースも導入します。これらのオブジェクトは、clientsiという名前の既存のCOPにカプセル化されているか、決定データオブジェクト[COP]という名前の名前が付けられているため、COPSベースプロトコルの割り当てられた番号と競合しません。[IANA]で定義されているIETFコンセンサスルールを使用して、追加のS-NumおよびSタイプのペアはCOPS-PRにのみ追加できます。これらの2つの数値は常にペアとして扱われ、各S-Numごとに1つ以上のSタイプが定義されています。このドキュメントでは、これらの6つの値のそれぞれのS-Num値1-6とSタイプ1を定義します（2のSタイプの値は、XMLエンコードデータの輸送用に予約されていることに注意してください）。このドキュメントで定義されたすべてのS-NumおよびSタイプのペアのリストは、セクション4.1-4.6にあります。"
    },
    {
      "indent": 3,
      "text": "Likewise, additional Global Provisioning error codes and Class-Specific Provisioning error codes defined for COPS-PR can only be added with IETF Consensus. This document defines the Global Provisioning error code values 1-11 in section 4.4 for the Global Provisioning Error Object (GPERR). This document also defines the Class-Specific error code values 1-13 in section 4.5 for the Class Provisioning Error Object (CPERR).",
      "ja": "同様に、COPS-PRに対して定義された追加のグローバルプロビジョニングエラーコードとクラス固有のプロビジョニングエラーコードは、IETFコンセンサスでのみ追加できます。このドキュメントでは、グローバルプロビジョニングエラーオブジェクト（GPERR）のセクション4.4のグローバルプロビジョニングエラーコード値1-11を定義します。このドキュメントは、クラスプロビジョニングエラーオブジェクト（CPERR）のセクション4.5のクラス固有のエラーコード値1-13も定義します。"
    },
    {
      "indent": 0,
      "text": "10. Acknowledgements",
      "section_title": true,
      "ja": "10. 謝辞"
    },
    {
      "indent": 3,
      "text": "This document has been developed with active involvement from a number of sources. The authors would specifically like to acknowledge the valuable input given by Michael Fine, Scott Hahn, and Carol Bell.",
      "ja": "このドキュメントは、多くの情報源からの積極的な関与で開発されています。著者は、マイケル・ファイン、スコット・ハーン、キャロル・ベルによって与えられた貴重なインプットを特に認めたいと思うでしょう。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11. 参考文献"
    },
    {
      "indent": 3,
      "text": "[COPS] Boyle, J., Cohen, R., Durham, D., Herzog, S., Raja, R. and A. Sastry, \"The COPS (Common Open Policy Service) Protocol\", RFC 2748, January 2000.",
      "ja": "[警官]ボイル、J。、コーエン、R。、ダーラム、D。、ヘルツォグ、S。、ラジャ、R。、A。"
    },
    {
      "indent": 3,
      "text": "[RAP] Yavatkar, R., Pendarakis, D. and R. Guerin, \"A Framework for Policy Based Admission Control\", RFC 2753, January 2000.",
      "ja": "[Rap] Yavatkar、R.、Pendarakis、D。and R. Guerin、「政策ベースの入場管理の枠組み」、RFC 2753、2000年1月。"
    },
    {
      "indent": 3,
      "text": "[COPRSVP] Boyle, J., Cohen, R., Durham, D., Herzog, S., Raja, R. and A. Sastry, \"COPS usage for RSVP\", RFC 2749, January 2000.",
      "ja": "[Coprsvp] Boyle、J.、Cohen、R.、Durham、D.、Herzog、S.、Raja、R.、A。Sastry、「RSVPのCOPS使用」、RFC 2749、2000年1月。"
    },
    {
      "indent": 3,
      "text": "[ASN1] Information processing systems - Open Systems Interconnection, \"Specification of Abstract Syntax Notation One (ASN.1)\", International Organization for Standardization, International Standard 8824, December 1987.",
      "ja": "[ASN1]情報処理システム - オープンシステムの相互接続、「抽象的構文表記の仕様（ASN.1）」、国際標準化機関、国際標準8824、1987年12月。"
    },
    {
      "indent": 3,
      "text": "[BER] Information processing systems - Open Systems Interconnection - Specification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1), International Organization for Standardization. International Standard 8825, (December, 1987).",
      "ja": "[BER]情報処理システム - オープンシステムの相互接続 - 抽象的な構文表記1（ASN.1）の基本エンコードルールの仕様、国際標準化機関。国際標準8825（1987年12月）。"
    },
    {
      "indent": 3,
      "text": "[RFC2475] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z. and W. Weiss, \"An Architecture for Differentiated Service,\" RFC 2475, December 1998.",
      "ja": "[RFC2475] Blake、S.、Black、D.、Carlson、M.、Davies、E.、Wang、Z。、およびW. Weiss、「差別化されたサービスの建築」、RFC 2475、1998年12月。"
    },
    {
      "indent": 3,
      "text": "[SPPI] McCloghrie, K., Fine, M., Seligson, J., Chan, K., Hahn, S., Sahita, R., Smith, A. and F. Reichmeyer, \"Structure of Policy Provisioning Information SPPI\", Work in Progress.",
      "ja": "[SPPI] McCloghrie、K.、Fine、M.、Seligson、J.、Chan、K.、Hahn、S.、Sahita、R.、Smith、A。and F. Reichmeyer、「政策提供情報SPPIの構造」、進行中の作業。"
    },
    {
      "indent": 3,
      "text": "[V2SMI] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M. and S. Waldbusser, \"Structure of Management Information Version 2(SMIv2)\", STD 58, RFC 2578, April 1999.",
      "ja": "[V2SMI] McCloghrie、K.、Perkins、D.、Schoenwaelder、J.、Case、J.、Rose、M。and S. Waldbusser、「管理情報の構造バージョン2（SMIV2）、STD 58、RFC 2578、1999年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "[RFC2234] Crocker、D。およびP. Overell、「構文仕様のためのBNFの増強：ABNF」、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "[IANA] Alvestrand, H. and T. Narten, \"Guidelines for writing an IANA Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.",
      "ja": "[IANA] Alvestrand、H。およびT. Narten、「RFCSでIANA考慮事項セクションを書くためのガイドライン」、BCP 26、RFC 2434、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[URN] Moats, R., \"Uniform Resource Names (URN) Syntax\", RFC 2141, May 1997.",
      "ja": "[urn] Moats、R。、「ユニフォームリソース名（urn）構文」、RFC 2141、1997年5月。"
    },
    {
      "indent": 3,
      "text": "[XML] World Wide Web Consortium (W3C), \"Extensible Markup Language (XML),\" W3C Recommendation, February, 1998, http://www.w3.org/TR/1998/REC-xml-19980210.",
      "ja": "[XML] World Wide Web Consortium（W3C）、「拡張可能なマークアップ言語（XML）」、W3C推奨、1998年2月、http：//www.w3.org/tr/1998/rec-xml-19980210。"
    },
    {
      "indent": 0,
      "text": "12. Authors' Addresses",
      "section_title": true,
      "ja": "12. 著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Kwok Ho Chan Nortel Networks, Inc. 600 Technology Park Drive Billerica, MA 01821",
      "ja": "Kwok Ho Chan Nortel Networks、Inc。600 Technology Park Drive Billerica、MA 01821"
    },
    {
      "indent": 3,
      "text": "Phone: (978) 288-8175 EMail: khchan@nortelnetworks.com",
      "ja": "電話：（978）288-8175メール：khchan@nortelnetworks.com"
    },
    {
      "indent": 3,
      "text": "David Durham Intel 2111 NE 25th Avenue Hillsboro, OR 97124",
      "ja": "David Durham Intel 2111 NE 25th Avenue Hillsboro、または97124"
    },
    {
      "indent": 3,
      "text": "Phone: (503) 264-6232 Email: david.durham@intel.com",
      "ja": "電話：（503）264-6232メール：David.durham@intel.com"
    },
    {
      "indent": 3,
      "text": "Silvano Gai Cisco Systems, Inc. 170 Tasman Dr. San Jose, CA 95134-1706",
      "ja": "Silvano Gai Cisco Systems、Inc。170 Tasman Dr. San Jose、CA 95134-1706"
    },
    {
      "indent": 3,
      "text": "Phone: (408) 527-2690 EMail: sgai@cisco.com",
      "ja": "電話：（408）527-2690メール：sgai@cisco.com"
    },
    {
      "indent": 3,
      "text": "Shai Herzog IPHighway Inc. 69 Milk Street, Suite 304 Westborough, MA 01581",
      "ja": "Shai Herzog Iphighway Inc. 69 Milk Street、Suite 304 Westborough、MA 01581"
    },
    {
      "indent": 3,
      "text": "Phone: (914) 654-4810 EMail: Herzog@iphighway.com",
      "ja": "電話：（914）654-4810メール：herzog@iphighway.com"
    },
    {
      "indent": 3,
      "text": "Keith McCloghrie",
      "ja": "キース・マクログリー"
    },
    {
      "indent": 3,
      "text": "Phone: (408) 526-5260 EMail: kzm@cisco.com Francis Reichmeyer PFN, Inc. University Park at MIT 26 Landsdowne Street Cambridge, MA 02139",
      "ja": "電話：（408）526-5260メール：kzm@cisco.com Francis Reichmeyer Pfn、Inc。MIT 26 Landsdowne Street Cambridge、MA 02139"
    },
    {
      "indent": 3,
      "text": "Phone: (617) 494 9980 EMail: franr@pfn.com",
      "ja": "電話：（617）494 9980メール：franr@pfn.com"
    },
    {
      "indent": 3,
      "text": "John Seligson Nortel Networks, Inc. 4401 Great America Parkway Santa Clara, CA 95054",
      "ja": "John Seligson Nortel Networks、Inc。4401 Great America Parkway Santa Clara、CA 95054"
    },
    {
      "indent": 3,
      "text": "Phone: (408) 495-2992 Email: jseligso@nortelnetworks.com",
      "ja": "電話：（408）495-2992メール：jseligso@nortelnetworks.com"
    },
    {
      "indent": 3,
      "text": "Raj Yavatkar",
      "ja": "Raj Yavatkar"
    },
    {
      "indent": 3,
      "text": "Phone: (503) 264-9077 EMail: raj.yavatkar@intel.com",
      "ja": "電話：（503）264-9077メール：raj.yavatkar@intel.com"
    },
    {
      "indent": 3,
      "text": "Andrew Smith Allegro Networks 6399 San Ignacio Ave. San Jose, CA 95119, USA",
      "ja": "アンドリュースミスアレグロネットワーク6399サンイグナシオアベニュー。サンノゼ、カリフォルニア州95119、米国"
    },
    {
      "indent": 3,
      "text": "EMail: andrew@allegronetworks.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "13. Full Copyright Statement",
      "section_title": true,
      "ja": "13. 完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2001）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があります。また、それについてコメントまたは説明する派生作品、またはその実装を支援することは、いかなる種類の制限なしに、準備、コピー、公開、および部分的に配布される場合があります。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会またはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書と本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}