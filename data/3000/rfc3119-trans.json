{
  "title": {
    "text": "RFC 3119 - A More Loss-Tolerant RTP Payload Format for MP3 Audio",
    "ja": "RFC 3119 - MP3オーディオ用のより損失耐性RTPペイロード形式"
  },
  "number": 3119,
  "created_at": "2023-12-17 11:17:34.784886+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                       R. Finlayson\nRequest for Comments: 3119                                      LIVE.COM\nCategory: Standards Track                                      June 2001",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 9,
      "text": "A More Loss-Tolerant RTP Payload Format for MP3 Audio",
      "ja": "MP3オーディオ用のより損失耐性RTPペイロード形式"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2001）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes a RTP (Real-Time Protocol) payload format for transporting MPEG (Moving Picture Experts Group) 1 or 2, layer III audio (commonly known as \"MP3\"). This format is an alternative to that described in RFC 2250, and performs better if there is packet loss.",
      "ja": "このドキュメントでは、MPEG（Moving Picture Experts Group）1または2、レイヤーIIIオーディオ（一般に「MP3」として知られている）を輸送するためのRTP（リアルタイムプロトコル）ペイロード形式について説明します。この形式は、RFC 2250で説明されているものに代わるものであり、パケットの損失がある場合はパフォーマンスが向上します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "While the RTP payload format defined in RFC 2250 [2] is generally applicable to all forms of MPEG audio or video, it is sub-optimal for MPEG 1 or 2, layer III audio (commonly known as \"MP3\"). The reason for this is that an MP3 frame is not a true \"Application Data Unit\" - it contains a back-pointer to data in earlier frames, and so cannot be decoded independently of these earlier frames. Because RFC 2250 defines that packet boundaries coincide with frame boundaries, it handles packet loss inefficiently when carrying MP3 data. The loss of an MP3 frame will render some data in previous (or future) frames useless, even if they are received without loss.",
      "ja": "RFC 2250 [2]で定義されているRTPペイロード形式は、一般的にすべての形式のMPEGオーディオまたはビデオに適用できますが、MPEG 1または2のレイヤーIIIオーディオ（一般に「MP3」として知られています）の最適です。この理由は、mp3フレームが真の「アプリケーションデータユニット」ではないため、以前のフレームのデータへのバックポインターが含まれているため、これらの以前のフレームとは独立してデコードできないためです。RFC 2250は、パケットの境界がフレーム境界と一致することを定義するため、mp3データを運ぶときにパケット損失を非効率的に処理します。MP3フレームを失うと、紛失なく受信された場合でも、以前の（または将来の）フレームのデータが役に立たなくなります。"
    },
    {
      "indent": 3,
      "text": "In this document we define an alternative RTP payload format for MP3 audio. This format uses a data-preserving rearrangement of the original MPEG frames, so that packet boundaries now coincide with true MP3 \"Application Data Units\", which can also (optionally) be rearranged in an interleaving pattern. This new format is therefore more data-efficient than RFC 2250 in the face of packet loss.",
      "ja": "このドキュメントでは、MP3オーディオの代替RTPペイロード形式を定義します。この形式では、元のMPEGフレームのデータ提示の再配置を使用するため、パケットの境界は真のmp3「アプリケーションデータユニット」と一致します。したがって、この新しい形式は、パケット損失に直面してRFC 2250よりもデータ効率が高くなります。"
    },
    {
      "indent": 0,
      "text": "2. The Structure of MP3 Frames",
      "section_title": true,
      "ja": "2. MP3フレームの構造"
    },
    {
      "indent": 3,
      "text": "In this section we give a brief overview of the structure of a MP3 frame. (For more detailed description, see the MPEG 1 audio [3] and MPEG 2 audio [4] specifications.)",
      "ja": "このセクションでは、MP3フレームの構造の簡単な概要を説明します。（詳細については、MPEG 1オーディオ[3]およびMPEG 2オーディオ[4]仕様を参照してください。）"
    },
    {
      "indent": 3,
      "text": "Each MPEG audio frame begins with a 4-byte header. Information defined by this header includes:",
      "ja": "各MPEGオーディオフレームは、4バイトヘッダーから始まります。このヘッダーで定義された情報には以下が含まれます。"
    },
    {
      "indent": 3,
      "text": "- Whether the audio is MPEG 1 or MPEG 2. - Whether the audio is layer I, II, or III. (The remainder of this document assumes layer III, i.e., \"MP3\" frames) - Whether the audio is mono or stereo. - Whether or not there is a 2-byte CRC field following the header. - (indirectly) The size of the frame.",
      "ja": "- オーディオがMPEG 1またはMPEG 2であるかどうか - オーディオがレイヤーI、II、またはIIIであるかどうか。（このドキュメントの残りの部分は、レイヤーIII、つまり「MP3」フレームを想定しています） - オーディオがモノであるかステレオかどうか。 - ヘッダーに続いて2バイトのCRCフィールドがあるかどうか。 - （間接的に）フレームのサイズ。"
    },
    {
      "indent": 3,
      "text": "The following structures appear after the header:",
      "ja": "次の構造がヘッダーの後に表示されます。"
    },
    {
      "indent": 3,
      "text": "- (optionally) A 2-byte CRC field - A \"side info\" structure. This has the following length: - 32 bytes for MPEG 1 stereo - 17 bytes for MPEG 1 mono, or for MPEG 2 stereo - 9 bytes for MPEG 2 mono - Encoded audio data, plus optional ancillary data (filling out the rest of the frame)",
      "ja": "- （オプション）2バイトCRCフィールド - 「サイド情報」構造。これには次の長さがあります。 -MPEG 1ステレオの32バイト-MPEG 1モノ、またはMPEG 2ステレオの17バイト、MPEG 2モノのエンコードされたオーディオデータとオプションの補助データ（フレームの残りの部分の記入））"
    },
    {
      "indent": 3,
      "text": "For the purpose of this document, the \"side info\" structure is the most important, because it defines the location and size of the \"Application Data Unit\" (ADU) that an MP3 decoder will process. In particular, the \"side info\" structure defines:",
      "ja": "このドキュメントの目的のために、「サイド情報」構造が最も重要です。これは、MP3デコーダーが処理する「アプリケーションデータユニット」（ADU）の位置とサイズを定義するためです。特に、「サイド情報」構造が定義します。"
    },
    {
      "indent": 3,
      "text": "- \"main_data_begin\": This is a back-pointer (in bytes) to the start of the ADU. The back-pointer is counted from the beginning of the frame, and counts only encoded audio data and any ancillary data (i.e., ignoring any header, CRC, or \"side info\" fields).",
      "ja": "- 「main_data_begin」：これは、ADUの開始までのバックポインター（バイト単位）です。バックポインターはフレームの先頭からカウントされ、エンコードされたオーディオデータと補助データのみをカウントします（つまり、ヘッダー、CRC、または「サイド情報」フィールドを無視します）。"
    },
    {
      "indent": 3,
      "text": "An MP3 decoder processes each ADU independently. The ADUs will generally vary in length, but their average length will, of course, be that of the of the MP3 frames (minus the length of the header, CRC, and \"side info\" fields). (In MPEG literature, this ADU is sometimes referred to as a \"bit reservoir\".)",
      "ja": "MP3デコーダーは、各ADUを個別に処理します。ADUの長さは一般に異なりますが、もちろん、その平均長さはMP3フレームの長さ（ヘッダー、CRC、および「サイド情報」フィールドの長さを差し引いたものです）になります。（MPEG文献では、このADUは「ビット貯水池」と呼ばれることがあります。）"
    },
    {
      "indent": 0,
      "text": "3. A New Payload Format",
      "section_title": true,
      "ja": "3. 新しいペイロード形式"
    },
    {
      "indent": 3,
      "text": "As noted in [5], a payload format should be designed so that packet boundaries coincide with \"codec frame boundaries\" - i.e., with ADUs. In the RFC 2250 payload format for MPEG audio [2], each RTP packet payload contains MP3 frames. In this new payload format for MP3 audio, however, each RTP packet payload contains \"ADU frames\", each preceded by an \"ADU descriptor\".",
      "ja": "[5]で述べたように、パケットの境界が「コーデックフレームの境界」、つまりAdusと一致するように、ペイロード形式を設計する必要があります。MPEGオーディオ[2]のRFC 2250ペイロード形式では、各RTPパケットペイロードにMP3フレームが含まれています。ただし、MP3オーディオ用のこの新しいペイロード形式では、各RTPパケットペイロードには「ADUフレーム」が含まれており、それぞれに「ADU記述子」があります。"
    },
    {
      "indent": 0,
      "text": "3.1 ADU frames",
      "section_title": true,
      "ja": "3.1 ADUフレーム"
    },
    {
      "indent": 3,
      "text": "An \"ADU frame\" is defined as:",
      "ja": "「ADUフレーム」は次のように定義されています。"
    },
    {
      "indent": 6,
      "text": "- The 4-byte MPEG header (the same as the original MP3 frame, except that the first 11 bits are (optionally) replaced by an \"Interleaving Sequence Number\", as described in section 6 below) - The optional 2-byte CRC field (the same as the original MP3 frame) - The \"side info\" structure (the same as the original MP3 frame) - The complete sequence of encoded audio data (and any ancillary data) for the ADU (i.e., running from the start of this MP3 frame's \"main_data_begin\" back-pointer, up to the start of the next MP3 frame's back-pointer)",
      "ja": "- 4バイトのMPEGヘッダー（元のMP3フレームと同じですが、以下のセクション6で説明されているように、最初の11ビットが（オプションで）「インターリーブシーケンス番号」に置き換えられることを除きます） - オプションの2バイトCRCフィールド（元のMP3フレームと同じ） - 「サイド情報」構造（元のMP3フレームと同じ） -  ADUのエンコードされたオーディオデータ（および任意の補助データ）の完全なシーケンス（つまり、これの開始から実行されていますMp3 Frameの「Main_Data_Begin」バックポインター、次のMP3フレームのバックポインターの開始まで）"
    },
    {
      "indent": 0,
      "text": "3.2 ADU descriptors",
      "section_title": true,
      "ja": "3.2 ADU記述子"
    },
    {
      "indent": 3,
      "text": "Within each RTP packet payload, each \"ADU frame\" is preceded by a 1 or 2-byte \"ADU descriptor\", which gives the size of the ADU, and indicates whether or not this packet's data is a continuation of the previous packet's data. (This occurs only when a single \"ADU descriptor\"+\"ADU frame\" is too large to fit within a RTP packet.)",
      "ja": "各RTPパケットペイロード内で、各「ADUフレーム」の前には、ADUのサイズを与える1または2バイトの「ADU記述子」があり、このパケットのデータが以前のパケットのデータの継続であるかどうかを示します。（これは、単一の「ADU記述子」「ADUフレーム」が大きすぎてRTPパケットに収まる場合にのみ発生します。）"
    },
    {
      "indent": 3,
      "text": "An ADU descriptor consists of the following fields",
      "ja": "ADU記述子は、次のフィールドで構成されています"
    },
    {
      "indent": 3,
      "text": "- \"C\": Continuation flag (1 bit): 1 if the data following the ADU descriptor is a continuation of an ADU frame that was too large to fit within a single RTP packet; 0 otherwise. - \"T\": Descriptor Type flag (1 bit): 0 if this is a 1-byte ADU descriptor; 1 if this is a 2-byte ADU descriptor. - \"ADU size\" (6 or 14 bits): The size (in bytes) of the ADU frame that will follow this ADU descriptor (i.e., NOT including the size of the descriptor itself). A 2-byte ADU descriptor (with a 14-bit \"ADU size\" field) is used for ADU frames sizes of 64 bytes or more. For smaller ADU frame sizes, senders MAY alternatively use a 1-byte ADU descriptor (with a 6-bit \"ADU size\" field). Receivers MUST be able to accept an ADU descriptor of either size.",
      "ja": "- 「C」：継続フラグ（1ビット）：1 ADU記述子に続くデータが、単一のRTPパケットに収まるには大きすぎるADUフレームの継続である場合。0それ以外の場合。 -  \"t\"：記述子タイプフラグ（1ビット）：0これが1バイトのADU記述子の場合。1これが2バイトのADU記述子の場合。 - 「ADUサイズ」（6ビットまたは14ビット）：このADU記述子に続くADUフレームのサイズ（バイト単位）（つまり、記述子自体のサイズは含まれません）。2バイトのADU記述子（14ビットの「ADUサイズ」フィールド）は、64バイト以上のADUフレームサイズに使用されます。ADUフレームのサイズが小さい場合、送信者は、1バイトのADU記述子（6ビットの「ADUサイズ」フィールドを使用）を使用する場合があります。受信者は、いずれかのサイズのADU記述子を受け入れることができる必要があります。"
    },
    {
      "indent": 3,
      "text": "Thus, a 1-byte ADU descriptor is formatted as follows:",
      "ja": "したがって、1バイトのADU記述子は次のようにフォーマットされます。"
    },
    {
      "indent": 9,
      "text": " 0 1 2 3 4 5 6 7\n+-+-+-+-+-+-+-+-+\n|C|0|  ADU size |\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "and a 2-byte ADU descriptor is formatted as follows:",
      "ja": "そして、2バイトのADU記述子が次のようにフォーマットされます。"
    },
    {
      "indent": 9,
      "text": " 0                   1\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|C|1|     ADU size (14 bits)    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.3 Packing rules",
      "section_title": true,
      "ja": "3.3 梱包ルール"
    },
    {
      "indent": 3,
      "text": "Each RTP packet payload begins with a \"ADU descriptor\", followed by \"ADU frame\" data. Normally, this \"ADU descriptor\"+\"ADU frame\" will fit completely within the RTP packet. In this case, more than one successive \"ADU descriptor\"+\"ADU frame\" MAY be packed into a single RTP packet, provided that they all fit completely.",
      "ja": "各RTPパケットペイロードは、「ADU記述子」で始まり、「ADUフレーム」データが続きます。通常、この「ADU記述子」「ADUフレーム」は、RTPパケット内に完全に適合します。この場合、それらがすべて完全に適合すると、複数の連続した「ADU記述子」「ADUフレーム」を単一のRTPパケットに詰め込むことができます。"
    },
    {
      "indent": 3,
      "text": "If, however, a single \"ADU descriptor\"+\"ADU frame\" is too large to fit within an RTP packet, then the \"ADU frame\" is split across two or more successive RTP packets. Each such packet begins with an ADU descriptor. The first packet's descriptor has a \"C\" (continuation) flag of 0; the following packets' descriptors each have a \"C\" flag of 1. Each descriptor, in this case, has the same \"ADU size\" value: the size of the entire \"ADU frame\" (not just the portion that will fit within a single RTP packet). Each such packet (even the last one) contains only one \"ADU descriptor\".",
      "ja": "ただし、単一の「ADU記述子」「ADUフレーム」が大きすぎてRTPパケットに収まることができない場合、「ADUフレーム」は2つ以上の連続したRTPパケットに分割されます。このような各パケットは、ADU記述子から始まります。最初のパケットの記述子には、0の「C」（継続）フラグがあります。次のパケットの記述子にはそれぞれ1の「C」フラグがあります。この場合、各記述子は同じ「ADUサイズ」値です。「ADUフレーム」全体のサイズ（単一のRTPパケット）。このような各パケット（最後のパケットでも）には、1つの「ADU記述子」のみが含まれています。"
    },
    {
      "indent": 0,
      "text": "3.4 RTP header fields",
      "section_title": true,
      "ja": "3.4 RTPヘッダーフィールド"
    },
    {
      "indent": 6,
      "text": "Payload Type: The (static) payload type 14 that was defined for MPEG audio [6] MUST NOT be used. Instead, a different, dynamic payload type MUST be used - i.e., one in the range [96,127].",
      "ja": "ペイロードタイプ：MPEGオーディオ[6]で定義された（静的）ペイロードタイプ14を使用してはなりません。代わりに、異なる動的なペイロードタイプを使用する必要があります。つまり、範囲内のものです[96,127]。"
    },
    {
      "indent": 6,
      "text": "M bit: This payload format defines no use for this bit. Senders SHOULD set this bit to zero in each outgoing packet.",
      "ja": "Mビット：このペイロード形式は、このビットに対する使用を定義していません。送信者は、各発信パケットでこのビットをゼロに設定する必要があります。"
    },
    {
      "indent": 6,
      "text": "Timestamp: This is a 32-bit 90 kHz timestamp, representing the presentation time of the first ADU packed within the packet.",
      "ja": "タイムスタンプ：これは32ビット90 kHzタイムスタンプで、パケット内に詰め込まれた最初のADUのプレゼンテーション時間を表しています。"
    },
    {
      "indent": 0,
      "text": "3.5 Handling received data",
      "section_title": true,
      "ja": "3.5 受信したデータの処理"
    },
    {
      "indent": 3,
      "text": "Note that no information is lost by converting a sequence of MP3 frames to a corresponding sequence of \"ADU frames\", so a receiving RTP implementation can either feed the ADU frames directly to an appropriately modified MP3 decoder, or convert them back into a sequence of MP3 frames, as described in appendix A.2 below.",
      "ja": "MP3フレームのシーケンスを対応する「ADUフレーム」シーケンスに変換することで情報が失われないため、受信RTP実装はADUフレームを適切に変更されたMP3デコーダーに直接送信するか、それらをシーケンスのシーケンスに変換できることに注意してください。以下の付録A.2に記載されているように、mp3フレーム。"
    },
    {
      "indent": 0,
      "text": "4. Handling Multiple MPEG Audio Layers",
      "section_title": true,
      "ja": "4. 複数のMPEGオーディオレイヤーの処理"
    },
    {
      "indent": 3,
      "text": "The RTP payload format described here is intended only for MPEG 1 or 2, layer III audio (\"MP3\"). In contrast, layer I and layer II frames are self-contained, without a back-pointer to earlier frames. However, it is possible (although unusual) for a sequence of audio frames to consist of a mixture of layer III frames and layer I or II frames. When such a sequence is transmitted, only layer III frames are converted to ADUs; layer I or II frames are sent 'as is' (except for the prepending of an \"ADU descriptor\"). Similarly, the receiver of a sequence of frames - using this payload format - leaves layer I and II frames untouched (after removing the prepended \"ADU descriptor), but converts layer III frames from \"ADU frames\" to regular MP3 frames. (Recall that each frame's layer is identified from its 4-byte MPEG header.)",
      "ja": "ここで説明するRTPペイロード形式は、MPEG 1または2のレイヤーIIIオーディオ（ \"mp3\"）のみを対象としています。対照的に、レイヤーIとレイヤーIIフレームは、以前のフレームにバックポインターがない自己完結型です。ただし、一連のオーディオフレームがレイヤーIIIフレームとレイヤーIまたはIIフレームの混合物で構成されることが可能です（珍しいものの）可能です。このようなシーケンスが送信されると、レイヤーIIIフレームのみがADUに変換されます。レイヤーIまたはIIフレームは「現状のまま」送信されます（「ADU記述子」の準備を除く）。同様に、フレームのシーケンスの受信機 - このペイロード形式を使用して - レイヤーIとIIフレームは（前提条件の「ADU記述子」を削除した後）に去りますが、レイヤーIIIフレームを「ADUフレーム」から通常のMP3フレームに変換します（各フレームのレイヤーは、4バイトのMPEGヘッダーから識別されます。）"
    },
    {
      "indent": 3,
      "text": "If you are transmitting a stream consists *only* of layer I or layer II frames (i.e., without any MP3 data), then there is no benefit to using this payload format, *unless* you are using the interleaving mechanism.",
      "ja": "ストリームを送信している場合、レイヤーIまたはレイヤーIIフレーム（つまり、MP3データなし）の *のみ *のみが構成されている場合、このペイロード形式を使用することに利点はありません。"
    },
    {
      "indent": 0,
      "text": "5. Frame Packetizing and Depacketizing",
      "section_title": true,
      "ja": "5. フレームパケット化と脱退"
    },
    {
      "indent": 3,
      "text": "The transmission of a sequence of MP3 frames takes the following steps:",
      "ja": "MP3フレームのシーケンスの送信は、次の手順を実行します。"
    },
    {
      "indent": 9,
      "text": "MP3 frames\n        -1-> ADU frames\n            -2-> interleaved ADU frames\n                  -3-> RTP packets",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Step 1, the conversion of a sequence of MP3 frames to a corresponding sequence of ADU frames, takes place as described in sections 2 and 3.1 above. (Note also the pseudo-code in appendix A.1.)",
      "ja": "ステップ1、MP3フレームのシーケンスのADUフレームの対応するシーケンスへの変換は、上記のセクション2および3.1で説明されているように行われます。（付録A.1の擬似コードにも注意してください。）"
    },
    {
      "indent": 3,
      "text": "Step 2 is the reordering of the sequence of ADU frames in an (optional) interleaving pattern, prior to packetization, as described in section 6 below. (Note also the pseudo-code in appendix B.1.) Interleaving helps reduce the effect of packet loss, by distributing consecutive ADU frames over non-consecutive packets. (Note that because of the back-pointer in MP3 frames, interleaving can be applied - in general - only to ADU frames. Thus, interleaving was not possible for RFC 2250.)",
      "ja": "ステップ2は、以下のセクション6で説明されているように、パケット化の前に、（オプションの）インターリーブパターンでのADUフレームのシーケンスを並べ替えることです。（付録B.1の擬似コードにも注意してください。）インターリーブは、非継続的なパケットに連続したADUフレームを配布することにより、パケット損失の影響を減らすのに役立ちます。（MP3フレームのバックポインターのために、インターリーブを適用できることに注意してください - 一般に -  ADUフレームにのみ。したがって、RFC 2250ではインターリーブは不可能でした。）"
    },
    {
      "indent": 3,
      "text": "Step 3 is the packetizing of a sequence of (interleaved) ADU frames into RTP packets - as described in section 3.3 above. Each packet's RTP timestamp is the presentation time of the first ADU that is packed within it. Note that, if interleaving was done in step 2, the RTP timestamps on outgoing packets will not necessarily be monotonically nondecreasing.",
      "ja": "ステップ3は、上記のセクション3.3で説明されているように、RTPパケットへの（インターリーブ）ADUフレームのシーケンスのパケット化です。各パケットのRTPタイムスタンプは、その中に詰め込まれた最初のADUのプレゼンテーション時間です。ステップ2でインターリービングが行われた場合、発信パケットのRTPタイムスタンプは必ずしも単調に非削除されていないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Similarly, a sequence of received RTP packets is handled as follows:",
      "ja": "同様に、受信したRTPパケットのシーケンスは次のように処理されます。"
    },
    {
      "indent": 9,
      "text": "RTP packets\n      -4-> RTP packets ordered by RTP sequence number\n            -5-> interleaved ADU frames\n                  -6-> ADU frames\n                        -7-> MP3 frames",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Step 4 is the usual sorting of incoming RTP packets using the RTP sequence number.",
      "ja": "ステップ4は、RTPシーケンス番号を使用した着信RTPパケットの通常の並べ替えです。"
    },
    {
      "indent": 3,
      "text": "Step 5 is the depacketizing of ADU frames from RTP packets - i.e., the reverse of step 3. As part of this process, a receiver uses the \"C\" (continuation) flag in the ADU descriptor to notice when an ADU frame is split over more than one packet (and to discard the ADU frame entirely if one of these packets is lost).",
      "ja": "ステップ5は、RTPパケットからのADUフレームのデパケットです。つまり、ステップ3の逆です。このプロセスの一部として、受信者はADU記述子の「C」（継続）フラグを使用してADUフレームが分割されたときに気づきます。複数のパケット（およびこれらのパケットのいずれかが失われた場合、ADUフレームを完全に破棄する）。"
    },
    {
      "indent": 3,
      "text": "Step 6 is the rearranging of the sequence of ADU frames back to its original order (except for ADU frames missing due to packet loss), as described in section 6 below. (Note also the pseudo-code in appendix B.2.)",
      "ja": "ステップ6は、以下のセクション6で説明されているように、ADUフレームのシーケンスが元の順序に戻る（パケット損失によるADUフレームがないことを除く）再配置です。（付録B.2の擬似コードにも注意してください。）"
    },
    {
      "indent": 3,
      "text": "Step 7 is the conversion of the sequence of ADU frames into a corresponding sequence of MP3 frames - i.e., the reverse of step 1. (Note also the pseudo-code in appendix A.2.) With an appropriately modified MP3 decoder, an implementation may omit this step; instead, it could feed ADU frames directly to the (modified) MP3 decoder.",
      "ja": "ステップ7は、ADUフレームのシーケンスがMP3フレームの対応するシーケンスに変換されることです。つまり、ステップ1の逆（付録A.2の擬似コードにも注意してください。）このステップを省略する可能性があります。代わりに、ADUフレームを（変更された）MP3デコーダーに直接送ります。"
    },
    {
      "indent": 0,
      "text": "6. ADU Frame Interleaving",
      "section_title": true,
      "ja": "6. ADUフレームインターリーブ"
    },
    {
      "indent": 3,
      "text": "In MPEG audio frames (MPEG 1 or 2; all layers) the high-order 11 bits of the 4-byte MPEG header ('syncword') are always all-one (i.e., 0xFFE). When reordering a sequence of ADU frames for transmission, we reuse these 11 bits as an \"Interleaving Sequence Number\" (ISN). (Upon reception, they are replaced with 0xFFE once again.) The structure of the ISN is (a,b), where:",
      "ja": "MPEGオーディオフレーム（MPEG 1または2、すべてのレイヤー）では、4バイトMPEGヘッダー（「同期」）の高次11ビットは常にオールオン（つまり、0xffe）です。送信用のADUフレームのシーケンスを並べ替えると、これらの11ビットを「インターリーブシーケンス番号」（ISN）として再利用します。（受信時に、それらは再び0xffeに置き換えられます。）ISNの構造は（a、b）、ここで："
    },
    {
      "indent": 9,
      "text": "- a == bits 0-7: 8-bit Interleave Index (within Cycle) - b == bits 8-10: 3-bit Interleave Cycle Count",
      "ja": "- A ==ビット0-7：8ビットインターリーブインデックス（サイクル内）-B ==ビット8-10：3ビットインターリーブサイクルカウント"
    },
    {
      "indent": 3,
      "text": "I.e., the 4-byte MPEG header is reused as follows:",
      "ja": "つまり、4バイトのMPEGヘッダーは次のように再利用されます。"
    },
    {
      "indent": 6,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Interleave Idx |CycCt|   The rest of the original MPEG header  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example: Consider the following interleave cycle (of size 8): 1,3,5,7,0,2,4,6 (This particular pattern has the property that any loss of up to four consecutive ADUs in the interleaved stream will lead to a deinterleaved stream with no gaps greater than one [7].) This produces the following sequence of ISNs:",
      "ja": "例：次のインターリーブサイクル（サイズ8の）を考えてみましょう：1,3,5,7,0,2,4,6（この特定のパターンには、インターリーブストリームで最大4つの連続したADUの損失が導かれるという特性があります。1つ以上のギャップのないdeinterleavedストリームに[7]。）これは、次のISNSシーケンスを生成します。"
    },
    {
      "indent": 3,
      "text": "(1,0) (3,0) (5,0) (7,0) (0,0) (2,0) (4,0) (6,0) (1,1) (3,1) (5,1) etc.",
      "ja": "（1,0）（3,0）（5,0）（7,0）（0,0）（2,0）（4,0）（6,0）（1,1）（3,1）（3,1）（5,1）など"
    },
    {
      "indent": 3,
      "text": "So, in this example, a sequence of ADU frames",
      "ja": "したがって、この例では、ADUフレームのシーケンス"
    },
    {
      "indent": 3,
      "text": "f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 (etc.)",
      "ja": "F0 F1 F2 F3 F4 F5 F6 F7 F8 F9（ETC）"
    },
    {
      "indent": 3,
      "text": "would get reordered, in step 2, into:",
      "ja": "ステップ2で、次のように並べ替えます。"
    },
    {
      "indent": 3,
      "text": "(1,0)f1 (3,0)f3 (5,0)f5 (7,0)f7 (0,0)f0 (2,0)f2 (4,0)f4 (6,0)f6 (1,1)f9 (3,1)f11 (5,1)f13 (etc.)",
      "ja": "（1,0）f1（3,0）f3（5,0）f5（7,0）f7（0,0）f0（2,0）f2（4,0）f4（6,0）f6（1、1）f9（3,1）f11（5,1）f13（etc.）"
    },
    {
      "indent": 3,
      "text": "and the reverse reordering (along with replacement of the 0xFFE) would occur upon reception.",
      "ja": "そして、（0xffeの交換とともに）逆の並べ替えが受信時に発生します。"
    },
    {
      "indent": 3,
      "text": "The reason for breaking the ISN into \"Interleave Cycle Count\" and \"Interleave Index\" (rather than just treating it as a single 11-bit counter) is to give receivers a way of knowing when an ADU frame should be 'released' to the ADU->MP3 conversion process (step 7 above), rather than waiting for more interleaved ADU frames to arrive. E.g., in the example above, when the receiver sees a frame with ISN (<something>,1), it knows that it can release all previously-seen frames with ISN (<something>,0), even if some other (<something>,0) frames remain missing due to packet loss. A 8-bit Interleave Index allows interleave cycles of size up to 256.",
      "ja": "ISNを「インターリーブサイクルカウント」と「インターリーブインデックス」に分割する理由（単一の11ビットカウンターとして扱うのではなく）は、ADUフレームをいつに「リリース」する必要があるかを受信者に知ることです。ADU-> MP3変換プロセス（上記のステップ7）、より多くのインターリーブADUフレームが到着するのを待つのではなく。たとえば、上記の例では、受信者がISN（<monething>、1）を持つフレームを見ると、たとえ他のいくつか（<）であっても、以前に見られるすべてのフレーム（<monething、0）をリリースできることがわかっています。何か>、0）パケットの損失のためにフレームが欠落したままです。8ビットインターリーブインデックスにより、最大256のサイズのインターリーブサイクルが可能になります。"
    },
    {
      "indent": 3,
      "text": "The choice of an interleaving order can be made independently of RTP packetization. Thus, a simple implementation could choose an interleaving order first, reorder the ADU frames accordingly (step 2), then simply pack them sequentially into RTP packets (step 3). However, the size of ADU frames - and thus the number of ADU frames that will fit in each RTP packet - will typically vary in size, so a more optimal implementation would combine steps 2 and 3, by choosing an interleaving order that better reflected the number of ADU frames packed within each RTP packet.",
      "ja": "インターリーブ順序の選択は、RTPパケット化とは独立して行うことができます。したがって、単純な実装では、最初にインターリーブ順序を選択し、ADUフレームをそれに応じて再注文し（ステップ2）、次にそれらをRTPパケットにシーケンシャルにパックすることができます（ステップ3）。ただし、ADUフレームのサイズ - したがって、各RTPパケットに適合するADUフレームの数は通常サイズが異なるため、より最適な実装では、ステップ2と3を組み合わせます。各RTPパケット内に詰め込まれたADUフレームの数。"
    },
    {
      "indent": 3,
      "text": "Each receiving implementation of this payload format MUST recognize the ISN and be able to perform deinterleaving of incoming ADU frames (step 6). However, a sending implementation of this payload format MAY choose not to perform interleaving - i.e., by omitting step 2. In this case, the high-order 11 bits in each 4-byte MPEG header would remain at 0xFFE. Receiving implementations would thus see a sequence of identical ISNs (all 0xFFE). They would handle this in the same way as if the Interleave Cycle Count changed with each ADU frame, by simply releasing the sequence of incoming ADU frames sequentially to the ADU->MP3 conversion process (step 7), without reordering. (Note also the pseudo-code in appendix B.2.)",
      "ja": "このペイロード形式の実装を受信するたびに、ISNを認識し、着信ADUフレームの介入を実行できる必要があります（ステップ6）。ただし、このペイロード形式の送信実装では、インターリーブを実行しないことを選択できます。つまり、ステップ2を省略して、この場合、各4バイトMPEGヘッダーの高次11ビットは0xffeのままです。したがって、実装を受信するには、同一のISN（すべて0xffe）のシーケンスが表示されます。彼らは、並べ替えるADUフレームのシーケンスをADU-> MP3変換プロセス（ステップ7）にシーケンシャルに並べ替えることにより、各ADUフレームでインターリーブサイクルカウントが変更されたかのようにこれを処理します（ステップ7）。（付録B.2の擬似コードにも注意してください。）"
    },
    {
      "indent": 0,
      "text": "7. MIME registration",
      "section_title": true,
      "ja": "7. MIME登録"
    },
    {
      "indent": 6,
      "text": "MIME media type name: audio",
      "ja": "MIMEメディアタイプ名：オーディオ"
    },
    {
      "indent": 6,
      "text": "MIME subtype: mpa-robust",
      "ja": "MIMEサブタイプ：MPA-ROBUST"
    },
    {
      "indent": 6,
      "text": "Required parameters: none",
      "ja": "必要なパラメーター：なし"
    },
    {
      "indent": 6,
      "text": "Optional parameters: none",
      "ja": "オプションのパラメーター：なし"
    },
    {
      "indent": 6,
      "text": "Encoding considerations: This type is defined only for transfer via RTP as specified in \"RFC 3119\".",
      "ja": "考慮事項のエンコード：このタイプは、「RFC 3119」で指定されているRTPを介した転送に対してのみ定義されます。"
    },
    {
      "indent": 6,
      "text": "Security considerations: See the \"Security Considerations\" section of \"RFC 3119\".",
      "ja": "セキュリティ上の考慮事項：「RFC 3119」の「セキュリティ上の考慮事項」セクションを参照してください。"
    },
    {
      "indent": 6,
      "text": "Interoperability considerations: This encoding is incompatible with both the \"audio/mpa\" and \"audio/mpeg\" mime types.",
      "ja": "相互運用性の考慮事項：このエンコードは、「オーディオ/MPA」と「オーディオ/MPEG」MIMEタイプの両方と互換性がありません。"
    },
    {
      "indent": 6,
      "text": "Published specification: The ISO/IEC MPEG-1 [3] and MPEG-2 [4] audio specifications, and \"RFC 3119\".",
      "ja": "公開された仕様：ISO/IEC MPEG-1 [3]およびMPEG-2 [4]オーディオ仕様、および「RFC 3119」。"
    },
    {
      "indent": 6,
      "text": "Applications which use this media type: Audio streaming tools (transmitting and receiving)",
      "ja": "このメディアタイプを使用するアプリケーション：オーディオストリーミングツール（送信および受信）"
    },
    {
      "indent": 6,
      "text": "Additional information: none",
      "ja": "追加情報：なし"
    },
    {
      "indent": 6,
      "text": "Person & email address to contact for further information: Ross Finlayson finlayson@live.com",
      "ja": "詳細については、人とメールアドレスをお問い合わせください：Ross Finlayson Finlayson@live.com"
    },
    {
      "indent": 6,
      "text": "Intended usage: COMMON",
      "ja": "意図された使用法：共通"
    },
    {
      "indent": 6,
      "text": "Author/Change controller: Author: Ross Finlayson Change controller: IETF AVT Working Group",
      "ja": "著者/変更コントローラー：著者：Ross Finlayson Change Controller：IETF AVTワーキンググループ"
    },
    {
      "indent": 0,
      "text": "8. SDP usage",
      "section_title": true,
      "ja": "8. SDPの使用"
    },
    {
      "indent": 3,
      "text": "When conveying information by SDP [8], the encoding name SHALL be \"mp3\" (the same as the MIME subtype). An example of the media representation in SDP is:",
      "ja": "SDP [8]で情報を伝える場合、エンコード名は「MP3」（MIMEサブタイプと同じ）でなければなりません。SDPのメディア表現の例は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "m=audio 49000 RTP/AVP 121 a=rtpmap:121 mpa-robust/90000",
      "ja": "M =オーディオ49000 RTP/AVP 121 A = RTPMAP：121 MPA-ROBUST/90000"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "If a session using this payload format is being encrypted, and interleaving is being used, then the sender SHOULD ensure that any change of encryption key coincides with a start of a new interleave cycle. Apart from this, the security considerations for this payload format are identical to those noted for RFC 2250 [2].",
      "ja": "このペイロード形式を使用したセッションが暗号化されており、インターリーブが使用されている場合、送信者は暗号化キーの変更が新しいインターリーブサイクルの開始と一致することを確認する必要があります。これとは別に、このペイロード形式のセキュリティ上の考慮事項は、RFC 2250 [2]に記載されているものと同じです。"
    },
    {
      "indent": 0,
      "text": "10. Acknowledgements",
      "section_title": true,
      "ja": "10. 謝辞"
    },
    {
      "indent": 3,
      "text": "The suggestion of adding an interleaving option (using the first bits of the MPEG 'syncword' - which would otherwise be all-ones - as an interleaving index) is due to Dave Singer and Stefan Gewinner. In addition, Dave Singer provided valuable feedback that helped clarify and improve the description of this payload format. Feedback from Chris Sloan led to the addition of an \"ADU descriptor\" preceding each ADU frame in the RTP packet.",
      "ja": "インターリービングオプションを追加するという提案（MPEG 'syncword'の最初のビットを使用してください - それ以外の場合は、インターリーブインデックスとしてすべてのものになります）は、Dave SingerとStefan Gewinnerによるものです。さらに、デイブシンガーは、このペイロード形式の説明を明確にし、改善するのに役立つ貴重なフィードバックを提供しました。Chris Sloanからのフィードバックにより、RTPパケットの各ADUフレームに先行する「ADU記述子」が追加されました。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11. 参考文献"
    },
    {
      "indent": 3,
      "text": "[1] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[1] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[2] Hoffman, D., Fernando, G., Goyal, V. and M. Civanlar, \"RTP Payload Format for MPEG1/MPEG2 Video\", RFC 2250, January 1998.",
      "ja": "[2] Hoffman、D.、Fernando、G.、Goyal、V。、およびM. Civanlar、「MPEG1/MPEG2ビデオのRTPペイロード形式」、RFC 2250、1998年1月。"
    },
    {
      "indent": 3,
      "text": "[3] ISO/IEC International Standard 11172-3; \"Coding of moving pictures and associated audio for digital storage media up to about 1,5 Mbits/s - Part 3: Audio\", 1993.",
      "ja": "[3] ISO/IEC International Standard 11172-3;「最大約1,5 MBITS/sのデジタルストレージメディア用の移動写真と関連するオーディオのコーディング - パート3：オーディオ」、1993。"
    },
    {
      "indent": 3,
      "text": "[4] ISO/IEC International Standard 13818-3; \"Generic coding of moving pictures and associated audio information - Part 3: Audio\", 1998.",
      "ja": "[4] ISO/IEC International Standard 13818-3;「移動する写真と関連するオーディオ情報の一般的なコーディング - パート3：オーディオ」、1998年。"
    },
    {
      "indent": 3,
      "text": "[5] Handley, M., \"Guidelines for Writers of RTP Payload Format Specifications\", BCP 36, RFC 2736, December 1999.",
      "ja": "[5] Handley、M。、「RTPペイロード形式の仕様の作家向けガイドライン」、BCP 36、RFC 2736、1999年12月。"
    },
    {
      "indent": 3,
      "text": "[6] Schulzrinne, H., \"RTP Profile for Audio and Video Conferences with Minimal Control\", RFC 1890, January 1996.",
      "ja": "[6] Schulzrinne、H。、「最小限のコントロールを備えたオーディオおよびビデオ会議のRTPプロファイル」、RFC 1890、1996年1月。"
    },
    {
      "indent": 3,
      "text": "[7] Marshall Eubanks, personal communication, December 2000.",
      "ja": "[7] Marshall Eubanks、個人的なコミュニケーション、2000年12月。"
    },
    {
      "indent": 3,
      "text": "[8] Handley, M. and V. Jacobson, \"SDP: Session Description Protocol\", RFC 2327, April 1998.",
      "ja": "[8] Handley、M。and V. Jacobson、「SDP：セッション説明プロトコル」、RFC 2327、1998年4月。"
    },
    {
      "indent": 0,
      "text": "11. Author's Address",
      "section_title": true,
      "ja": "11. 著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Ross Finlayson, Live Networks, Inc. (LIVE.COM)",
      "ja": "Ross Finlayson、Live Networks、Inc。（live.com）"
    },
    {
      "indent": 3,
      "text": "EMail: finlayson@live.com\nWWW: http://www.live.com/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix A. Translating Between \"MP3 Frames\" and \"ADU Frames\"",
      "ja": "付録A. 「MP3フレーム」と「ADUフレーム」の間で翻訳する"
    },
    {
      "indent": 3,
      "text": "The following 'pseudo code' describes how a sender using this payload format can translate a sequence of regular \"MP3 Frames\" to \"ADU Frames\", and how a receiver can perform the reverse translation: from \"ADU Frames\" to \"MP3 Frames\".",
      "ja": "次の「擬似コード」は、このペイロード形式を使用して送信者が一連の通常の「MP3フレーム」を「ADUフレーム」に変換する方法と、レシーバーが「ADUフレーム」から「MP3フレーム」までの逆翻訳を実行する方法を説明しています。。"
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "- \"Segment\": A record that represents either a \"MP3 Frame\" or an \"ADU Frame\". It consists of the following fields: - \"header\": the 4-byte MPEG header - \"headerSize\": a constant (== 4) - \"sideInfo\": the 'side info' structure, *including* the optional 2-byte CRC field, if present - \"sideInfoSize\": the size (in bytes) of the above structure - \"frameData\": the remaining data in this frame - \"frameDataSize\": the size (in bytes) of the above data - \"backpointer\": the size (in bytes) of the backpointer for this frame - \"aduDataSize\": the size (in bytes) of the ADU associated with this frame. (If the frame is already an \"ADU Frame\", then aduDataSize == frameDataSize) - \"mp3FrameSize\": the total size (in bytes) that this frame would have if it were a regular \"MP3 Frame\". (If it is already a \"MP3 Frame\", then mp3FrameSize == headerSize + sideInfoSize + frameDataSize) Note that this size can be derived completely from \"header\".",
      "ja": "- 「セグメント」：「MP3フレーム」または「ADUフレーム」のいずれかを表すレコード。次のフィールドで構成されています： - 「ヘッダー」：4バイトMPEGヘッダー - 「ヘッダーサイズ」：定数（== 4） - 「サイドインフォ」：「サイド情報」構造、 *オプションの2バイトを含む *CRCフィールド、存在する場合 - 「サイドインフォシング」：上記の構造のサイズ（バイト単位） - 「framedata」：このフレームの残りのデータ - 「framedatasize」：上記のデータのサイズ（バックインター） - 「バックポインター」：このフレームのバックポインターのサイズ（バイト単位） - 「Adudatasize」：このフレームに関連付けられたADUのサイズ（バイト単位）。（フレームが既に「ADUフレーム」である場合、Adudatasize == framedAsize） - 「mp3Framesize」：このフレームが通常の「mp3フレーム」である場合に、このフレームが持つ合計サイズ（バイト単位）。（既に「MP3フレーム」である場合、mp3Framesize == headersize sideInfosize framedAsize）に注意してください。このサイズは「ヘッダー」から完全に派生できることに注意してください。"
    },
    {
      "indent": 3,
      "text": "-  \"SegmentQueue\": A FIFO queue of \"Segment\"s, with operations\n   -  void enqueue(Segment)\n   -  Segment dequeue()\n   -  Boolean isEmpty()\n   -  Segment head()\n   -  Segment tail()\n   -  Segment previous(Segment):  returns the segment prior to a\n      given one\n   -  Segment next(Segment): returns the segment after a given one\n   -  unsigned totalDataSize(): returns the sum of the\n      \"frameDataSize\" fields of each entry in the queue",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.1 Converting a sequence of \"MP3 Frames\" to a sequence of \"ADU Frames\":",
      "ja": "A.1「MP3フレーム」のシーケンスを「ADUフレーム」のシーケンスに変換する："
    },
    {
      "indent": 0,
      "text": "SegmentQueue pendingMP3Frames; // initially empty\nwhile (1) {\n        // Enqueue new MP3 Frames, until we have enough data to generate\n        // the ADU for a frame:\n        do {\n                int totalDataSizeBefore\n                        = pendingMP3Frames.totalDataSize();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "Segment newFrame = 'the next MP3 Frame';\npendingMP3Frames.enqueue(newFrame);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "        int totalDataSizeAfter\n                = pendingMP3Frames.totalDataSize();\n} while (totalDataSizeBefore < newFrame.backpointer ||\n          totalDataSizeAfter < newFrame.aduDataSize);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// We now have enough data to generate the ADU for the most\n// recently enqueued frame (i.e., the tail of the queue).\n// (The earlier frames in the queue - if any - must be\n// discarded, as we don't have enough data to generate\n// their ADUs.)\nSegment tailFrame = pendingMP3Frames.tail();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Output the header and side info:\noutput(tailFrame.header);\noutput(tailFrame.sideInfo);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Go back to the frame that contains the start of our ADU data:\nint offset = 0;\nSegment curFrame = tailFrame;\nint prevBytes = tailFrame.backpointer;\nwhile (prevBytes > 0) {\n        curFrame = pendingMP3Frames.previous(curFrame);\n        int dataHere = curFrame.frameDataSize;\n        if (dataHere < prevBytes) {\n                prevBytes -= dataHere;\n        } else {\n                offset = dataHere - prevBytes;\n                break;\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Dequeue any frames that we no longer need:\nwhile (pendingMP3Frames.head() != curFrame) {\n        pendingMP3Frames.dequeue();\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Output, from the remaining frames, the ADU data that we want:\nint bytesToUse = tailFrame.aduDataSize;\nwhile (bytesToUse > 0) {\n        int dataHere = curFrame.frameDataSize - offset;\n        int bytesUsedHere\n                = dataHere < bytesToUse ? dataHere : bytesToUse;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "output(\"bytesUsedHere\" bytes from curFrame.frameData, starting from \"offset\");",
      "ja": "output（ \"bytesusedhere\" curframe.framedataからのバイト、「オフセット」から）;"
    },
    {
      "indent": 0,
      "text": "                bytesToUse -= bytesUsedHere;\n                offset = 0;\n                curFrame = pendingMP3Frames.next(curFrame);\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2 Converting a sequence of \"ADU Frames\" to a sequence of \"MP3 Frames\":",
      "ja": "A.2「ADUフレーム」のシーケンスを「MP3フレーム」のシーケンスに変換する："
    },
    {
      "indent": 0,
      "text": "SegmentQueue pendingADUFrames; // initially empty\nwhile (1) {\n        while (needToGetAnADU()) {\n                Segment newADU = 'the next ADU Frame';\n                pendingADUFrames.enqueue(newADU);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": " insertDummyADUsIfNecessary(); }",
      "ja": "insertdummyadusifn decessary（）;}"
    },
    {
      "indent": 0,
      "text": " generateFrameFromHeadADU(); }",
      "ja": "generateframefromheadadu（）;}"
    },
    {
      "indent": 0,
      "text": "Boolean needToGetAnADU() {\n        // Checks whether we need to enqueue one or more new ADUs before\n        // we have enough data to generate a frame for the head ADU.\n        Boolean needToEnqueue = True;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "if (!pendingADUFrames.isEmpty()) {\n        Segment curADU = pendingADUFrames.head();\n        int endOfHeadFrame = curADU.mp3FrameSize\n                - curADU.headerSize - curADU.sideInfoSize;\n        int frameOffset = 0;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "while (1) {\n        int endOfData = frameOffset\n                - curADU.backpointer +\n                  curADU.aduDataSize;\n        if (endOfData >= endOfHeadFrame) {\n                // We have enough data to generate a\n                // frame.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 24,
      "text": " needToEnqueue = False; break; }",
      "ja": "NeedToEnqueue = false;壊す;}"
    },
    {
      "indent": 8,
      "text": "                frameOffset += curADU.mp3FrameSize\n                        - curADU.headerSize\n                        - curADU.sideInfoSize;\n                if (curADU == pendingADUFrames.tail()) break;\n                curADU = pendingADUFrames.next(curADU);\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " return needToEnqueue; }",
      "ja": "NeedToEnqueueを返します。}"
    },
    {
      "indent": 0,
      "text": "void generateFrameFromHeadADU() {\n        Segment curADU = pendingADUFrames.head();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Output the header and side info:\noutput(curADU.header);\noutput(curADU.sideInfo);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Begin by zeroing out the rest of the frame, in case the ADU\n// data doesn't fill it in completely:\nint endOfHeadFrame = curADU.mp3FrameSize\n        - curADU.headerSize - curADU.sideInfoSize;\noutput(\"endOfHeadFrame\" zero bytes);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "// Fill in the frame with appropriate ADU data from this and // subsequent ADUs: int frameOffset = 0; int toOffset = 0;",
      "ja": "//これからの適切なADUデータをフレームに記入し、//後続のADU：int frameoffset = 0;int toOffset = 0;"
    },
    {
      "indent": 8,
      "text": "while (toOffset < endOfHeadFrame) {\n        int startOfData = frameOffset - curADU.backpointer;\n        if (startOfData > endOfHeadFrame) {\n                break; // no more ADUs are needed\n        }\n        int endOfData = startOfData + curADU.aduDataSize;\n        if (endOfData > endOfHeadFrame) {\n                endOfData = endOfHeadFrame;\n        }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "int fromOffset;\nif (startOfData <= toOffset) {\n        fromOffset = toOffset - startOfData;\n        startOfData = toOffset;\n        if (endOfData < startOfData) {",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "                endOfData = startOfData;\n        }\n} else {\n        fromOffset = 0;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "        // leave some zero bytes beforehand:\n        toOffset = startOfData;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "int bytesUsedHere = endOfData - startOfData;\noutput(starting at offset \"toOffset, \"bytesUsedHere\"\n        bytes from \"&curADU.frameData[fromOffset]\");\ntoOffset += bytesUsedHere;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "        frameOffset += curADU.mp3FrameSize\n                - curADU.headerSize - curADU.sideInfoSize;\n        curADU = pendingADUFrames.next(curADU);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " pendingADUFrames.dequeue(); }",
      "ja": "pindeduframes.dequeue（）;}"
    },
    {
      "indent": 0,
      "text": "void insertDummyADUsIfNecessary() {\n        // The tail segment (ADU) is assumed to have been recently\n        // enqueued.  If its backpointer would overlap the data\n        // of the previous ADU, then we need to insert one or more\n        // empty, 'dummy' ADUs ahead of it.  (This situation should\n        // occur only if an intermediate ADU was missing - e.g., due\n        // to packet loss.)\n        while (1) {\n                Segment tailADU = pendingADUFrames.tail();\n                int prevADUend; // relative to the start of the tail ADU",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "if (pendingADUFrames.head() != tailADU) {\n        // there is a previous ADU\n        Segment prevADU\n                = pendingADUFrames.previous(tailADU);\n        prevADUend\n                = prevADU.mp3FrameSize +\n                  prevADU.backpointer\n                  - prevADU.headerSize\n                  - curADU.sideInfoSize;\n        if (prevADU.aduDataSize > prevADUend) {\n                // this shouldn't happen if the previous\n                // ADU was well-formed\n                prevADUend = 0;\n        } else {\n                prevADUend -= prevADU.aduDataSize;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "        }\n} else {\n        prevADUend = 0;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "                if (tailADU.backpointer > prevADUend) {\n                        // Insert a 'dummy' ADU in front of the tail.\n                        // This ADU can have the same \"header\" (and thus\n                        // \"mp3FrameSize\") as the tail ADU, but should\n                        // have an \"aduDataSize\" of zero.  The simplest\n                        // way to do this is to copy the \"sideInfo\" from\n                        // the tail ADU, and zero out the\n                        // \"main_data_begin\" and all of the\n                        // \"part2_3_length\" fields.\n                } else {\n                        break; // no more dummy ADUs need to be inserted\n                }\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B: Interleaving and Deinterleaving",
      "ja": "付録B：インターリービングとdeinterleaving"
    },
    {
      "indent": 3,
      "text": "The following 'pseudo code' describes how a sender can reorder a sequence of \"ADU Frames\" according to an interleaving pattern (step 2), and how a receiver can perform the reverse reordering (step 6).",
      "ja": "次の「擬似コード」は、送信者がインターリービングパターン（ステップ2）に従って「ADUフレーム」のシーケンスをどのように並べ替えることができるか、およびレシーバーが逆の並べ替えを実行する方法を説明しています（ステップ6）。"
    },
    {
      "indent": 0,
      "text": "B.1 Interleaving a sequence of \"ADU Frames\":",
      "ja": "B.1「ADUフレーム」のシーケンスをインターリーブする："
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "- \"interleaveCycleSize\": an integer in the range [1,256] - \"interleaveCycle\": an array, of size \"interleaveCycleSize\", containing some permutation of the integers from the set [0 .. interleaveCycleSize-1] e.g., if \"interleaveCycleSize\" == 8, \"interleaveCycle\" might contain: 1,3,5,7,0,2,4,6 - \"inverseInterleaveCycle\": an array containing the inverse of the permutation in \"interleaveCycle\" - i.e., such that interleaveCycle[inverseInterleaveCycle[i]] == i - \"ii\": the current Interleave Index (initially 0) - \"icc\": the current Interleave Cycle Count (initially 0) - \"aduFrameBuffer\": an array, of size \"interleaveCycleSize\", of ADU Frames that are awaiting packetization",
      "ja": "- 「Interleavecyclesize」：範囲の整数[1,256]  - 「インターリーブサイクル」：サイズの「インターリーベサイクルズ」の配列[0 .. InterleaveClesize -1]。= 8、「leavecycle」には次のものが含まれる場合があります：1,3,5,7,0,2,4,6-「inverseinterinterleavecycle \"：「インターリーベサイクル」の順列の逆を含むアレイ - つまり、インターリーベイク[inverseinterinterleavecycle [i]] == i- \"II\"：現在のインターリーブインデックス（最初は0） - 「ICC」：現在のインターリーブサイクルカウント（最初は0） - 「aduframebuffer」：Adu framesのサイズ「aduframebuffer」パケット化を待っています"
    },
    {
      "indent": 0,
      "text": "while (1) { int positionOfNextFrame = inverseInterleaveCycle[ii]; aduFrameBuffer[positionOfNextFrame] = the next ADU frame; replace the high-order 11 bits of this frame's MPEG header",
      "ja": "while（1）{int positionofnextframe = inverseinterleavecycle [ii];aduframebuffer [positionofnextframe] =次のADUフレーム。このフレームのMPEGヘッダーの高次11ビットを交換します"
    },
    {
      "indent": 8,
      "text": "    with (ii,icc);\n        // Note: Be sure to leave the remaining 21 bits as is\nif (++ii == interleaveCycleSize) {\n        // We've finished this cycle, so pass all\n        // pending frames to the packetizing step\n        for (int i = 0; i < interleaveCycleSize; ++i) {\n                pass aduFrameBuffer[i] to the packetizing step;\n        }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "                ii = 0;\n                icc = (icc+1)%8;\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "B.2 Deinterleaving a sequence of (interleaved) \"ADU Frames\":",
      "ja": "b.2 deinterleaving（インターリーブ）「aduフレーム」のシーケンス："
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "- \"ii\": the Interleave Index from the current incoming ADU frame - \"icc\": the Interleave Cycle Count from the current incoming ADU frame - \"iiLastSeen\": the most recently seen Interleave Index (initially, some integer *not* in the range [0,255]) - \"iccLastSeen\": the most recently seen Interleave Cycle Count (initially, some integer *not* in the range [0,7]) - \"aduFrameBuffer\": an array, of size 32, of (pointers to) ADU Frames that have just been depacketized (initially, all entries are NULL)",
      "ja": "- 「II」：現在の着信ADUフレームからのリーブインデックス - 「ICC」：現在の着信ADUフレームからのリーブサイクルカウント - 「IILASTSEEN」：最近見られたインターリーブインデックス（最初は、範囲内の整数 *ではありません *[0,255]） -  \"icclastseen\"：最近見られた最近見られたインターリーブサイクルカウント（最初は、範囲の整数 *ではない[0,7]） -  \"aduframebuffer\"：of of（pointers to）のサイズ32の配列DepacketizedになったばかりのADUフレーム（最初は、すべてのエントリがnullです）"
    },
    {
      "indent": 0,
      "text": "while (1) {\n        aduFrame = the next ADU frame from the depacketizing step;\n        (ii,icc) = \"the high-order 11 bits of aduFrame's MPEG header\";\n        \"the high-order 11 bits of aduFrame's MPEG header\" = 0xFFE;\n                // Note: Be sure to leave the remaining 21 bits as is",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "if (icc != iccLastSeen || ii == iiLastSeen) {\n        // We've started a new interleave cycle\n        // (or interleaving was not used).  Release all\n        // pending ADU frames to the ADU->MP3 conversion step:\n        for (int i = 0; i < 32; ++i) {\n                if (aduFrameBuffer[i] != NULL) {\n                        release aduFrameBuffer[i];\n                        aduFrameBuffer[i] = NULL;\n                }\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "iiLastSeen = ii;",
      "ja": "iilastseen = ii;"
    },
    {
      "indent": 0,
      "text": "        iccLastSeen = icc;\n        aduFrameBuffer[ii] = aduFrame;\n}\nFull Copyright Statement",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2001）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があり、それについてコメントまたは説明する派生作品、またはその実装を支援することができます。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会またはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントと本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}