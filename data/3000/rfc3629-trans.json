{
  "title": {
    "text": "RFC 3629 - UTF-8, a transformation format of ISO 10646",
    "ja": "RFC 3629 - UTF-8、ISO 10646の変換形式"
  },
  "number": 3629,
  "created_at": "2023-10-13 15:17:55.405100+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         F. Yergeau\nRequest for Comments: 3629                             Alis Technologies\nSTD: 63                                                    November 2003\nObsoletes: 2279\nCategory: Standards Track",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 14,
      "text": "UTF-8, a transformation format of ISO 10646",
      "ja": "UTF-8、ISO 10646の変換形式"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2003). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2003）。無断転載を禁じます。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. This memo obsoletes and replaces RFC 2279.",
      "ja": "ISO/IEC 10646-1は、世界の執筆システムのほとんどを含むユニバーサルキャラクターセット（UCS）と呼ばれる大規模な文字セットを定義しています。ただし、元々提案されていたUCSのエンコーディングは、多くの現在のアプリケーションやプロトコルと互換性がありませんでした。これにより、このメモのオブジェクトであるUTF-8の開発が発生しました。UTF-8は、完全なUS-ASCII範囲を保存する特性を持ち、US-ASCII値に依存しているが他の値に透明なファイルシステム、パーサー、その他のソフトウェアとの互換性を提供します。このメモは、RFC 2279を廃止および置き換えます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  2\n2.  Notational conventions . . . . . . . . . . . . . . . . . . . .  3\n3.  UTF-8 definition . . . . . . . . . . . . . . . . . . . . . . .  4\n4.  Syntax of UTF-8 Byte Sequences . . . . . . . . . . . . . . . .  5\n5.  Versions of the standards  . . . . . . . . . . . . . . . . . .  6\n6.  Byte order mark (BOM)  . . . . . . . . . . . . . . . . . . . .  6\n7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n8.  MIME registration  . . . . . . . . . . . . . . . . . . . . . .  9\n9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 10\n10. Security Considerations  . . . . . . . . . . . . . . . . . . . 10\n11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 11\n12. Changes from RFC 2279  . . . . . . . . . . . . . . . . . . . . 11\n13. Normative References . . . . . . . . . . . . . . . . . . . . . 12\n   14. Informative References . . . . . . . . . . . . . . . . . . . . 12\n15. URI's  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n16. Intellectual Property Statement  . . . . . . . . . . . . . . . 13\n17. Author's Address . . . . . . . . . . . . . . . . . . . . . . . 13\n18. Full Copyright Statement . . . . . . . . . . . . . . . . . . . 14",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "ISO/IEC 10646 [ISO.10646] defines a large character set called the Universal Character Set (UCS), which encompasses most of the world's writing systems. The same set of characters is defined by the Unicode standard [UNICODE], which further defines additional character properties and other application details of great interest to implementers. Up to the present time, changes in Unicode and amendments and additions to ISO/IEC 10646 have tracked each other, so that the character repertoires and code point assignments have remained in sync. The relevant standardization committees have committed to maintain this very useful synchronism.",
      "ja": "ISO/IEC 10646 [ISO.10646]は、世界の執筆システムのほとんどを網羅するUniversal Character Set（UCS）と呼ばれる大きな文字セットを定義しています。同じ文字のセットは、Unicode標準[Unicode]によって定義されます。これにより、追加の文字プロパティと、実装者にとって非常に関心のあるその他のアプリケーションの詳細がさらに定義されます。現在まで、Unicodeの変更とISO/IEC 10646への追加と追加が互いに追跡されているため、キャラクターのレパートリーとコードポイントの割り当ては同期し続けています。関連する標準化委員会は、この非常に有用な同期を維持することを約束しています。"
    },
    {
      "indent": 3,
      "text": "ISO/IEC 10646 and Unicode define several encoding forms of their common repertoire: UTF-8, UCS-2, UTF-16, UCS-4 and UTF-32. In an encoding form, each character is represented as one or more encoding units. All standard UCS encoding forms except UTF-8 have an encoding unit larger than one octet, making them hard to use in many current applications and protocols that assume 8 or even 7 bit characters.",
      "ja": "ISO/IEC 10646およびUnicodeは、UTF-8、UCS-2、UTF-16、UCS-4、UTF-32のいくつかのエンコードフォームを共通のレパートリーのいくつかのエンコードフォームに定義します。エンコーディングフォームでは、各文字は1つ以上のエンコードユニットとして表されます。UTF-8を除くすべての標準UCSエンコードフォームには、1オクテットよりも大きいエンコードユニットがあり、8ビットまたは7ビット文字を想定している多くの現在のアプリケーションとプロトコルで使用するのが難しくなります。"
    },
    {
      "indent": 3,
      "text": "UTF-8, the object of this memo, has a one-octet encoding unit. It uses all bits of an octet, but has the quality of preserving the full US-ASCII [US-ASCII] range: US-ASCII characters are encoded in one octet having the normal US-ASCII value, and any octet with such a value can only stand for a US-ASCII character, and nothing else.",
      "ja": "このメモのオブジェクトであるUTF-8には、1オクテットのエンコードユニットがあります。オクテットのすべてのビットを使用しますが、完全なUS-ASCII [US-ASCII]範囲を保存する品質を備えています：US-ASCII文字は、通常のUS-ASCII値を持つ1つのオクテットでエンコードされ、そのような値を持つオクテットはエンコードされますUS-ASCIIキャラクターのみを表すことができ、他には何もありません。"
    },
    {
      "indent": 3,
      "text": "UTF-8 encodes UCS characters as a varying number of octets, where the number of octets, and the value of each, depend on the integer value assigned to the character in ISO/IEC 10646 (the character number, a.k.a. code position, code point or Unicode scalar value). This encoding form has the following characteristics (all values are in hexadecimal):",
      "ja": "UTF-8は、UCS文字をさまざまな数のオクテットとしてエンコードします。ここでは、オクテットの数とそれぞれの値がISO/IEC 10646の文字に割り当てられた整数値に依存します（文字番号、別名コード位置、コードポイントまたはユニコードスカラー値）。このエンコードフォームには、次の特性があります（すべての値は16進数です）："
    },
    {
      "indent": 3,
      "text": "o Character numbers from U+0000 to U+007F (US-ASCII repertoire) correspond to octets 00 to 7F (7 bit US-ASCII values). A direct consequence is that a plain ASCII string is also a valid UTF-8 string.",
      "ja": "o U 0000からU 007F（US-ASCIIレパートリー）からの文字番号は、オクテット00から7F（7ビットUS-ASCII値）に対応しています。直接的な結果は、単純なASCII文字列も有効なUTF-8文字列であることです。"
    },
    {
      "indent": 3,
      "text": "o US-ASCII octet values do not appear otherwise in a UTF-8 encoded character stream. This provides compatibility with file systems or other software (e.g., the printf() function in C libraries) that parse based on US-ASCII values but are transparent to other values.",
      "ja": "o US-ASCIIオクテット値は、UTF-8エンコードされた文字ストリームでは表示されません。これにより、US-ASCII値に基づいて解析するが、他の値に対して透過的であるファイルシステムまたはその他のソフトウェア（例：Cライブラリのprintf（）関数）との互換性を提供します。"
    },
    {
      "indent": 3,
      "text": "o Round-trip conversion is easy between UTF-8 and other encoding forms.",
      "ja": "o round-trip変換は、UTF-8と他のエンコードフォームの間で簡単です。"
    },
    {
      "indent": 3,
      "text": "o The first octet of a multi-octet sequence indicates the number of octets in the sequence.",
      "ja": "o マルチオクテットシーケンスの最初のオクテットは、シーケンス内のオクテットの数を示します。"
    },
    {
      "indent": 3,
      "text": "o The octet values C0, C1, F5 to FF never appear.",
      "ja": "o Octet値C0、C1、F5からFFからFFは表示されません。"
    },
    {
      "indent": 3,
      "text": "o Character boundaries are easily found from anywhere in an octet stream.",
      "ja": "o キャラクターの境界は、オクテットストリームのどこからでも簡単に見つけることができます。"
    },
    {
      "indent": 3,
      "text": "o The byte-value lexicographic sorting order of UTF-8 strings is the same as if ordered by character numbers. Of course this is of limited interest since a sort order based on character numbers is almost never culturally valid.",
      "ja": "o UTF-8文字列のバイト値の辞書編集並べ替え順序は、文字番号で順序付けられた場合と同じです。もちろん、文字番号に基づくソートオーダーは文化的に有効ではないため、これは限られた関心です。"
    },
    {
      "indent": 3,
      "text": "o The Boyer-Moore fast search algorithm can be used with UTF-8 data.",
      "ja": "o Boyer-Moore高速検索アルゴリズムは、UTF-8データで使用できます。"
    },
    {
      "indent": 3,
      "text": "o UTF-8 strings can be fairly reliably recognized as such by a simple algorithm, i.e., the probability that a string of characters in any other encoding appears as valid UTF-8 is low, diminishing with increasing string length.",
      "ja": "o UTF-8文字列は、単純なアルゴリズムによってかなり確実に認識される可能性があります。つまり、他のエンコードの文字列が有効なUTF-8として表示される確率は低く、文字列の長さが増加すると減少します。"
    },
    {
      "indent": 3,
      "text": "UTF-8 was devised in September 1992 by Ken Thompson, guided by design criteria specified by Rob Pike, with the objective of defining a UCS transformation format usable in the Plan9 operating system in a non-disruptive manner. Thompson's design was stewarded through standardization by the X/Open Joint Internationalization Group XOJIG (see [FSS_UTF]), bearing the names FSS-UTF (variant FSS/UTF), UTF-2 and finally UTF-8 along the way.",
      "ja": "UTF-8は、1992年9月にKen Thompsonによって考案されました。KenThompsonは、Rob Pikeによって指定された設計基準に導かれ、Plan9オペレーティングシステムで使用可能なUCS変換形式を非破壊的な方法で定義することを目的としています。トンプソンのデザインは、X/Open Joint Internationalization Group Xojig（[fss_utf]を参照）による標準化により、FSS-UTF（Variant FSS/UTF）、UTF-2、および最終的にUTF-8が途中でスチーズを取得しました。"
    },
    {
      "indent": 0,
      "text": "2. Notational conventions",
      "section_title": true,
      "ja": "2. 表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "「必須」、「そうしない」、「必須」、「必要」、「「しない」、「そうでない」、「そうではない」、「そうでない」、「推奨」、「5月」、および「オプション」は、[RFC2119]に記載されているように解釈される。"
    },
    {
      "indent": 3,
      "text": "UCS characters are designated by the U+HHHH notation, where HHHH is a string of from 4 to 6 hexadecimal digits representing the character number in ISO/IEC 10646.",
      "ja": "UCS文字はU HHHH表記によって指定されます。ここで、HHHHはISO/IEC 10646の文字番号を表す4〜6ヘクサデシマルの桁の文字列です。"
    },
    {
      "indent": 0,
      "text": "3. UTF-8 definition",
      "section_title": true,
      "ja": "3. UTF-8定義"
    },
    {
      "indent": 3,
      "text": "UTF-8 is defined by the Unicode Standard [UNICODE]. Descriptions and formulae can also be found in Annex D of ISO/IEC 10646-1 [ISO.10646]",
      "ja": "UTF-8は、Unicode標準[Unicode]によって定義されます。説明と式は、ISO/IEC 10646-1 [ISO.10646]の付録Dにもあります。"
    },
    {
      "indent": 3,
      "text": "In UTF-8, characters from the U+0000..U+10FFFF range (the UTF-16 accessible range) are encoded using sequences of 1 to 4 octets. The only octet of a \"sequence\" of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character number. In a sequence of n octets, n>1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bit(s) of that octet contain bits from the number of the character to be encoded. The following octet(s) all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded.",
      "ja": "UTF-8では、U 0000..U 10ffff範囲（UTF-16アクセス可能な範囲）の文字は、1〜4オクテットのシーケンスを使用してエンコードされています。1つの「シーケンス」の唯一のオクテットは、高次ビットを0に設定し、残りの7ビットは文字番号をエンコードするために使用されます。N> 1のnオクテットのシーケンスでは、初期オクテットにはnの高次ビットが1に設定され、その後にビットセットがあります。そのオクテットの残りのビットには、文字の数からビットが含まれています。エンコードされます。次のOctet（s）のすべてが1に設定され、次のビットが0に設定されており、それぞれに6ビットがエンコードされるキャラクターからビットを含むように6ビットを残します。"
    },
    {
      "indent": 3,
      "text": "The table below summarizes the format of these different octet types. The letter x indicates bits available for encoding bits of the character number.",
      "ja": "以下の表は、これらの異なるオクテットタイプの形式をまとめたものです。文字Xは、文字番号のビットをエンコードするために利用可能なビットを示しています。"
    },
    {
      "indent": 3,
      "text": "Char. number range  |        UTF-8 octet sequence\n   (hexadecimal)    |              (binary)\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Encoding a character to UTF-8 proceeds as follows:",
      "ja": "UTF-8にキャラクターをエンコードすると、次のように進行します。"
    },
    {
      "indent": 3,
      "text": "1. Determine the number of octets required from the character number and the first column of the table above. It is important to note that the rows of the table are mutually exclusive, i.e., there is only one valid way to encode a given character.",
      "ja": "1. 上記のテーブルの文字番号と最初の列から必要なオクテットの数を決定します。テーブルの行は相互に排他的であることに注意することが重要です。つまり、特定の文字をエンコードする有効な方法は1つだけです。"
    },
    {
      "indent": 3,
      "text": "2. Prepare the high-order bits of the octets as per the second column of the table.",
      "ja": "2. テーブルの2番目の列に従って、オクテットの高次ビットを準備します。"
    },
    {
      "indent": 3,
      "text": "3. Fill in the bits marked x from the bits of the character number, expressed in binary. Start by putting the lowest-order bit of the character number in the lowest-order position of the last octet of the sequence, then put the next higher-order bit of the character number in the next higher-order position of that octet, etc. When the x bits of the last octet are filled in, move on to the next to last octet, then to the preceding one, etc. until all x bits are filled in.",
      "ja": "3. バイナリで表現された文字番号のビットからマークされたビットをx xに記入します。シーケンスの最後のオクテットの最低次位置に文字番号の最低値ビットを配置することから始めて、そのオクテットの次の高次位置に文字番号の次の高次ビットを配置するなど。最後のオクテットのXビットが記入されたら、最後のオクテットの隣に移動し、次に前のオクテットなどに移動します。すべてのXビットが入力されるまで。"
    },
    {
      "indent": 3,
      "text": "The definition of UTF-8 prohibits encoding character numbers between U+D800 and U+DFFF, which are reserved for use with the UTF-16 encoding form (as surrogate pairs) and do not directly represent characters. When encoding in UTF-8 from UTF-16 data, it is necessary to first decode the UTF-16 data to obtain character numbers, which are then encoded in UTF-8 as described above. This contrasts with CESU-8 [CESU-8], which is a UTF-8-like encoding that is not meant for use on the Internet. CESU-8 operates similarly to UTF-8 but encodes the UTF-16 code values (16-bit quantities) instead of the character number (code point). This leads to different results for character numbers above 0xFFFF; the CESU-8 encoding of those characters is NOT valid UTF-8.",
      "ja": "UTF-8の定義は、U D800とU DFFFの間の文字番号のエンコードを禁止します。これは、UTF-16エンコードフォーム（代理ペアとして）で使用するために予約され、文字を直接表すことはありません。UTF-16データからUTF-8をエンコードする場合、最初にUTF-16データをデコードして文字番号を取得する必要があります。文字番号は、上記のようにUTF-8でエンコードされます。これは、インターネットでの使用を意図していないUTF-8のようなエンコードであるCESU-8 [CESU-8]とは対照的です。CESU-8はUTF-8と同様に動作しますが、文字番号（コードポイント）の代わりにUTF-16コード値（16ビット数量）をコードします。これにより、0xffffを超える文字番号の結果が異なります。これらの文字のCESU-8エンコードは、有効なUTF-8ではありません。"
    },
    {
      "indent": 3,
      "text": "Decoding a UTF-8 character proceeds as follows:",
      "ja": "UTF-8文字のデコードは次のように進行します。"
    },
    {
      "indent": 3,
      "text": "1. Initialize a binary number with all bits set to 0. Up to 21 bits may be needed.",
      "ja": "1. すべてのビットが0に設定されたバイナリ番号を初期化します。最大21ビットが必要になる場合があります。"
    },
    {
      "indent": 3,
      "text": "2. Determine which bits encode the character number from the number of octets in the sequence and the second column of the table above (the bits marked x).",
      "ja": "2. シーケンス内のオクテット数と上のテーブルの2番目の列（ビットはxとマークされた）からの文字番号をエンコードするビットを決定します。"
    },
    {
      "indent": 3,
      "text": "3. Distribute the bits from the sequence to the binary number, first the lower-order bits from the last octet of the sequence and proceeding to the left until no x bits are left. The binary number is now equal to the character number.",
      "ja": "3. シーケンスからバイナリ数にビットを分配します。最初にシーケンスの最後のオクテットから低次ビットを分配し、Xビットが残されるまで左に進みます。バイナリ番号は、文字番号に等しくなります。"
    },
    {
      "indent": 3,
      "text": "Implementations of the decoding algorithm above MUST protect against decoding invalid sequences. For instance, a naive implementation may decode the overlong UTF-8 sequence C0 80 into the character U+0000, or the surrogate pair ED A1 8C ED BE B4 into U+233B4. Decoding invalid sequences may have security consequences or cause other problems. See Security Considerations (Section 10) below.",
      "ja": "上記のデコードアルゴリズムの実装は、無効なシーケンスのデコードから保護する必要があります。たとえば、素朴な実装では、UTF-8シーケンスC0 80を文字U 0000にデコードするか、a1 8c ed be b4 in u 233b4にed ed a1 8c edをデコードする場合があります。無効なシーケンスを解読することは、セキュリティの結果をもたらすか、他の問題を引き起こす可能性があります。以下のセキュリティに関する考慮事項（セクション10）を参照してください。"
    },
    {
      "indent": 0,
      "text": "4. Syntax of UTF-8 Byte Sequences",
      "section_title": true,
      "ja": "4. UTF-8バイトシーケンスの構文"
    },
    {
      "indent": 3,
      "text": "For the convenience of implementors using ABNF, a definition of UTF-8 in ABNF syntax is given here.",
      "ja": "ABNFを使用する実装者の利便性のために、ABNF構文のUTF-8の定義をここに示します。"
    },
    {
      "indent": 3,
      "text": "A UTF-8 string is a sequence of octets representing a sequence of UCS characters. An octet sequence is valid UTF-8 only if it matches the following syntax, which is derived from the rules for encoding UTF-8 and is expressed in the ABNF of [RFC2234].",
      "ja": "UTF-8文字列は、UCS文字のシーケンスを表すオクテットのシーケンスです。Octetシーケンスは、UTF-8をエンコードするためのルールから導出され、[RFC2234]のABNFで表される次の構文と一致する場合にのみ、有効なUTF-8です。"
    },
    {
      "indent": 3,
      "text": "UTF8-octets = *( UTF8-char )\nUTF8-char   = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4\nUTF8-1      = %x00-7F\nUTF8-2      = %xC2-DF UTF8-tail\n   UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n              %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\nUTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n              %xF4 %x80-8F 2( UTF8-tail )\nUTF8-tail   = %x80-BF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "NOTE -- The authoritative definition of UTF-8 is in [UNICODE]. This grammar is believed to describe the same thing Unicode describes, but does not claim to be authoritative. Implementors are urged to rely on the authoritative source, rather than on this ABNF.",
      "ja": "注 -  UTF-8の権威ある定義は[Unicode]にあります。この文法は、Unicodeが説明しているのと同じことを説明すると考えられていますが、権威あるとは主張していません。実装者は、このABNFではなく、権威ある情報源に依存するように促されます。"
    },
    {
      "indent": 0,
      "text": "5. Versions of the standards",
      "section_title": true,
      "ja": "5. 標準のバージョン"
    },
    {
      "indent": 3,
      "text": "ISO/IEC 10646 is updated from time to time by publication of amendments and additional parts; similarly, new versions of the Unicode standard are published over time. Each new version obsoletes and replaces the previous one, but implementations, and more significantly data, are not updated instantly.",
      "ja": "ISO/IEC 10646は、修正と追加の部品の公開により、随時更新されます。同様に、Unicode標準の新しいバージョンは時間の経過とともに公開されます。新しいバージョンの各バージョンは、前のバージョンを廃止および置き換えますが、実装とより大幅にデータは即座に更新されません。"
    },
    {
      "indent": 3,
      "text": "In general, the changes amount to adding new characters, which does not pose particular problems with old data. In 1996, Amendment 5 to the 1993 edition of ISO/IEC 10646 and Unicode 2.0 moved and expanded the Korean Hangul block, thereby making any previous data containing Hangul characters invalid under the new version. Unicode 2.0 has the same difference from Unicode 1.1. The justification for allowing such an incompatible change was that there were no major implementations and no significant amounts of data containing Hangul. The incident has been dubbed the \"Korean mess\", and the relevant committees have pledged to never, ever again make such an incompatible change (see Unicode Consortium Policies [1]).",
      "ja": "一般に、変更は新しい文字を追加することにかかりますが、これは古いデータに特定の問題をもたらさない。1996年、ISO/IEC 10646とUnicode 2.0の1993年版の修正5が韓国の格納庫ブロックを移動および拡張し、それにより、新しいバージョンの下でハングル文字を含む以前のデータを無効にしました。Unicode 2.0には、Unicode 1.1と同じ差があります。このような互換性のない変更を許可する正当化は、大きな実装がなく、ハングルを含むかなりの量のデータがなかったことでした。この事件は「韓国の混乱」と呼ばれ、関連する委員会は決してそのような互換性のない変化を起こさないことを誓約しました（Unicode Consortium Policies [1]を参照）。"
    },
    {
      "indent": 3,
      "text": "New versions, and in particular any incompatible changes, have consequences regarding MIME charset labels, to be discussed in MIME registration (Section 8).",
      "ja": "新しいバージョン、特に互換性のない変更は、MIME登録で議論されるMIME Charsetラベルに関して結果をもたらします（セクション8）。"
    },
    {
      "indent": 0,
      "text": "6. Byte order mark (BOM)",
      "section_title": true,
      "ja": "6. バイトオーダーマーク（bom）"
    },
    {
      "indent": 3,
      "text": "The UCS character U+FEFF \"ZERO WIDTH NO-BREAK SPACE\" is also known informally as \"BYTE ORDER MARK\" (abbreviated \"BOM\"). This character can be used as a genuine \"ZERO WIDTH NO-BREAK SPACE\" within text, but the BOM name hints at a second possible usage of the character: to prepend a U+FEFF character to a stream of UCS characters as a \"signature\". A receiver of such a serialized stream may then use the initial character as a hint that the stream consists of UCS characters and also to recognize which UCS encoding is involved and, with encodings having a multi-octet encoding unit, as a way to recognize the serialization order of the octets. UTF-8 having a single-octet encoding unit, this last function is useless and the BOM will always appear as the octet sequence EF BB BF.",
      "ja": "UCSキャラクターu feff「ゼロ幅ノーブレイクスペース」は、非公式に「バイトオーダーマーク」（「BOM」を省略）として知られています。このキャラクターは、テキスト内の本物の「ゼロ幅なしの空間」として使用できますが、BOM名はキャラクターの2番目の使用可能な使用量を示唆しています。UEFEFF文字をUCSキャラクターのストリームに「Signature」としてプレイすることを示唆しています。。そのようなシリアル化されたストリームの受信者は、初期文字をStreamがUCS文字で構成されていることをヒントとして使用する場合があります。また、どのUCSエンコーディングが関与しているかを認識し、エンコーディングを使用して、マルチオクテットエンコーディングユニットを備えています。オクテットのシリアル化順序。UTF-8単一オクテットエンコードユニットを持つこの最後の関数は役に立たず、BOMは常にOctetシーケンスEF BB BFとして表示されます。"
    },
    {
      "indent": 3,
      "text": "It is important to understand that the character U+FEFF appearing at any position other than the beginning of a stream MUST be interpreted with the semantics for the zero-width non-breaking space, and MUST NOT be interpreted as a signature. When interpreted as a signature, the Unicode standard suggests than an initial U+FEFF character may be stripped before processing the text. Such stripping is necessary in some cases (e.g., when concatenating two strings, because otherwise the resulting string may contain an unintended \"ZERO WIDTH NO-BREAK SPACE\" at the connection point), but might affect an external process at a different layer (such as a digital signature or a count of the characters) that is relying on the presence of all characters in the stream. It is therefore RECOMMENDED to avoid stripping an initial U+FEFF interpreted as a signature without a good reason, to ignore it instead of stripping it when appropriate (such as for display) and to strip it only when really necessary.",
      "ja": "ストリームの開始以外のどの位置に表示されるキャラクターu feffは、ゼロ幅の非壊れた空間のセマンティクスと解釈され、署名として解釈されてはならないことを理解することが重要です。署名として解釈される場合、Unicode標準は、テキストを処理する前に、初期のU FEFF文字よりも削除される可能性があることを示唆しています。このようなストリッピングは、場合によっては必要になります（例：2つの文字列を連結する場合、そうでなければ、結果の文字列には接続ポイントで意図しない「幅のない幅のない空間」が含まれている可能性がありますが、異なるレイヤーでの外部プロセスに影響を与える可能性があります。ストリーム内のすべてのキャラクターの存在に依存しているデジタル署名またはキャラクターのカウントとして）。したがって、正当な理由なしに署名として解釈された最初のu feffを除去しないようにすることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "U+FEFF in the first position of a stream MAY be interpreted as a zero-width non-breaking space, and is not always a signature. In an attempt at diminishing this uncertainty, Unicode 3.2 adds a new character, U+2060 \"WORD JOINER\", with exactly the same semantics and usage as U+FEFF except for the signature function, and strongly recommends its exclusive use for expressing word-joining semantics. Eventually, following this recommendation will make it all but certain that any initial U+FEFF is a signature, not an intended \"ZERO WIDTH NO-BREAK SPACE\".",
      "ja": "u feffは、ストリームの最初の位置にあるweffは、幅のない幅のない非壊れた空間として解釈される場合があり、常に署名ではありません。この不確実性を低下させようとして、Unicode 3.2は、署名関数を除いてU FEFFとまったく同じセマンティクスと使用法を備えた新しい文字u 2060 \"Word Joiner\"を追加し、単語をつなぐセマンティクスを表現するための排他的使用を強くお勧めします。。最終的に、この推奨に従って、最初のU FEFFが意図された「幅のゼロ幅なしの空間」ではなく、署名であることを確実にすることができます。"
    },
    {
      "indent": 3,
      "text": "In the meantime, the uncertainty unfortunately remains and may affect Internet protocols. Protocol specifications MAY restrict usage of U+FEFF as a signature in order to reduce or eliminate the potential ill effects of this uncertainty. In the interest of striking a balance between the advantages (reduction of uncertainty) and drawbacks (loss of the signature function) of such restrictions, it is useful to distinguish a few cases:",
      "ja": "それまでの間、不確実性は残念ながら、インターネットプロトコルに影響を与える可能性があります。プロトコル仕様は、この不確実性の潜在的な悪影響を軽減または排除するために、U FEFFの使用を署名として制限する場合があります。そのような制限の利点（不確実性の減少）と欠点（署名関数の喪失）のバランスをとるために、いくつかのケースを区別することは有用です。"
    },
    {
      "indent": 3,
      "text": "o A protocol SHOULD forbid use of U+FEFF as a signature for those textual protocol elements that the protocol mandates to be always UTF-8, the signature function being totally useless in those cases.",
      "ja": "o プロトコルは、プロトコルが常にUTF-8であると義務付けているテキストプロトコル要素の署名としてU FEFFを使用する必要があります。これらの場合、署名関数はまったく役に立たないものです。"
    },
    {
      "indent": 3,
      "text": "o A protocol SHOULD also forbid use of U+FEFF as a signature for those textual protocol elements for which the protocol provides character encoding identification mechanisms, when it is expected that implementations of the protocol will be in a position to always use the mechanisms properly. This will be the case when the protocol elements are maintained tightly under the control of the implementation from the time of their creation to the time of their (properly labeled) transmission.",
      "ja": "o プロトコルは、プロトコルの実装が常にメカニズムを適切に使用する立場にあると予想される場合、プロトコルが文字エンコード識別メカニズムを提供するテキストプロトコル要素の署名としてU FEFFを使用することも禁止する必要があります。これは、プロトコル要素が、作成時から（適切にラベル付けされた）伝送の時期まで、実装の制御下でしっかりと維持される場合に当てはまります。"
    },
    {
      "indent": 3,
      "text": "o A protocol SHOULD NOT forbid use of U+FEFF as a signature for those textual protocol elements for which the protocol does not provide character encoding identification mechanisms, when a ban would be unenforceable, or when it is expected that implementations of the protocol will not be in a position to always use the mechanisms properly. The latter two cases are likely to occur with larger protocol elements such as MIME entities, especially when implementations of the protocol will obtain such entities from file systems, from protocols that do not have encoding identification mechanisms for payloads (such as FTP) or from other protocols that do not guarantee proper identification of character encoding (such as HTTP).",
      "ja": "o プロトコルは、プロトコルが文字エンコードの識別メカニズムを提供しないテキストプロトコル要素の署名として、禁止が執行不能になる場合、またはプロトコルの実装が存在しないと予想される場合に、U FEFFを使用することを禁止すべきではありません。常にメカニズムを適切に使用する位置。後者の2つのケースは、MIMEエンティティなどのより大きなプロトコル要素で発生する可能性があります。特に、プロトコルの実装により、ペイロード（FTPなど）または他の識別メカニズムをエンコードしていないプロトコルからファイルシステムからそのようなエンティティが取得される場合は、文字エンコード（HTTPなど）の適切な識別を保証しないプロトコル。"
    },
    {
      "indent": 3,
      "text": "When a protocol forbids use of U+FEFF as a signature for a certain protocol element, then any initial U+FEFF in that protocol element MUST be interpreted as a \"ZERO WIDTH NO-BREAK SPACE\". When a protocol does NOT forbid use of U+FEFF as a signature for a certain protocol element, then implementations SHOULD be prepared to handle a signature in that element and react appropriately: using the signature to identify the character encoding as necessary and stripping or ignoring the signature as appropriate.",
      "ja": "プロトコルが特定のプロトコル要素の署名としてU FEFFを使用することを禁止する場合、そのプロトコル要素の最初のU FEFFは「ゼロ幅ノーブレイクスペース」として解釈する必要があります。プロトコルが特定のプロトコル要素の署名としてU FEFFの使用を禁止していない場合、その要素の署名を処理し、適切に反応するように実装を準備する必要があります。必要に応じて署名。"
    },
    {
      "indent": 0,
      "text": "7. Examples",
      "section_title": true,
      "ja": "7. 例"
    },
    {
      "indent": 3,
      "text": "The character sequence U+0041 U+2262 U+0391 U+002E \"A<NOT IDENTICAL TO><ALPHA>.\" is encoded in UTF-8 as follows:",
      "ja": "文字シーケンスU 0041 U 2262 U 0391 U 002E \"a <> <alpha>と同一ではありません。\"次のようにUTF-8でエンコードされています。"
    },
    {
      "indent": 7,
      "text": "--+--------+-----+--\n41 E2 89 A2 CE 91 2E\n--+--------+-----+--",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The character sequence U+D55C U+AD6D U+C5B4 (Korean \"hangugeo\", meaning \"the Korean language\") is encoded in UTF-8 as follows:",
      "ja": "キャラクターシーケンスU D55C U AD6D U C5B4（韓国の「ハングジョ」、「韓国語」を意味する）は、次のようにUTF-8でエンコードされます。"
    },
    {
      "indent": 7,
      "text": "--------+--------+--------\nED 95 9C EA B5 AD EC 96 B4\n--------+--------+--------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The character sequence U+65E5 U+672C U+8A9E (Japanese \"nihongo\", meaning \"the Japanese language\") is encoded in UTF-8 as follows:",
      "ja": "キャラクターシーケンスU 65E5 U 672C U 8A9E（日本の「ニホンゴ」、「日本語」を意味する）は、次のようにUTF-8でエンコードされています。"
    },
    {
      "indent": 7,
      "text": "--------+--------+--------\nE6 97 A5 E6 9C AC E8 AA 9E\n--------+--------+--------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The character U+233B4 (a Chinese character meaning 'stump of tree'), prepended with a UTF-8 BOM, is encoded in UTF-8 as follows:",
      "ja": "UTF-8 BOMで準備されたキャラクターu 233b4（「木の切り株」を意味する漢字）は、次のようにUTF-8でエンコードされます。"
    },
    {
      "indent": 7,
      "text": "--------+-----------\nEF BB BF F0 A3 8E B4\n--------+-----------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "8. MIME registration",
      "section_title": true,
      "ja": "8. MIME登録"
    },
    {
      "indent": 3,
      "text": "This memo serves as the basis for registration of the MIME charset parameter for UTF-8, according to [RFC2978]. The charset parameter value is \"UTF-8\". This string labels media types containing text consisting of characters from the repertoire of ISO/IEC 10646 including all amendments at least up to amendment 5 of the 1993 edition (Korean block), encoded to a sequence of octets using the encoding scheme outlined above. UTF-8 is suitable for use in MIME content types under the \"text\" top-level type.",
      "ja": "このメモは、[RFC2978]によると、UTF-8のMIME CHARSETパラメーターの登録の基礎として機能します。Charsetパラメーター値は「UTF-8」です。この文字列は、上記のエンコードスキームを使用してオクテットのシーケンスにエンコードされた、1993年版（韓国ブロック）の少なくとも修正5までのすべての修正を含むISO/IEC 10646のレパートリーの文字で構成されるテキストを含むメディアタイプを含むメディアタイプをラベル付けします。UTF-8は、「テキスト」のトップレベルタイプでMIMEコンテンツタイプで使用するのに適しています。"
    },
    {
      "indent": 3,
      "text": "It is noteworthy that the label \"UTF-8\" does not contain a version identification, referring generically to ISO/IEC 10646. This is intentional, the rationale being as follows:",
      "ja": "ラベル「UTF-8」には、ISO/IEC 10646を一般的に参照するバージョン識別が含まれていないことは注目に値します。これは意図的なものであり、理論的根拠は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "A MIME charset label is designed to give just the information needed to interpret a sequence of bytes received on the wire into a sequence of characters, nothing more (see [RFC2045], section 2.2). As long as a character set standard does not change incompatibly, version numbers serve no purpose, because one gains nothing by learning from the tag that newly assigned characters may be received that one doesn't know about. The tag itself doesn't teach anything about the new characters, which are going to be received anyway.",
      "ja": "Mime Charsetラベルは、ワイヤー上で受信したバイトのシーケンスを一連の文字に解釈するために必要な情報のみを提供するように設計されています（[RFC2045]、セクション2.2を参照）。文字セットの標準が互換性がない限り、バージョン番号は目的を果たしません。なぜなら、新しく割り当てられたキャラクターが知らないタグから学習することで何も得ないからです。タグ自体は、とにかく受信される新しいキャラクターについて何も教えていません。"
    },
    {
      "indent": 3,
      "text": "Hence, as long as the standards evolve compatibly, the apparent advantage of having labels that identify the versions is only that, apparent. But there is a disadvantage to such version-dependent labels: when an older application receives data accompanied by a newer, unknown label, it may fail to recognize the label and be completely unable to deal with the data, whereas a generic, known label would have triggered mostly correct processing of the data, which may well not contain any new characters.",
      "ja": "したがって、標準が互換性がある限り進化している限り、バージョンを識別するラベルを持つことの明らかな利点は、それだけです。しかし、そのようなバージョン依存ラベルには不利な点があります。古いアプリケーションがより新しい未知のラベルを伴うデータを受信すると、ラベルを認識できず、データを完全に処理できない場合がありますが、一般的な既知のラベルはデータのほぼ正しい処理をトリガーしましたが、これには新しい文字が含まれていない場合があります。"
    },
    {
      "indent": 3,
      "text": "Now the \"Korean mess\" (ISO/IEC 10646 amendment 5) is an incompatible change, in principle contradicting the appropriateness of a version independent MIME charset label as described above. But the compatibility problem can only appear with data containing Korean Hangul characters encoded according to Unicode 1.1 (or equivalently ISO/IEC 10646 before amendment 5), and there is arguably no such data to worry about, this being the very reason the incompatible change was deemed acceptable.",
      "ja": "現在、「韓国の混乱」（ISO/IEC 10646修正5）は、原則として、上記のようにバージョンの独立したMime Charsetラベルの適切性と矛盾すると矛盾しています。しかし、互換性の問題は、Unicode 1.1（または同等のISO/IEC 10646以前の修正5）に従ってエンコードされた韓国のハングル文字を含むデータでのみ表示され、間違いなく心配するようなデータはありません。受け入れられるとみなされます。"
    },
    {
      "indent": 3,
      "text": "In practice, then, a version-independent label is warranted, provided the label is understood to refer to all versions after Amendment 5, and provided no incompatible change actually occurs. Should incompatible changes occur in a later version of ISO/IEC 10646, the MIME charset label defined here will stay aligned with the previous version until and unless the IETF specifically decides otherwise.",
      "ja": "実際には、レーベルが修正5後にすべてのバージョンを参照していると理解されている場合、バージョンに依存しないラベルが保証され、実際に互換性のない変更が発生しない場合。ISO/IEC 10646の後のバージョンで互換性のない変更が発生した場合、ここで定義されているMIME CharSetラベルは、IETFが特別に決定されない限り、以前のバージョンと整合したままです。"
    },
    {
      "indent": 0,
      "text": "9. IANA Considerations",
      "section_title": true,
      "ja": "9. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "The entry for UTF-8 in the IANA charset registry has been updated to point to this memo.",
      "ja": "IANA CharsetレジストリのUTF-8のエントリは、このメモを指すように更新されました。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Implementers of UTF-8 need to consider the security aspects of how they handle illegal UTF-8 sequences. It is conceivable that in some circumstances an attacker would be able to exploit an incautious UTF-8 parser by sending it an octet sequence that is not permitted by the UTF-8 syntax.",
      "ja": "UTF-8の実装者は、違法なUTF-8シーケンスの処理方法のセキュリティ側面を考慮する必要があります。状況によっては、攻撃者がUTF-8構文で許可されていないオクテットシーケンスを送信することにより、争われていないUTF-8パーサーを悪用できると考えられます。"
    },
    {
      "indent": 3,
      "text": "A particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters. For example, a parser might prohibit the NUL character when encoded as the single-octet sequence 00, but erroneously allow the illegal two-octet sequence C0 80 and interpret it as a NUL character. Another example might be a parser which prohibits the octet sequence 2F 2E 2E 2F (\"/../\"), yet permits the illegal octet sequence 2F C0 AE 2E 2F. This last exploit has actually been used in a widespread virus attacking Web servers in 2001; thus, the security threat is very real.",
      "ja": "この攻撃の特に微妙な形式は、入力のUTF-8エンコードされた形式に対してセキュリティ批判的な妥当性チェックを実行するパーサーに対して実行できますが、特定の違法オクテットシーケンスを文字として解釈します。たとえば、パーサーは、単一オクテットシーケンス00としてエンコードされたときにnul文字を禁止する可能性がありますが、違法な2オクテットシーケンスC0 80を誤って許可し、それをnul文字として解釈します。もう1つの例は、Octetシーケンス2F 2E 2E 2F（ \"/../\"）を禁止するパーサーである可能性がありますが、違法なオクテットシーケンス2F C0 AE 2E 2Fを許可します。この最後のエクスプロイトは、2001年にWebサーバーを攻撃する広範なウイルスで実際に使用されています。したがって、セキュリティの脅威は非常に現実的です。"
    },
    {
      "indent": 3,
      "text": "Another security issue occurs when encoding to UTF-8: the ISO/IEC 10646 description of UTF-8 allows encoding character numbers up to U+7FFFFFFF, yielding sequences of up to 6 bytes. There is therefore a risk of buffer overflow if the range of character numbers is not explicitly limited to U+10FFFF or if buffer sizing doesn't take into account the possibility of 5- and 6-byte sequences.",
      "ja": "UTF-8へのエンコードの場合、別のセキュリティの問題が発生します。ISO/IEC 10646 UTF-8の説明により、U 7FFFFFFFの文字番号をエンコードし、最大6バイトのシーケンスを生成します。したがって、文字番号の範囲がu 10ffffに明示的に制限されていない場合、またはバッファサイジングが5バイトと6バイトのシーケンスの可能性を考慮していない場合、バッファオーバーフローのリスクがあります。"
    },
    {
      "indent": 3,
      "text": "Security may also be impacted by a characteristic of several character encodings, including UTF-8: the \"same thing\" (as far as a user can tell) can be represented by several distinct character sequences. For instance, an e with acute accent can be represented by the precomposed U+00E9 E ACUTE character or by the canonically equivalent sequence U+0065 U+0301 (E + COMBINING ACUTE). Even though UTF-8 provides a single byte sequence for each character sequence, the existence of multiple character sequences for \"the same thing\" may have security consequences whenever string matching, indexing, searching, sorting, regular expression matching and selection are involved. An example would be string matching of an identifier appearing in a credential and in access control list entries. This issue is amenable to solutions based on Unicode Normalization Forms, see [UAX15].",
      "ja": "また、セキュリティは、UTF-8：「同じもの」（ユーザーが知る限り）を含むいくつかのキャラクターエンコーディングの特性によって影響を受ける可能性があります。たとえば、急性アクセントを備えたEは、事前に繰り返されるU 00E9 Eの急性特性または標準的に同等のシーケンスU 0065 U 0301（eを組み合わせた急性）で表すことができます。UTF-8は、各文字シーケンスに単一のバイトシーケンスを提供しますが、「同じもの」の複数の文字シーケンスの存在は、文字列のマッチング、インデックス付け、検索、ソート、正規表現のマッチング、選択の選択が必要な場合は、セキュリティ結果をもたらす可能性があります。例は、資格情報とアクセス制御リストエントリに表示される識別子の文字列マッチングです。この問題は、ユニコード正規化フォームに基づくソリューションに適しています。[UAX15]を参照してください。"
    },
    {
      "indent": 0,
      "text": "11. Acknowledgements",
      "section_title": true,
      "ja": "11. 謝辞"
    },
    {
      "indent": 3,
      "text": "The following have participated in the drafting and discussion of this memo: James E. Agenbroad, Harald Alvestrand, Andries Brouwer, Mark Davis, Martin J. Duerst, Patrick Faltstrom, Ned Freed, David Goldsmith, Tony Hansen, Edwin F. Hart, Paul Hoffman, David Hopwood, Simon Josefsson, Kent Karlsson, Dan Kohn, Markus Kuhn, Michael Kung, Alain LaBonte, Ira McDonald, Alexey Melnikov, MURATA Makoto, John Gardiner Myers, Chris Newman, Dan Oscarsson, Roozbeh Pournader, Murray Sargent, Markus Scherer, Keld Simonsen, Arnold Winkler, Kenneth Whistler and Misha Wolf.",
      "ja": "以下は、このメモの起草と議論に参加しています：ジェームズ・E・アジェンブロード、ハラルド・アルベスランド、アンドリー・ブラウワー、マーク・デイビス、マーティン・J・デュエルド、パトリック・ファルトストロム、ネッド・フリード、デビッド・ゴールドスミス、トニー・ハンセン、エドウィン・F・ハート、ポールホフマン、デイビッド・ホップウッド、サイモン・ジョセフソン、ケント・カールソン、ダン・コーン、マルクス・クーン、マイケル・カン、アラン・ラボンテ、イラ・マクドナルド、アレクセイ・メルニコフ、ムラタ・マコト、ジョン・ガーディナー・マイヤーズ、クリス・ニューマン、ダン・オスカーズソン、ルーズベア・ポーナ、マレー・サージャス、マルカス・ジャーター、ケルド・シモンセン、アーノルド・ウィンクラー、ケネス・ウィスラー、ミシャ・ウルフ。"
    },
    {
      "indent": 0,
      "text": "12. Changes from RFC 2279",
      "section_title": true,
      "ja": "12. RFC 2279からの変更"
    },
    {
      "indent": 3,
      "text": "o Restricted the range of characters to 0000-10FFFF (the UTF-16 accessible range).",
      "ja": "o 文字の範囲を0000-10ffff（UTF-16アクセス可能な範囲）に制限しました。"
    },
    {
      "indent": 3,
      "text": "o Made Unicode the source of the normative definition of UTF-8, keeping ISO/IEC 10646 as the reference for characters.",
      "ja": "o UnicodeをUTF-8の規範的定義のソースにし、ISO/IEC 10646を文字の参照として維持しました。"
    },
    {
      "indent": 3,
      "text": "o Straightened out terminology. UTF-8 now described in terms of an encoding form of the character number. UCS-2 and UCS-4 almost disappeared.",
      "ja": "o 用語をまっすぐにしました。UTF-8は、文字番号のエンコード形式の観点から説明されています。UCS-2とUCS-4はほとんど消えました。"
    },
    {
      "indent": 3,
      "text": "o Turned the note warning against decoding of invalid sequences into a normative MUST NOT.",
      "ja": "o 無効なシーケンスのデコードに対する警告を標準に変えてはいけません。"
    },
    {
      "indent": 3,
      "text": "o Added a new section about the UTF-8 BOM, with advice for protocols.",
      "ja": "o プロトコルに関するアドバイスを含む、UTF-8 BOMに関する新しいセクションを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Removed suggested UNICODE-1-1-UTF-8 MIME charset registration.",
      "ja": "o 削除されたUnicode-1-1-UTF-8 Mime Charset登録。"
    },
    {
      "indent": 3,
      "text": "o Added an ABNF syntax for valid UTF-8 octet sequences",
      "ja": "o 有効なUTF-8オクテットシーケンスのABNF構文を追加しました"
    },
    {
      "indent": 3,
      "text": "o Expanded Security Considerations section, in particular impact of Unicode normalization",
      "ja": "o セキュリティ上の考慮事項の拡張セクション、特にユニコード正規化の影響"
    },
    {
      "indent": 0,
      "text": "13. Normative References",
      "section_title": true,
      "ja": "13. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[ISO.10646] International Organization for Standardization, \"Information Technology - Universal Multiple-octet coded Character Set (UCS)\", ISO/IEC Standard 10646, comprised of ISO/IEC 10646-1:2000, \"Information technology -- Universal Multiple-Octet Coded Character Set (UCS) -- Part 1: Architecture and Basic Multilingual Plane\", ISO/IEC 10646-2:2001, \"Information technology -- Universal Multiple-Octet Coded Character Set (UCS) -- Part 2: Supplementary Planes\" and ISO/IEC 10646- 1:2000/Amd 1:2002, \"Mathematical symbols and other characters\".",
      "ja": "[ISO.10646]国際標準化機関、「情報技術 - ユニバーサルマルチオクテットコード化された文字セット（UCS）」、ISO/IEC標準10646、ISO/IEC 10646-1：2000で構成されています。-OCTETコード化された文字セット（UCS） - パート1：アーキテクチャと基本的な多言語平面 \"、ISO/IEC 10646-2：2001、「情報技術 - ユニバーサルマルチオクテットコード化された文字セット（UCS） - パート2：補足平面」およびISO/IEC 10646- 1：2000/AMD 1：2002、「数学的シンボルおよびその他の文字」。"
    },
    {
      "indent": 3,
      "text": "[UNICODE] The Unicode Consortium, \"The Unicode Standard -- Version 4.0\", defined by The Unicode Standard, Version 4.0 (Boston, MA, Addison-Wesley, 2003. ISBN 0-321-18578-1), April 2003, <http://www.unicode.org/unicode/standard/ versions/enumeratedversions.html#Unicode_4_0_0>.",
      "ja": "[Unicode] Unicode Consortium、「Unicode Standard-Version 4.0」、Unicode Standard、Version 4.0（MA、Addison-Wesley、2003年。ISBN0-321-18578-1）、2003年4月、<http://www.unicode.org/unicode/standard/バージョン/enumeratedversions.html＃unicode_4_0_0>。"
    },
    {
      "indent": 0,
      "text": "14. Informative References",
      "section_title": true,
      "ja": "14. 参考引用"
    },
    {
      "indent": 3,
      "text": "[CESU-8] Phipps, T., \"Unicode Technical Report #26: Compatibility Encoding Scheme for UTF-16: 8-Bit (CESU-8)\", UTR 26, April 2002, <http://www.unicode.org/unicode/reports/tr26/>.",
      "ja": "[CESU-8] Phipps、T。、「Unicodeテクニカルレポート＃26：UTF-16：8ビット（CESU-8）の互換性エンコードスキーム」、UTR 26、2002年4月、<http：//www.unicode。org/unicode/Reports/TR26/>。"
    },
    {
      "indent": 3,
      "text": "[FSS_UTF] X/Open Company Ltd., \"X/Open Preliminary Specification -- File System Safe UCS Transformation Format (FSS-UTF)\", May 1993, <http://wwwold.dkuug.dk/jtc1/sc22/wg20/docs/ N193-FSS-UTF.pdf>.",
      "ja": "[FSS_UTF] X/Open Company Ltd.、「X/Open予備仕様 - ファイルシステム安全なUCS変換形式（FSS-UTF）」、1993年5月、<http://wwwold.dkuug.dk/jtc1/sc22/wg20/ docs/ n193-fss-utf.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC2045] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\", RFC 2045, November 1996.",
      "ja": "[RFC2045] Freed、N。およびN. Borenstein、「多目的インターネットメールエクステンション（MIME）パート1：インターネットメッセージボディの形式」、RFC 2045、1996年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC2234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "[RFC2234] Crocker、D。およびP. Overell、「構文仕様のためのBNFの増強：ABNF」、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC2978] Freed, N. and J. Postel, \"IANA Charset Registration Procedures\", BCP 19, RFC 2978, October 2000.",
      "ja": "[RFC2978] Freed、N。およびJ. Postel、「Iana Charset登録手順」、BCP 19、RFC 2978、2000年10月。"
    },
    {
      "indent": 3,
      "text": "[UAX15] Davis, M. and M. Duerst, \"Unicode Standard Annex #15: Unicode Normalization Forms\", An integral part of The Unicode Standard, Version 4.0.0, April 2003, <http:// www.unicode.org/unicode/reports/tr15>.",
      "ja": "[UAX15] Davis、M。and M. Duerst、「Unicode Standard Annex＃15：Unicode Normalization Forms」、Unicode Standardの不可欠な部分、バージョン4.0.0、2003年4月、<http：// www.unicode.org/unicode/Reports/TR15>。"
    },
    {
      "indent": 3,
      "text": "[US-ASCII] American National Standards Institute, \"Coded Character Set - 7-bit American Standard Code for Information Interchange\", ANSI X3.4, 1986.",
      "ja": "[US-ASCII] American National Standards Institute、「コード化された文字セット-7ビットの情報インターチェンジのためのアメリカ標準コード」、ANSI X3.4、1986。"
    },
    {
      "indent": 0,
      "text": "15. URIs",
      "section_title": true,
      "ja": "15. ウリス"
    },
    {
      "indent": 3,
      "text": "[1]  <http://www.unicode.org/unicode/standard/policies.html>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "16. Intellectual Property Statement",
      "section_title": true,
      "ja": "16. 知的財産声明"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on the IETF's procedures with respect to rights in standards-track and standards-related documentation can be found in BCP-11. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification can be obtained from the IETF Secretariat.",
      "ja": "IETFは、知的財産またはその他の権利の有効性または範囲に関して、この文書に記載されているテクノロジーの実装または使用に関連すると主張される可能性のある他の権利、またはそのような権利に基づくライセンスがどの程度であるかについての程度に関連する可能性があるという立場はありません。利用可能;また、そのような権利を特定するために努力したことも表明していません。標準トラックおよび標準関連のドキュメントの権利に関するIETFの手順に関する情報は、BCP-11に記載されています。出版のために利用可能にされた権利の請求のコピーと、利用可能になるライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような独自の権利の使用のための一般的なライセンスまたは許可を取得しようとする試みの結果を得ることができますIETF事務局から。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to practice this standard. Please address the information to the IETF Executive Director.",
      "ja": "IETFは、関心のある当事者に、この基準を実践するために必要な技術をカバーする可能性のある著作権、特許、または特許出願、またはその他の独自の権利を注意深く招待するよう招待しています。情報をIETFエグゼクティブディレクターに宛ててください。"
    },
    {
      "indent": 0,
      "text": "17. Author's Address",
      "section_title": true,
      "ja": "17. 著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Francois Yergeau Alis Technologies 100, boul. Alexis-Nihon, bureau 600 Montreal, QC H4M 2P2 Canada",
      "ja": "Francois Yergeau Alis Technologies 100、Boul。Alexis-Nihon、Bureau 600 Montreal、QC H4M 2P2カナダ"
    },
    {
      "indent": 3,
      "text": "Phone: +1 514 747 2547\nFax:   +1 514 747 2561\nEMail: fyergeau@alis.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "18. Full Copyright Statement",
      "section_title": true,
      "ja": "18. 完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2003). All Rights Reserved.",
      "ja": "Copyright（c）The Internet Society（2003）。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントと翻訳は他の人にコピーされて提供される場合があります。また、それについてコメントまたは説明する派生作品、またはその実装を支援することは、いかなる種類の制限なしに、準備、コピー、公開、および部分的に配布される場合があります。、上記の著作権通知とこの段落がそのようなすべてのコピーとデリバティブ作品に含まれている場合。ただし、このドキュメント自体は、インターネット協会や他のインターネット組織への著作権通知や参照を削除するなど、いかなる方法でも変更できない場合があります。インターネット標準プロセスに従うか、英語以外の言語に翻訳するために必要な場合に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assignees.",
      "ja": "上記の限られた許可は永続的であり、インターネット社会やその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントと本書に含まれる情報は、「現状」に基づいて提供されており、インターネット社会とインターネットエンジニアリングタスクフォースは、ここにある情報の使用が行われないという保証を含むがこれらに限定されないすべての保証を否認します。特定の目的に対する商品性または適合性の権利または黙示的な保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}